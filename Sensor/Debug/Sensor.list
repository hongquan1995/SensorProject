
Sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000846c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000490  08008610  08008610  00018610  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008aa0  08008aa0  000202b8  2**0
                  CONTENTS
  4 .ARM          00000008  08008aa0  08008aa0  00018aa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008aa8  08008aa8  000202b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008aa8  08008aa8  00018aa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008aac  08008aac  00018aac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002b8  20000000  08008ab0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000093c  200002b8  08008d68  000202b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000bf4  08008d68  00020bf4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ae20  00000000  00000000  000202e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000033f7  00000000  00000000  0003b108  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001418  00000000  00000000  0003e500  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001270  00000000  00000000  0003f918  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000252e2  00000000  00000000  00040b88  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000125f3  00000000  00000000  00065e6a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e101a  00000000  00000000  0007845d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00159477  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005de0  00000000  00000000  001594f4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002b8 	.word	0x200002b8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080085f4 	.word	0x080085f4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002bc 	.word	0x200002bc
 80001dc:	080085f4 	.word	0x080085f4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b972 	b.w	8000eb4 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9e08      	ldr	r6, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	4688      	mov	r8, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d14b      	bne.n	8000c8e <__udivmoddi4+0xa6>
 8000bf6:	428a      	cmp	r2, r1
 8000bf8:	4615      	mov	r5, r2
 8000bfa:	d967      	bls.n	8000ccc <__udivmoddi4+0xe4>
 8000bfc:	fab2 f282 	clz	r2, r2
 8000c00:	b14a      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c02:	f1c2 0720 	rsb	r7, r2, #32
 8000c06:	fa01 f302 	lsl.w	r3, r1, r2
 8000c0a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c0e:	4095      	lsls	r5, r2
 8000c10:	ea47 0803 	orr.w	r8, r7, r3
 8000c14:	4094      	lsls	r4, r2
 8000c16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c1a:	0c23      	lsrs	r3, r4, #16
 8000c1c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c20:	fa1f fc85 	uxth.w	ip, r5
 8000c24:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c2c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c30:	4299      	cmp	r1, r3
 8000c32:	d909      	bls.n	8000c48 <__udivmoddi4+0x60>
 8000c34:	18eb      	adds	r3, r5, r3
 8000c36:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c3a:	f080 811b 	bcs.w	8000e74 <__udivmoddi4+0x28c>
 8000c3e:	4299      	cmp	r1, r3
 8000c40:	f240 8118 	bls.w	8000e74 <__udivmoddi4+0x28c>
 8000c44:	3f02      	subs	r7, #2
 8000c46:	442b      	add	r3, r5
 8000c48:	1a5b      	subs	r3, r3, r1
 8000c4a:	b2a4      	uxth	r4, r4
 8000c4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c58:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c5c:	45a4      	cmp	ip, r4
 8000c5e:	d909      	bls.n	8000c74 <__udivmoddi4+0x8c>
 8000c60:	192c      	adds	r4, r5, r4
 8000c62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c66:	f080 8107 	bcs.w	8000e78 <__udivmoddi4+0x290>
 8000c6a:	45a4      	cmp	ip, r4
 8000c6c:	f240 8104 	bls.w	8000e78 <__udivmoddi4+0x290>
 8000c70:	3802      	subs	r0, #2
 8000c72:	442c      	add	r4, r5
 8000c74:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c78:	eba4 040c 	sub.w	r4, r4, ip
 8000c7c:	2700      	movs	r7, #0
 8000c7e:	b11e      	cbz	r6, 8000c88 <__udivmoddi4+0xa0>
 8000c80:	40d4      	lsrs	r4, r2
 8000c82:	2300      	movs	r3, #0
 8000c84:	e9c6 4300 	strd	r4, r3, [r6]
 8000c88:	4639      	mov	r1, r7
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d909      	bls.n	8000ca6 <__udivmoddi4+0xbe>
 8000c92:	2e00      	cmp	r6, #0
 8000c94:	f000 80eb 	beq.w	8000e6e <__udivmoddi4+0x286>
 8000c98:	2700      	movs	r7, #0
 8000c9a:	e9c6 0100 	strd	r0, r1, [r6]
 8000c9e:	4638      	mov	r0, r7
 8000ca0:	4639      	mov	r1, r7
 8000ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca6:	fab3 f783 	clz	r7, r3
 8000caa:	2f00      	cmp	r7, #0
 8000cac:	d147      	bne.n	8000d3e <__udivmoddi4+0x156>
 8000cae:	428b      	cmp	r3, r1
 8000cb0:	d302      	bcc.n	8000cb8 <__udivmoddi4+0xd0>
 8000cb2:	4282      	cmp	r2, r0
 8000cb4:	f200 80fa 	bhi.w	8000eac <__udivmoddi4+0x2c4>
 8000cb8:	1a84      	subs	r4, r0, r2
 8000cba:	eb61 0303 	sbc.w	r3, r1, r3
 8000cbe:	2001      	movs	r0, #1
 8000cc0:	4698      	mov	r8, r3
 8000cc2:	2e00      	cmp	r6, #0
 8000cc4:	d0e0      	beq.n	8000c88 <__udivmoddi4+0xa0>
 8000cc6:	e9c6 4800 	strd	r4, r8, [r6]
 8000cca:	e7dd      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000ccc:	b902      	cbnz	r2, 8000cd0 <__udivmoddi4+0xe8>
 8000cce:	deff      	udf	#255	; 0xff
 8000cd0:	fab2 f282 	clz	r2, r2
 8000cd4:	2a00      	cmp	r2, #0
 8000cd6:	f040 808f 	bne.w	8000df8 <__udivmoddi4+0x210>
 8000cda:	1b49      	subs	r1, r1, r5
 8000cdc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ce0:	fa1f f885 	uxth.w	r8, r5
 8000ce4:	2701      	movs	r7, #1
 8000ce6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fb0e 111c 	mls	r1, lr, ip, r1
 8000cf0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cf4:	fb08 f10c 	mul.w	r1, r8, ip
 8000cf8:	4299      	cmp	r1, r3
 8000cfa:	d907      	bls.n	8000d0c <__udivmoddi4+0x124>
 8000cfc:	18eb      	adds	r3, r5, r3
 8000cfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d02:	d202      	bcs.n	8000d0a <__udivmoddi4+0x122>
 8000d04:	4299      	cmp	r1, r3
 8000d06:	f200 80cd 	bhi.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d0a:	4684      	mov	ip, r0
 8000d0c:	1a59      	subs	r1, r3, r1
 8000d0e:	b2a3      	uxth	r3, r4
 8000d10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d14:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d1c:	fb08 f800 	mul.w	r8, r8, r0
 8000d20:	45a0      	cmp	r8, r4
 8000d22:	d907      	bls.n	8000d34 <__udivmoddi4+0x14c>
 8000d24:	192c      	adds	r4, r5, r4
 8000d26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x14a>
 8000d2c:	45a0      	cmp	r8, r4
 8000d2e:	f200 80b6 	bhi.w	8000e9e <__udivmoddi4+0x2b6>
 8000d32:	4618      	mov	r0, r3
 8000d34:	eba4 0408 	sub.w	r4, r4, r8
 8000d38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d3c:	e79f      	b.n	8000c7e <__udivmoddi4+0x96>
 8000d3e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d42:	40bb      	lsls	r3, r7
 8000d44:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d48:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d4c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d50:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d54:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d58:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d5c:	4325      	orrs	r5, r4
 8000d5e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d62:	0c2c      	lsrs	r4, r5, #16
 8000d64:	fb08 3319 	mls	r3, r8, r9, r3
 8000d68:	fa1f fa8e 	uxth.w	sl, lr
 8000d6c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d70:	fb09 f40a 	mul.w	r4, r9, sl
 8000d74:	429c      	cmp	r4, r3
 8000d76:	fa02 f207 	lsl.w	r2, r2, r7
 8000d7a:	fa00 f107 	lsl.w	r1, r0, r7
 8000d7e:	d90b      	bls.n	8000d98 <__udivmoddi4+0x1b0>
 8000d80:	eb1e 0303 	adds.w	r3, lr, r3
 8000d84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d88:	f080 8087 	bcs.w	8000e9a <__udivmoddi4+0x2b2>
 8000d8c:	429c      	cmp	r4, r3
 8000d8e:	f240 8084 	bls.w	8000e9a <__udivmoddi4+0x2b2>
 8000d92:	f1a9 0902 	sub.w	r9, r9, #2
 8000d96:	4473      	add	r3, lr
 8000d98:	1b1b      	subs	r3, r3, r4
 8000d9a:	b2ad      	uxth	r5, r5
 8000d9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da0:	fb08 3310 	mls	r3, r8, r0, r3
 8000da4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000da8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000dac:	45a2      	cmp	sl, r4
 8000dae:	d908      	bls.n	8000dc2 <__udivmoddi4+0x1da>
 8000db0:	eb1e 0404 	adds.w	r4, lr, r4
 8000db4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db8:	d26b      	bcs.n	8000e92 <__udivmoddi4+0x2aa>
 8000dba:	45a2      	cmp	sl, r4
 8000dbc:	d969      	bls.n	8000e92 <__udivmoddi4+0x2aa>
 8000dbe:	3802      	subs	r0, #2
 8000dc0:	4474      	add	r4, lr
 8000dc2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dc6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dca:	eba4 040a 	sub.w	r4, r4, sl
 8000dce:	454c      	cmp	r4, r9
 8000dd0:	46c2      	mov	sl, r8
 8000dd2:	464b      	mov	r3, r9
 8000dd4:	d354      	bcc.n	8000e80 <__udivmoddi4+0x298>
 8000dd6:	d051      	beq.n	8000e7c <__udivmoddi4+0x294>
 8000dd8:	2e00      	cmp	r6, #0
 8000dda:	d069      	beq.n	8000eb0 <__udivmoddi4+0x2c8>
 8000ddc:	ebb1 050a 	subs.w	r5, r1, sl
 8000de0:	eb64 0403 	sbc.w	r4, r4, r3
 8000de4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000de8:	40fd      	lsrs	r5, r7
 8000dea:	40fc      	lsrs	r4, r7
 8000dec:	ea4c 0505 	orr.w	r5, ip, r5
 8000df0:	e9c6 5400 	strd	r5, r4, [r6]
 8000df4:	2700      	movs	r7, #0
 8000df6:	e747      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000df8:	f1c2 0320 	rsb	r3, r2, #32
 8000dfc:	fa20 f703 	lsr.w	r7, r0, r3
 8000e00:	4095      	lsls	r5, r2
 8000e02:	fa01 f002 	lsl.w	r0, r1, r2
 8000e06:	fa21 f303 	lsr.w	r3, r1, r3
 8000e0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e0e:	4338      	orrs	r0, r7
 8000e10:	0c01      	lsrs	r1, r0, #16
 8000e12:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e16:	fa1f f885 	uxth.w	r8, r5
 8000e1a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e22:	fb07 f308 	mul.w	r3, r7, r8
 8000e26:	428b      	cmp	r3, r1
 8000e28:	fa04 f402 	lsl.w	r4, r4, r2
 8000e2c:	d907      	bls.n	8000e3e <__udivmoddi4+0x256>
 8000e2e:	1869      	adds	r1, r5, r1
 8000e30:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e34:	d22f      	bcs.n	8000e96 <__udivmoddi4+0x2ae>
 8000e36:	428b      	cmp	r3, r1
 8000e38:	d92d      	bls.n	8000e96 <__udivmoddi4+0x2ae>
 8000e3a:	3f02      	subs	r7, #2
 8000e3c:	4429      	add	r1, r5
 8000e3e:	1acb      	subs	r3, r1, r3
 8000e40:	b281      	uxth	r1, r0
 8000e42:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e46:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e4e:	fb00 f308 	mul.w	r3, r0, r8
 8000e52:	428b      	cmp	r3, r1
 8000e54:	d907      	bls.n	8000e66 <__udivmoddi4+0x27e>
 8000e56:	1869      	adds	r1, r5, r1
 8000e58:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e5c:	d217      	bcs.n	8000e8e <__udivmoddi4+0x2a6>
 8000e5e:	428b      	cmp	r3, r1
 8000e60:	d915      	bls.n	8000e8e <__udivmoddi4+0x2a6>
 8000e62:	3802      	subs	r0, #2
 8000e64:	4429      	add	r1, r5
 8000e66:	1ac9      	subs	r1, r1, r3
 8000e68:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e6c:	e73b      	b.n	8000ce6 <__udivmoddi4+0xfe>
 8000e6e:	4637      	mov	r7, r6
 8000e70:	4630      	mov	r0, r6
 8000e72:	e709      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000e74:	4607      	mov	r7, r0
 8000e76:	e6e7      	b.n	8000c48 <__udivmoddi4+0x60>
 8000e78:	4618      	mov	r0, r3
 8000e7a:	e6fb      	b.n	8000c74 <__udivmoddi4+0x8c>
 8000e7c:	4541      	cmp	r1, r8
 8000e7e:	d2ab      	bcs.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e80:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e84:	eb69 020e 	sbc.w	r2, r9, lr
 8000e88:	3801      	subs	r0, #1
 8000e8a:	4613      	mov	r3, r2
 8000e8c:	e7a4      	b.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e8e:	4660      	mov	r0, ip
 8000e90:	e7e9      	b.n	8000e66 <__udivmoddi4+0x27e>
 8000e92:	4618      	mov	r0, r3
 8000e94:	e795      	b.n	8000dc2 <__udivmoddi4+0x1da>
 8000e96:	4667      	mov	r7, ip
 8000e98:	e7d1      	b.n	8000e3e <__udivmoddi4+0x256>
 8000e9a:	4681      	mov	r9, r0
 8000e9c:	e77c      	b.n	8000d98 <__udivmoddi4+0x1b0>
 8000e9e:	3802      	subs	r0, #2
 8000ea0:	442c      	add	r4, r5
 8000ea2:	e747      	b.n	8000d34 <__udivmoddi4+0x14c>
 8000ea4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ea8:	442b      	add	r3, r5
 8000eaa:	e72f      	b.n	8000d0c <__udivmoddi4+0x124>
 8000eac:	4638      	mov	r0, r7
 8000eae:	e708      	b.n	8000cc2 <__udivmoddi4+0xda>
 8000eb0:	4637      	mov	r7, r6
 8000eb2:	e6e9      	b.n	8000c88 <__udivmoddi4+0xa0>

08000eb4 <__aeabi_idiv0>:
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop

08000eb8 <ModRTU_CRC>:
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
}

// Compute the MODBUS RTU CRC
uint16_t ModRTU_CRC(uint8_t* buf, int len)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b087      	sub	sp, #28
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
 8000ec0:	6039      	str	r1, [r7, #0]
  uint16_t crc = 0xFFFF;
 8000ec2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ec6:	82fb      	strh	r3, [r7, #22]

  for (int pos = 0; pos < len; pos++)
 8000ec8:	2300      	movs	r3, #0
 8000eca:	613b      	str	r3, [r7, #16]
 8000ecc:	e026      	b.n	8000f1c <ModRTU_CRC+0x64>
  {
    crc ^= (uint16_t)buf[pos];          // XOR byte into least sig. byte of crc
 8000ece:	693b      	ldr	r3, [r7, #16]
 8000ed0:	687a      	ldr	r2, [r7, #4]
 8000ed2:	4413      	add	r3, r2
 8000ed4:	781b      	ldrb	r3, [r3, #0]
 8000ed6:	b29a      	uxth	r2, r3
 8000ed8:	8afb      	ldrh	r3, [r7, #22]
 8000eda:	4053      	eors	r3, r2
 8000edc:	82fb      	strh	r3, [r7, #22]

    for (int i = 8; i != 0; i--) {    // Loop over each bit
 8000ede:	2308      	movs	r3, #8
 8000ee0:	60fb      	str	r3, [r7, #12]
 8000ee2:	e015      	b.n	8000f10 <ModRTU_CRC+0x58>
      if ((crc & 0x0001) != 0) {      // If the LSB is set
 8000ee4:	8afb      	ldrh	r3, [r7, #22]
 8000ee6:	f003 0301 	and.w	r3, r3, #1
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d00a      	beq.n	8000f04 <ModRTU_CRC+0x4c>
        crc >>= 1;                    // Shift right and XOR 0xA001
 8000eee:	8afb      	ldrh	r3, [r7, #22]
 8000ef0:	085b      	lsrs	r3, r3, #1
 8000ef2:	82fb      	strh	r3, [r7, #22]
        crc ^= 0xA001;
 8000ef4:	8afb      	ldrh	r3, [r7, #22]
 8000ef6:	f483 43bf 	eor.w	r3, r3, #24448	; 0x5f80
 8000efa:	f083 037e 	eor.w	r3, r3, #126	; 0x7e
 8000efe:	43db      	mvns	r3, r3
 8000f00:	82fb      	strh	r3, [r7, #22]
 8000f02:	e002      	b.n	8000f0a <ModRTU_CRC+0x52>
      }
      else                            // Else LSB is not set
        crc >>= 1;                    // Just shift right
 8000f04:	8afb      	ldrh	r3, [r7, #22]
 8000f06:	085b      	lsrs	r3, r3, #1
 8000f08:	82fb      	strh	r3, [r7, #22]
    for (int i = 8; i != 0; i--) {    // Loop over each bit
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	3b01      	subs	r3, #1
 8000f0e:	60fb      	str	r3, [r7, #12]
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d1e6      	bne.n	8000ee4 <ModRTU_CRC+0x2c>
  for (int pos = 0; pos < len; pos++)
 8000f16:	693b      	ldr	r3, [r7, #16]
 8000f18:	3301      	adds	r3, #1
 8000f1a:	613b      	str	r3, [r7, #16]
 8000f1c:	693a      	ldr	r2, [r7, #16]
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	429a      	cmp	r2, r3
 8000f22:	dbd4      	blt.n	8000ece <ModRTU_CRC+0x16>
    }
  }
  // Note, this number has low and high bytes swapped, so use it accordingly (or swap bytes)
  return crc;
 8000f24:	8afb      	ldrh	r3, [r7, #22]
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	371c      	adds	r7, #28
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
	...

08000f34 <Master_Read_Modbus>:

/*======================== Funcion Master ======================*/
uint8_t Master_Read_Modbus (uint8_t Address, uint8_t FunCode, uint16_t Add_Data, uint16_t LengthData)
{
 8000f34:	b590      	push	{r4, r7, lr}
 8000f36:	b085      	sub	sp, #20
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	4604      	mov	r4, r0
 8000f3c:	4608      	mov	r0, r1
 8000f3e:	4611      	mov	r1, r2
 8000f40:	461a      	mov	r2, r3
 8000f42:	4623      	mov	r3, r4
 8000f44:	71fb      	strb	r3, [r7, #7]
 8000f46:	4603      	mov	r3, r0
 8000f48:	71bb      	strb	r3, [r7, #6]
 8000f4a:	460b      	mov	r3, r1
 8000f4c:	80bb      	strh	r3, [r7, #4]
 8000f4e:	4613      	mov	r3, r2
 8000f50:	807b      	strh	r3, [r7, #2]
    uint16_t crc;
    HAL_StatusTypeDef Result = HAL_ERROR;
 8000f52:	2301      	movs	r3, #1
 8000f54:	73fb      	strb	r3, [r7, #15]
    uint16_t Count = 0;
 8000f56:	2300      	movs	r3, #0
 8000f58:	81bb      	strh	r3, [r7, #12]
    memset(BUFF_DATA_485, '\0', 256);
 8000f5a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f5e:	2100      	movs	r1, #0
 8000f60:	482d      	ldr	r0, [pc, #180]	; (8001018 <Master_Read_Modbus+0xe4>)
 8000f62:	f005 fa9d 	bl	80064a0 <memset>
    // Ðong goi frame
    //1 byte Add Slave
    BUFF_DATA_485[Count++] = Address;
 8000f66:	89bb      	ldrh	r3, [r7, #12]
 8000f68:	1c5a      	adds	r2, r3, #1
 8000f6a:	81ba      	strh	r2, [r7, #12]
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	4a2a      	ldr	r2, [pc, #168]	; (8001018 <Master_Read_Modbus+0xe4>)
 8000f70:	79fb      	ldrb	r3, [r7, #7]
 8000f72:	5453      	strb	r3, [r2, r1]
    //1 byte Funcode
    BUFF_DATA_485[Count++] = FunCode;
 8000f74:	89bb      	ldrh	r3, [r7, #12]
 8000f76:	1c5a      	adds	r2, r3, #1
 8000f78:	81ba      	strh	r2, [r7, #12]
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	4a26      	ldr	r2, [pc, #152]	; (8001018 <Master_Read_Modbus+0xe4>)
 8000f7e:	79bb      	ldrb	r3, [r7, #6]
 8000f80:	5453      	strb	r3, [r2, r1]
    //2 byte Add Data
    BUFF_DATA_485[Count++] = (uint8_t) (Add_Data>>8) & 0xFF;
 8000f82:	88bb      	ldrh	r3, [r7, #4]
 8000f84:	0a1b      	lsrs	r3, r3, #8
 8000f86:	b299      	uxth	r1, r3
 8000f88:	89bb      	ldrh	r3, [r7, #12]
 8000f8a:	1c5a      	adds	r2, r3, #1
 8000f8c:	81ba      	strh	r2, [r7, #12]
 8000f8e:	461a      	mov	r2, r3
 8000f90:	b2c9      	uxtb	r1, r1
 8000f92:	4b21      	ldr	r3, [pc, #132]	; (8001018 <Master_Read_Modbus+0xe4>)
 8000f94:	5499      	strb	r1, [r3, r2]
    BUFF_DATA_485[Count++] = (uint8_t) (Add_Data & 0xFF);
 8000f96:	89bb      	ldrh	r3, [r7, #12]
 8000f98:	1c5a      	adds	r2, r3, #1
 8000f9a:	81ba      	strh	r2, [r7, #12]
 8000f9c:	461a      	mov	r2, r3
 8000f9e:	88bb      	ldrh	r3, [r7, #4]
 8000fa0:	b2d9      	uxtb	r1, r3
 8000fa2:	4b1d      	ldr	r3, [pc, #116]	; (8001018 <Master_Read_Modbus+0xe4>)
 8000fa4:	5499      	strb	r1, [r3, r2]
    //2 byte Data length
    BUFF_DATA_485[Count++] = (uint8_t) (LengthData>>8) & 0xFF;
 8000fa6:	887b      	ldrh	r3, [r7, #2]
 8000fa8:	0a1b      	lsrs	r3, r3, #8
 8000faa:	b299      	uxth	r1, r3
 8000fac:	89bb      	ldrh	r3, [r7, #12]
 8000fae:	1c5a      	adds	r2, r3, #1
 8000fb0:	81ba      	strh	r2, [r7, #12]
 8000fb2:	461a      	mov	r2, r3
 8000fb4:	b2c9      	uxtb	r1, r1
 8000fb6:	4b18      	ldr	r3, [pc, #96]	; (8001018 <Master_Read_Modbus+0xe4>)
 8000fb8:	5499      	strb	r1, [r3, r2]
    BUFF_DATA_485[Count++] = (uint8_t) (LengthData & 0xFF);
 8000fba:	89bb      	ldrh	r3, [r7, #12]
 8000fbc:	1c5a      	adds	r2, r3, #1
 8000fbe:	81ba      	strh	r2, [r7, #12]
 8000fc0:	461a      	mov	r2, r3
 8000fc2:	887b      	ldrh	r3, [r7, #2]
 8000fc4:	b2d9      	uxtb	r1, r3
 8000fc6:	4b14      	ldr	r3, [pc, #80]	; (8001018 <Master_Read_Modbus+0xe4>)
 8000fc8:	5499      	strb	r1, [r3, r2]
    //Tinh 2 byte Crc
    crc = ModRTU_CRC(&BUFF_DATA_485[0],Count);
 8000fca:	89bb      	ldrh	r3, [r7, #12]
 8000fcc:	4619      	mov	r1, r3
 8000fce:	4812      	ldr	r0, [pc, #72]	; (8001018 <Master_Read_Modbus+0xe4>)
 8000fd0:	f7ff ff72 	bl	8000eb8 <ModRTU_CRC>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	817b      	strh	r3, [r7, #10]
    //them 2 byte crc
    BUFF_DATA_485[Count++] = (uint8_t) (crc & 0xFF);
 8000fd8:	89bb      	ldrh	r3, [r7, #12]
 8000fda:	1c5a      	adds	r2, r3, #1
 8000fdc:	81ba      	strh	r2, [r7, #12]
 8000fde:	461a      	mov	r2, r3
 8000fe0:	897b      	ldrh	r3, [r7, #10]
 8000fe2:	b2d9      	uxtb	r1, r3
 8000fe4:	4b0c      	ldr	r3, [pc, #48]	; (8001018 <Master_Read_Modbus+0xe4>)
 8000fe6:	5499      	strb	r1, [r3, r2]
    BUFF_DATA_485[Count++] = (uint8_t) (crc>>8) & 0xFF;
 8000fe8:	897b      	ldrh	r3, [r7, #10]
 8000fea:	0a1b      	lsrs	r3, r3, #8
 8000fec:	b299      	uxth	r1, r3
 8000fee:	89bb      	ldrh	r3, [r7, #12]
 8000ff0:	1c5a      	adds	r2, r3, #1
 8000ff2:	81ba      	strh	r2, [r7, #12]
 8000ff4:	461a      	mov	r2, r3
 8000ff6:	b2c9      	uxtb	r1, r1
 8000ff8:	4b07      	ldr	r3, [pc, #28]	; (8001018 <Master_Read_Modbus+0xe4>)
 8000ffa:	5499      	strb	r1, [r3, r2]

    // Chon chan DE sang send
    //RS485_Direct_on();
    // Send
    Result = HAL_UART_Transmit(&huart1, &BUFF_DATA_485[0], Count, 1000);
 8000ffc:	89ba      	ldrh	r2, [r7, #12]
 8000ffe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001002:	4905      	ldr	r1, [pc, #20]	; (8001018 <Master_Read_Modbus+0xe4>)
 8001004:	4805      	ldr	r0, [pc, #20]	; (800101c <Master_Read_Modbus+0xe8>)
 8001006:	f004 fa97 	bl	8005538 <HAL_UART_Transmit>
 800100a:	4603      	mov	r3, r0
 800100c:	73fb      	strb	r3, [r7, #15]
    //Dua DE ve Receive
   // RS485_Direct_off();

    return Result;
 800100e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001010:	4618      	mov	r0, r3
 8001012:	3714      	adds	r7, #20
 8001014:	46bd      	mov	sp, r7
 8001016:	bd90      	pop	{r4, r7, pc}
 8001018:	20000600 	.word	0x20000600
 800101c:	20000a7c 	.word	0x20000a7c

08001020 <parseFUNC3_4>:
#include "my_lib.h"



// parser function code 3 and 4
void parseFUNC3_4(uint8_t *rxBuf, uint8_t *datalen, uint8_t *dataField){
 8001020:	b480      	push	{r7}
 8001022:	b087      	sub	sp, #28
 8001024:	af00      	add	r7, sp, #0
 8001026:	60f8      	str	r0, [r7, #12]
 8001028:	60b9      	str	r1, [r7, #8]
 800102a:	607a      	str	r2, [r7, #4]
	*datalen = rxBuf[RX_DATALEN_34_INDEX];
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	789a      	ldrb	r2, [r3, #2]
 8001030:	68bb      	ldr	r3, [r7, #8]
 8001032:	701a      	strb	r2, [r3, #0]
	for(uint8_t loop = 0; loop < *datalen; loop ++){
 8001034:	2300      	movs	r3, #0
 8001036:	75fb      	strb	r3, [r7, #23]
 8001038:	e00b      	b.n	8001052 <parseFUNC3_4+0x32>
		dataField[loop] = rxBuf[loop + RX_DATAFIELD_34_INDEX];
 800103a:	7dfb      	ldrb	r3, [r7, #23]
 800103c:	3303      	adds	r3, #3
 800103e:	68fa      	ldr	r2, [r7, #12]
 8001040:	441a      	add	r2, r3
 8001042:	7dfb      	ldrb	r3, [r7, #23]
 8001044:	6879      	ldr	r1, [r7, #4]
 8001046:	440b      	add	r3, r1
 8001048:	7812      	ldrb	r2, [r2, #0]
 800104a:	701a      	strb	r2, [r3, #0]
	for(uint8_t loop = 0; loop < *datalen; loop ++){
 800104c:	7dfb      	ldrb	r3, [r7, #23]
 800104e:	3301      	adds	r3, #1
 8001050:	75fb      	strb	r3, [r7, #23]
 8001052:	68bb      	ldr	r3, [r7, #8]
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	7dfa      	ldrb	r2, [r7, #23]
 8001058:	429a      	cmp	r2, r3
 800105a:	d3ee      	bcc.n	800103a <parseFUNC3_4+0x1a>
	}
}
 800105c:	bf00      	nop
 800105e:	371c      	adds	r7, #28
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr

08001068 <parseFUNC6_16>:

// parser function code 6 and 16
void parseFUNC6_16(uint8_t *rxBuf, uint8_t *datalen, uint8_t *dataField){
 8001068:	b480      	push	{r7}
 800106a:	b087      	sub	sp, #28
 800106c:	af00      	add	r7, sp, #0
 800106e:	60f8      	str	r0, [r7, #12]
 8001070:	60b9      	str	r1, [r7, #8]
 8001072:	607a      	str	r2, [r7, #4]
	for(uint8_t loop = 0; loop < *datalen; loop ++){
 8001074:	2300      	movs	r3, #0
 8001076:	75fb      	strb	r3, [r7, #23]
 8001078:	e00b      	b.n	8001092 <parseFUNC6_16+0x2a>
		dataField[loop] = rxBuf[loop + RX_DATAFIELD_616_INDEX];
 800107a:	7dfb      	ldrb	r3, [r7, #23]
 800107c:	3302      	adds	r3, #2
 800107e:	68fa      	ldr	r2, [r7, #12]
 8001080:	441a      	add	r2, r3
 8001082:	7dfb      	ldrb	r3, [r7, #23]
 8001084:	6879      	ldr	r1, [r7, #4]
 8001086:	440b      	add	r3, r1
 8001088:	7812      	ldrb	r2, [r2, #0]
 800108a:	701a      	strb	r2, [r3, #0]
	for(uint8_t loop = 0; loop < *datalen; loop ++){
 800108c:	7dfb      	ldrb	r3, [r7, #23]
 800108e:	3301      	adds	r3, #1
 8001090:	75fb      	strb	r3, [r7, #23]
 8001092:	68bb      	ldr	r3, [r7, #8]
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	7dfa      	ldrb	r2, [r7, #23]
 8001098:	429a      	cmp	r2, r3
 800109a:	d3ee      	bcc.n	800107a <parseFUNC6_16+0x12>
	}
}
 800109c:	bf00      	nop
 800109e:	371c      	adds	r7, #28
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr

080010a8 <parserModbusRx>:

uint8_t func_code;
// 0F 03 04 3C BB 08 2F 2F 9A modbus address, function code, number of byte data, data, CRC day la 3/4
uint8_t parserModbusRx(uint8_t address_slave, uint8_t *rxBuf, uint8_t lenrx, uint8_t *datalen, uint8_t *dataField){
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b086      	sub	sp, #24
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	60b9      	str	r1, [r7, #8]
 80010b0:	607b      	str	r3, [r7, #4]
 80010b2:	4603      	mov	r3, r0
 80010b4:	73fb      	strb	r3, [r7, #15]
 80010b6:	4613      	mov	r3, r2
 80010b8:	73bb      	strb	r3, [r7, #14]
	uint16_t crc;
	uint16_t crc_frame;
	// check address slave
	if(address_slave != rxBuf[RX_ADDRESS_SL_INDEX]){
 80010ba:	68bb      	ldr	r3, [r7, #8]
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	7bfa      	ldrb	r2, [r7, #15]
 80010c0:	429a      	cmp	r2, r3
 80010c2:	d001      	beq.n	80010c8 <parserModbusRx+0x20>
		//my_printf("[parseFrame] error modbus address\r\n");
		return FALSE;
 80010c4:	2300      	movs	r3, #0
 80010c6:	e056      	b.n	8001176 <parserModbusRx+0xce>
	}
	// check CRC
	crc = ModRTU_CRC(rxBuf, lenrx-2);
 80010c8:	7bbb      	ldrb	r3, [r7, #14]
 80010ca:	3b02      	subs	r3, #2
 80010cc:	4619      	mov	r1, r3
 80010ce:	68b8      	ldr	r0, [r7, #8]
 80010d0:	f7ff fef2 	bl	8000eb8 <ModRTU_CRC>
 80010d4:	4603      	mov	r3, r0
 80010d6:	82fb      	strh	r3, [r7, #22]
	crc_frame = rxBuf[lenrx-1]<<8 | rxBuf[lenrx-2]; //little big endian
 80010d8:	7bbb      	ldrb	r3, [r7, #14]
 80010da:	3b01      	subs	r3, #1
 80010dc:	68ba      	ldr	r2, [r7, #8]
 80010de:	4413      	add	r3, r2
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	021b      	lsls	r3, r3, #8
 80010e4:	b21a      	sxth	r2, r3
 80010e6:	7bbb      	ldrb	r3, [r7, #14]
 80010e8:	3b02      	subs	r3, #2
 80010ea:	68b9      	ldr	r1, [r7, #8]
 80010ec:	440b      	add	r3, r1
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	b21b      	sxth	r3, r3
 80010f2:	4313      	orrs	r3, r2
 80010f4:	b21b      	sxth	r3, r3
 80010f6:	82bb      	strh	r3, [r7, #20]
	if(crc != crc_frame){
 80010f8:	8afa      	ldrh	r2, [r7, #22]
 80010fa:	8abb      	ldrh	r3, [r7, #20]
 80010fc:	429a      	cmp	r2, r3
 80010fe:	d001      	beq.n	8001104 <parserModbusRx+0x5c>
		//my_printf("[parseFrame] error CRC\r\n");
		return FALSE;
 8001100:	2300      	movs	r3, #0
 8001102:	e038      	b.n	8001176 <parserModbusRx+0xce>
	}
	func_code = rxBuf[RX_FUNCODE_INDEX];
 8001104:	68bb      	ldr	r3, [r7, #8]
 8001106:	785a      	ldrb	r2, [r3, #1]
 8001108:	4b1d      	ldr	r3, [pc, #116]	; (8001180 <parserModbusRx+0xd8>)
 800110a:	701a      	strb	r2, [r3, #0]
	switch (func_code){
 800110c:	4b1c      	ldr	r3, [pc, #112]	; (8001180 <parserModbusRx+0xd8>)
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	3b03      	subs	r3, #3
 8001112:	2b0d      	cmp	r3, #13
 8001114:	d82d      	bhi.n	8001172 <parserModbusRx+0xca>
 8001116:	a201      	add	r2, pc, #4	; (adr r2, 800111c <parserModbusRx+0x74>)
 8001118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800111c:	08001155 	.word	0x08001155
 8001120:	08001155 	.word	0x08001155
 8001124:	08001173 	.word	0x08001173
 8001128:	08001161 	.word	0x08001161
 800112c:	08001173 	.word	0x08001173
 8001130:	08001173 	.word	0x08001173
 8001134:	08001173 	.word	0x08001173
 8001138:	08001173 	.word	0x08001173
 800113c:	08001173 	.word	0x08001173
 8001140:	08001173 	.word	0x08001173
 8001144:	08001173 	.word	0x08001173
 8001148:	08001173 	.word	0x08001173
 800114c:	08001173 	.word	0x08001173
 8001150:	08001161 	.word	0x08001161
		case 0x03:
		case 0x04:
			parseFUNC3_4(rxBuf, datalen, dataField);
 8001154:	6a3a      	ldr	r2, [r7, #32]
 8001156:	6879      	ldr	r1, [r7, #4]
 8001158:	68b8      	ldr	r0, [r7, #8]
 800115a:	f7ff ff61 	bl	8001020 <parseFUNC3_4>
			break;
 800115e:	e009      	b.n	8001174 <parserModbusRx+0xcc>
		case 0x06:
		case 0x10:
			*datalen = RX_DATALEN_FC6_16;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2204      	movs	r2, #4
 8001164:	701a      	strb	r2, [r3, #0]
			parseFUNC6_16(rxBuf, datalen, dataField);
 8001166:	6a3a      	ldr	r2, [r7, #32]
 8001168:	6879      	ldr	r1, [r7, #4]
 800116a:	68b8      	ldr	r0, [r7, #8]
 800116c:	f7ff ff7c 	bl	8001068 <parseFUNC6_16>
			break;
 8001170:	e000      	b.n	8001174 <parserModbusRx+0xcc>
		default:
			//my_printf("error frame");
			break;
 8001172:	bf00      	nop
	}
	return TRUE;
 8001174:	2301      	movs	r3, #1
}
 8001176:	4618      	mov	r0, r3
 8001178:	3718      	adds	r7, #24
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	20000700 	.word	0x20000700

08001184 <Sim_PWON>:
						  {CMD_CREATE_TCP, 				{(uint8_t*)"AT+CIPOPEN=1,\"TCP\",\"113.190.240.47\",7589\r\n",42},				fnCheckCreateTCPPacket},
						  {CHECK_CMD_CIPOPQUERY, 		{(uint8_t*)"AT+CIPOPQUERY=1\r\n",17},											fnParseCIPOPQUERYPacket},
						  {CMD_SEND_DATA, 				{(uint8_t*)"AT+CIPSEND=1,", 13},												fnParseSendSVPacket}};


void Sim_PWON(){
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8001188:	2201      	movs	r2, #1
 800118a:	2101      	movs	r1, #1
 800118c:	4802      	ldr	r0, [pc, #8]	; (8001198 <Sim_PWON+0x14>)
 800118e:	f001 fe83 	bl	8002e98 <HAL_GPIO_WritePin>
}
 8001192:	bf00      	nop
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	48000400 	.word	0x48000400

0800119c <Sim_PWOFF>:

void Sim_PWOFF(){
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80011a0:	2200      	movs	r2, #0
 80011a2:	2101      	movs	r1, #1
 80011a4:	4802      	ldr	r0, [pc, #8]	; (80011b0 <Sim_PWOFF+0x14>)
 80011a6:	f001 fe77 	bl	8002e98 <HAL_GPIO_WritePin>
}
 80011aa:	bf00      	nop
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	48000400 	.word	0x48000400

080011b4 <Pow_ON_OFF>:

void Pow_ON_OFF(){
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 80011b8:	2200      	movs	r2, #0
 80011ba:	2108      	movs	r1, #8
 80011bc:	4808      	ldr	r0, [pc, #32]	; (80011e0 <Pow_ON_OFF+0x2c>)
 80011be:	f001 fe6b 	bl	8002e98 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 80011c2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011c6:	f001 fb79 	bl	80028bc <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 80011ca:	2201      	movs	r2, #1
 80011cc:	2108      	movs	r1, #8
 80011ce:	4804      	ldr	r0, [pc, #16]	; (80011e0 <Pow_ON_OFF+0x2c>)
 80011d0:	f001 fe62 	bl	8002e98 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 80011d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011d8:	f001 fb70 	bl	80028bc <HAL_Delay>
}
 80011dc:	bf00      	nop
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	48000400 	.word	0x48000400

080011e4 <getBuffRx>:

void getBuffRx(bool needWaitAtFirstTime) {
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	4603      	mov	r3, r0
 80011ec:	71fb      	strb	r3, [r7, #7]
	if(needWaitAtFirstTime) {
 80011ee:	79fb      	ldrb	r3, [r7, #7]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d018      	beq.n	8001226 <getBuffRx+0x42>
		while(!IsDataAvailable());
 80011f4:	bf00      	nop
 80011f6:	f000 fc67 	bl	8001ac8 <IsDataAvailable>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d0fa      	beq.n	80011f6 <getBuffRx+0x12>
	}
	while(IsDataAvailable()){
 8001200:	e011      	b.n	8001226 <getBuffRx+0x42>
		buffer[indexBuffer] = Uart_read();
 8001202:	f000 fc01 	bl	8001a08 <Uart_read>
 8001206:	4601      	mov	r1, r0
 8001208:	4b0b      	ldr	r3, [pc, #44]	; (8001238 <getBuffRx+0x54>)
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	461a      	mov	r2, r3
 800120e:	b2c9      	uxtb	r1, r1
 8001210:	4b0a      	ldr	r3, [pc, #40]	; (800123c <getBuffRx+0x58>)
 8001212:	5499      	strb	r1, [r3, r2]
		indexBuffer ++;
 8001214:	4b08      	ldr	r3, [pc, #32]	; (8001238 <getBuffRx+0x54>)
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	3301      	adds	r3, #1
 800121a:	b2da      	uxtb	r2, r3
 800121c:	4b06      	ldr	r3, [pc, #24]	; (8001238 <getBuffRx+0x54>)
 800121e:	701a      	strb	r2, [r3, #0]
		HAL_Delay(1);
 8001220:	2001      	movs	r0, #1
 8001222:	f001 fb4b 	bl	80028bc <HAL_Delay>
	while(IsDataAvailable()){
 8001226:	f000 fc4f 	bl	8001ac8 <IsDataAvailable>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d1e8      	bne.n	8001202 <getBuffRx+0x1e>
	}
	// xử lý THA
}
 8001230:	bf00      	nop
 8001232:	3708      	adds	r7, #8
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	200004e9 	.word	0x200004e9
 800123c:	20000704 	.word	0x20000704

08001240 <GSM_Init>:
void GSM_Init(){
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
	  Pow_ON_OFF();;
 8001244:	f7ff ffb6 	bl	80011b4 <Pow_ON_OFF>
	  Sim_PWON();
 8001248:	f7ff ff9c 	bl	8001184 <Sim_PWON>
	  HAL_Delay(2000);
 800124c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001250:	f001 fb34 	bl	80028bc <HAL_Delay>
	  Sim_PWOFF();
 8001254:	f7ff ffa2 	bl	800119c <Sim_PWOFF>
	  HAL_Delay(25000);
 8001258:	f246 10a8 	movw	r0, #25000	; 0x61a8
 800125c:	f001 fb2e 	bl	80028bc <HAL_Delay>
	  indexBuffer = 0;
 8001260:	4b06      	ldr	r3, [pc, #24]	; (800127c <GSM_Init+0x3c>)
 8001262:	2200      	movs	r2, #0
 8001264:	701a      	strb	r2, [r3, #0]
	  memset(buffer, '\0', 256);
 8001266:	f44f 7280 	mov.w	r2, #256	; 0x100
 800126a:	2100      	movs	r1, #0
 800126c:	4804      	ldr	r0, [pc, #16]	; (8001280 <GSM_Init+0x40>)
 800126e:	f005 f917 	bl	80064a0 <memset>
	  getBuffRx(true);
 8001272:	2001      	movs	r0, #1
 8001274:	f7ff ffb6 	bl	80011e4 <getBuffRx>
//	  HAL_UART_Transmit(&huart1, buffer, strlen((char*)buffer), 1000);
}
 8001278:	bf00      	nop
 800127a:	bd80      	pop	{r7, pc}
 800127c:	200004e9 	.word	0x200004e9
 8001280:	20000704 	.word	0x20000704

08001284 <fnParseOKPacket>:

uint8_t fnParseOKPacket(char* arrRes) { 	//kiem tra Sim
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
	if(memcmp((const char*)arrRes, (const char*)"\r\nOK", 4) == 0){
 800128c:	2204      	movs	r2, #4
 800128e:	4907      	ldr	r1, [pc, #28]	; (80012ac <fnParseOKPacket+0x28>)
 8001290:	6878      	ldr	r0, [r7, #4]
 8001292:	f005 f8eb 	bl	800646c <memcmp>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d101      	bne.n	80012a0 <fnParseOKPacket+0x1c>
		return 1;
 800129c:	2301      	movs	r3, #1
 800129e:	e000      	b.n	80012a2 <fnParseOKPacket+0x1e>
	}
    return 0;
 80012a0:	2300      	movs	r3, #0
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3708      	adds	r7, #8
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	080086f8 	.word	0x080086f8

080012b0 <fnParseCPINPacket>:

uint8_t fnParseCPINPacket(char* arrRes) {	// kiem tra trang thai cua Sim
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  if (memcmp(arrRes, "\r\n+CPIN: READY", 14) == 0) {
 80012b8:	220e      	movs	r2, #14
 80012ba:	4907      	ldr	r1, [pc, #28]	; (80012d8 <fnParseCPINPacket+0x28>)
 80012bc:	6878      	ldr	r0, [r7, #4]
 80012be:	f005 f8d5 	bl	800646c <memcmp>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d101      	bne.n	80012cc <fnParseCPINPacket+0x1c>
    return 1;
 80012c8:	2301      	movs	r3, #1
 80012ca:	e000      	b.n	80012ce <fnParseCPINPacket+0x1e>
  }
  return 0;
 80012cc:	2300      	movs	r3, #0
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	08008700 	.word	0x08008700

080012dc <fnParseCSQPacket>:

uint8_t fnParseCSQPacket(char* arrRes) {	// kiem tra cuong do song
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  if (memcmp(arrRes, "\r\n+CSQ:", 7) == 0) {
 80012e4:	2207      	movs	r2, #7
 80012e6:	4907      	ldr	r1, [pc, #28]	; (8001304 <fnParseCSQPacket+0x28>)
 80012e8:	6878      	ldr	r0, [r7, #4]
 80012ea:	f005 f8bf 	bl	800646c <memcmp>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d101      	bne.n	80012f8 <fnParseCSQPacket+0x1c>
    return 1;
 80012f4:	2301      	movs	r3, #1
 80012f6:	e000      	b.n	80012fa <fnParseCSQPacket+0x1e>
  }
  return 0;
 80012f8:	2300      	movs	r3, #0
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	3708      	adds	r7, #8
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	08008710 	.word	0x08008710

08001308 <fnParseCGREGPacket>:

uint8_t fnParseCGREGPacket(char* arrRes) {	// dang ki mạng
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  if (memcmp(arrRes, "\r\n+CGREG:", 9) == 0) {
 8001310:	2209      	movs	r2, #9
 8001312:	4907      	ldr	r1, [pc, #28]	; (8001330 <fnParseCGREGPacket+0x28>)
 8001314:	6878      	ldr	r0, [r7, #4]
 8001316:	f005 f8a9 	bl	800646c <memcmp>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d101      	bne.n	8001324 <fnParseCGREGPacket+0x1c>
    return 1;
 8001320:	2301      	movs	r3, #1
 8001322:	e000      	b.n	8001326 <fnParseCGREGPacket+0x1e>
  }
  return 0;
 8001324:	2300      	movs	r3, #0
}
 8001326:	4618      	mov	r0, r3
 8001328:	3708      	adds	r7, #8
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	08008718 	.word	0x08008718

08001334 <fnParseCREGPacket>:

uint8_t fnParseCREGPacket(char* arrRes) {	// dang ki mang
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  if (memcmp(arrRes, "\r\n+CREG:", 8) == 0) {
 800133c:	2208      	movs	r2, #8
 800133e:	4907      	ldr	r1, [pc, #28]	; (800135c <fnParseCREGPacket+0x28>)
 8001340:	6878      	ldr	r0, [r7, #4]
 8001342:	f005 f893 	bl	800646c <memcmp>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d101      	bne.n	8001350 <fnParseCREGPacket+0x1c>
    return 1;
 800134c:	2301      	movs	r3, #1
 800134e:	e000      	b.n	8001352 <fnParseCREGPacket+0x1e>
  }
  return 0;
 8001350:	2300      	movs	r3, #0
}
 8001352:	4618      	mov	r0, r3
 8001354:	3708      	adds	r7, #8
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	08008724 	.word	0x08008724

08001360 <fnParseCGATTPacket>:

uint8_t fnParseCGATTPacket(char* arrRes) { // kiem tra trang thai GPRS
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  if (memcmp(arrRes, "\r\n+CGATT:", 9) == 0) {
 8001368:	2209      	movs	r2, #9
 800136a:	4907      	ldr	r1, [pc, #28]	; (8001388 <fnParseCGATTPacket+0x28>)
 800136c:	6878      	ldr	r0, [r7, #4]
 800136e:	f005 f87d 	bl	800646c <memcmp>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d101      	bne.n	800137c <fnParseCGATTPacket+0x1c>
    return 1;
 8001378:	2301      	movs	r3, #1
 800137a:	e000      	b.n	800137e <fnParseCGATTPacket+0x1e>
  }
  return 0;
 800137c:	2300      	movs	r3, #0
}
 800137e:	4618      	mov	r0, r3
 8001380:	3708      	adds	r7, #8
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	08008730 	.word	0x08008730

0800138c <fnParseNETOPENPacket>:

uint8_t fnParseNETOPENPacket(char* arrRes) {
 800138c:	b580      	push	{r7, lr}
 800138e:	b084      	sub	sp, #16
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
	char *ptr;
	ptr = strstr(arrRes, "NETOPEN:SUCCESS");
 8001394:	4907      	ldr	r1, [pc, #28]	; (80013b4 <fnParseNETOPENPacket+0x28>)
 8001396:	6878      	ldr	r0, [r7, #4]
 8001398:	f005 fd1d 	bl	8006dd6 <strstr>
 800139c:	60f8      	str	r0, [r7, #12]
	if(ptr != 0){
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <fnParseNETOPENPacket+0x1c>
		return 1;
 80013a4:	2301      	movs	r3, #1
 80013a6:	e000      	b.n	80013aa <fnParseNETOPENPacket+0x1e>
	}
	return 0;
 80013a8:	2300      	movs	r3, #0
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	3710      	adds	r7, #16
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	0800873c 	.word	0x0800873c

080013b8 <fnParseIPADDRPacket>:

uint8_t fnParseIPADDRPacket(char* arrRes) {	// nhan dia chi IP
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b084      	sub	sp, #16
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
	char *ptr;
	ptr = strstr(arrRes, "IPADDR:SUCCESS");
 80013c0:	4907      	ldr	r1, [pc, #28]	; (80013e0 <fnParseIPADDRPacket+0x28>)
 80013c2:	6878      	ldr	r0, [r7, #4]
 80013c4:	f005 fd07 	bl	8006dd6 <strstr>
 80013c8:	60f8      	str	r0, [r7, #12]
	if(ptr != 0){
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <fnParseIPADDRPacket+0x1c>
		return 1;
 80013d0:	2301      	movs	r3, #1
 80013d2:	e000      	b.n	80013d6 <fnParseIPADDRPacket+0x1e>
	}
	return 0;
 80013d4:	2300      	movs	r3, #0
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	3710      	adds	r7, #16
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	0800874c 	.word	0x0800874c

080013e4 <fnCheckCreateTCPPacket>:

uint8_t fnCheckCreateTCPPacket(char * arrRes) {
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b084      	sub	sp, #16
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
	char *ptr;
	ptr = strstr(arrRes, "CIPOPEN:SUCCESS");
 80013ec:	4907      	ldr	r1, [pc, #28]	; (800140c <fnCheckCreateTCPPacket+0x28>)
 80013ee:	6878      	ldr	r0, [r7, #4]
 80013f0:	f005 fcf1 	bl	8006dd6 <strstr>
 80013f4:	60f8      	str	r0, [r7, #12]
	if(ptr != 0){
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d001      	beq.n	8001400 <fnCheckCreateTCPPacket+0x1c>
		return 1;
 80013fc:	2301      	movs	r3, #1
 80013fe:	e000      	b.n	8001402 <fnCheckCreateTCPPacket+0x1e>
	}
	return 0;
 8001400:	2300      	movs	r3, #0
}
 8001402:	4618      	mov	r0, r3
 8001404:	3710      	adds	r7, #16
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	0800875c 	.word	0x0800875c

08001410 <fnParseCIPOPQUERYPacket>:

uint8_t fnParseCIPOPQUERYPacket(char* arrRes) {	// quet link ket noi
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  if (memcmp(arrRes, "\r\n+CIPOPQUERY:0", 15) == 0) {
 8001418:	220f      	movs	r2, #15
 800141a:	4907      	ldr	r1, [pc, #28]	; (8001438 <fnParseCIPOPQUERYPacket+0x28>)
 800141c:	6878      	ldr	r0, [r7, #4]
 800141e:	f005 f825 	bl	800646c <memcmp>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d101      	bne.n	800142c <fnParseCIPOPQUERYPacket+0x1c>
    return 0;
 8001428:	2300      	movs	r3, #0
 800142a:	e000      	b.n	800142e <fnParseCIPOPQUERYPacket+0x1e>
  }
  return 1;
 800142c:	2301      	movs	r3, #1
}
 800142e:	4618      	mov	r0, r3
 8001430:	3708      	adds	r7, #8
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	0800876c 	.word	0x0800876c

0800143c <fnParseSendSVPacket>:

uint8_t fnParseSendSVPacket(char* arrRes) {	// kiem tra phan hoi gui
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  if (memcmp(arrRes, "\r\n>", 3) == 0) {
 8001444:	2203      	movs	r2, #3
 8001446:	4907      	ldr	r1, [pc, #28]	; (8001464 <fnParseSendSVPacket+0x28>)
 8001448:	6878      	ldr	r0, [r7, #4]
 800144a:	f005 f80f 	bl	800646c <memcmp>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d101      	bne.n	8001458 <fnParseSendSVPacket+0x1c>
    return 1;
 8001454:	2301      	movs	r3, #1
 8001456:	e000      	b.n	800145a <fnParseSendSVPacket+0x1e>
  }
  return 0;
 8001458:	2300      	movs	r3, #0
}
 800145a:	4618      	mov	r0, r3
 800145c:	3708      	adds	r7, #8
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	0800877c 	.word	0x0800877c

08001468 <fnCheckSendSVPacket>:

uint8_t fnCheckSendSVPacket(char* arrRes) {
 8001468:	b580      	push	{r7, lr}
 800146a:	b084      	sub	sp, #16
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
	char *ptr;
	ptr = strstr(arrRes, "CIPSEND:SUCCESS");
 8001470:	4907      	ldr	r1, [pc, #28]	; (8001490 <fnCheckSendSVPacket+0x28>)
 8001472:	6878      	ldr	r0, [r7, #4]
 8001474:	f005 fcaf 	bl	8006dd6 <strstr>
 8001478:	60f8      	str	r0, [r7, #12]
	if(ptr != 0){
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d001      	beq.n	8001484 <fnCheckSendSVPacket+0x1c>
		return 1;
 8001480:	2301      	movs	r3, #1
 8001482:	e000      	b.n	8001486 <fnCheckSendSVPacket+0x1e>
	}
	return 0;
 8001484:	2300      	movs	r3, #0
}
 8001486:	4618      	mov	r0, r3
 8001488:	3710      	adds	r7, #16
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	08008780 	.word	0x08008780

08001494 <fnCheckPacket>:
		return 1;
	}
	return 0;
}

uint8_t fnCheckPacket(uint8_t* packet, uint16_t len, fncProcess fnParse, uint16_t delayWaitRxMs) { // ham gui du lieu co kiem tra phan hoi
 8001494:	b580      	push	{r7, lr}
 8001496:	b086      	sub	sp, #24
 8001498:	af00      	add	r7, sp, #0
 800149a:	60f8      	str	r0, [r7, #12]
 800149c:	607a      	str	r2, [r7, #4]
 800149e:	461a      	mov	r2, r3
 80014a0:	460b      	mov	r3, r1
 80014a2:	817b      	strh	r3, [r7, #10]
 80014a4:	4613      	mov	r3, r2
 80014a6:	813b      	strh	r3, [r7, #8]
	 uint16_t countTimeout = 0;
 80014a8:	2300      	movs	r3, #0
 80014aa:	82fb      	strh	r3, [r7, #22]
	 indexBuffer = 0;
 80014ac:	4b1b      	ldr	r3, [pc, #108]	; (800151c <fnCheckPacket+0x88>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	701a      	strb	r2, [r3, #0]
	 bool isFirstCall = true;
 80014b2:	2301      	movs	r3, #1
 80014b4:	757b      	strb	r3, [r7, #21]
	 memset(buffer, '\0', 256);
 80014b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014ba:	2100      	movs	r1, #0
 80014bc:	4818      	ldr	r0, [pc, #96]	; (8001520 <fnCheckPacket+0x8c>)
 80014be:	f004 ffef 	bl	80064a0 <memset>
//	 HAL_UART_Transmit(&huart3, packet, len, 1000);
	 Uart_sendArray ((char*)packet,(int)len);// Send dữ liệu
 80014c2:	897b      	ldrh	r3, [r7, #10]
 80014c4:	4619      	mov	r1, r3
 80014c6:	68f8      	ldr	r0, [r7, #12]
 80014c8:	f000 fb14 	bl	8001af4 <Uart_sendArray>
//	 HAL_UART_Transmit(&huart1, packet, len, 1000);

//	 HAL_Delay(200);
	 answer = 0;
 80014cc:	4b15      	ldr	r3, [pc, #84]	; (8001524 <fnCheckPacket+0x90>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	701a      	strb	r2, [r3, #0]
	 while(countTimeout++ <= delayWaitRxMs && answer == 0) {
 80014d2:	e012      	b.n	80014fa <fnCheckPacket+0x66>
		 getBuffRx(isFirstCall);
 80014d4:	7d7b      	ldrb	r3, [r7, #21]
 80014d6:	4618      	mov	r0, r3
 80014d8:	f7ff fe84 	bl	80011e4 <getBuffRx>
		 isFirstCall = false;
 80014dc:	2300      	movs	r3, #0
 80014de:	757b      	strb	r3, [r7, #21]
		 if (fnParse) {
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d006      	beq.n	80014f4 <fnCheckPacket+0x60>
			answer = fnParse(buffer);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	480d      	ldr	r0, [pc, #52]	; (8001520 <fnCheckPacket+0x8c>)
 80014ea:	4798      	blx	r3
 80014ec:	4603      	mov	r3, r0
 80014ee:	461a      	mov	r2, r3
 80014f0:	4b0c      	ldr	r3, [pc, #48]	; (8001524 <fnCheckPacket+0x90>)
 80014f2:	701a      	strb	r2, [r3, #0]
		   }
		 HAL_Delay(1);
 80014f4:	2001      	movs	r0, #1
 80014f6:	f001 f9e1 	bl	80028bc <HAL_Delay>
	 while(countTimeout++ <= delayWaitRxMs && answer == 0) {
 80014fa:	8afb      	ldrh	r3, [r7, #22]
 80014fc:	1c5a      	adds	r2, r3, #1
 80014fe:	82fa      	strh	r2, [r7, #22]
 8001500:	893a      	ldrh	r2, [r7, #8]
 8001502:	429a      	cmp	r2, r3
 8001504:	d303      	bcc.n	800150e <fnCheckPacket+0x7a>
 8001506:	4b07      	ldr	r3, [pc, #28]	; (8001524 <fnCheckPacket+0x90>)
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d0e2      	beq.n	80014d4 <fnCheckPacket+0x40>
	 }
//	HAL_UART_Transmit(&huart1, buffer, strlen((char*)buffer), 1000);
	return answer;
 800150e:	4b05      	ldr	r3, [pc, #20]	; (8001524 <fnCheckPacket+0x90>)
 8001510:	781b      	ldrb	r3, [r3, #0]
}
 8001512:	4618      	mov	r0, r3
 8001514:	3718      	adds	r7, #24
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	200004e9 	.word	0x200004e9
 8001520:	20000704 	.word	0x20000704
 8001524:	20000804 	.word	0x20000804

08001528 <fncSend_CommandAT>:


void fncSend_CommandAT(uint8_t curr_cmd, uint8_t next_cmd){
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
 800152e:	4603      	mov	r3, r0
 8001530:	460a      	mov	r2, r1
 8001532:	71fb      	strb	r3, [r7, #7]
 8001534:	4613      	mov	r3, r2
 8001536:	71bb      	strb	r3, [r7, #6]
		result = fnCheckPacket(arrInitialSim[curr_cmd].strSend.packetAt, arrInitialSim[curr_cmd].strSend.length, arrInitialSim[curr_cmd].fncType, 1000);
 8001538:	79fb      	ldrb	r3, [r7, #7]
 800153a:	4a18      	ldr	r2, [pc, #96]	; (800159c <fncSend_CommandAT+0x74>)
 800153c:	011b      	lsls	r3, r3, #4
 800153e:	4413      	add	r3, r2
 8001540:	3304      	adds	r3, #4
 8001542:	6818      	ldr	r0, [r3, #0]
 8001544:	79fb      	ldrb	r3, [r7, #7]
 8001546:	4a15      	ldr	r2, [pc, #84]	; (800159c <fncSend_CommandAT+0x74>)
 8001548:	011b      	lsls	r3, r3, #4
 800154a:	4413      	add	r3, r2
 800154c:	3308      	adds	r3, #8
 800154e:	8819      	ldrh	r1, [r3, #0]
 8001550:	79fb      	ldrb	r3, [r7, #7]
 8001552:	4a12      	ldr	r2, [pc, #72]	; (800159c <fncSend_CommandAT+0x74>)
 8001554:	011b      	lsls	r3, r3, #4
 8001556:	4413      	add	r3, r2
 8001558:	330c      	adds	r3, #12
 800155a:	681a      	ldr	r2, [r3, #0]
 800155c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001560:	f7ff ff98 	bl	8001494 <fnCheckPacket>
 8001564:	4603      	mov	r3, r0
 8001566:	461a      	mov	r2, r3
 8001568:	4b0d      	ldr	r3, [pc, #52]	; (80015a0 <fncSend_CommandAT+0x78>)
 800156a:	701a      	strb	r2, [r3, #0]
		if(result != 0){
 800156c:	4b0c      	ldr	r3, [pc, #48]	; (80015a0 <fncSend_CommandAT+0x78>)
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d004      	beq.n	800157e <fncSend_CommandAT+0x56>
			gsm_state = next_cmd;
 8001574:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8001578:	4b0a      	ldr	r3, [pc, #40]	; (80015a4 <fncSend_CommandAT+0x7c>)
 800157a:	701a      	strb	r2, [r3, #0]
			}
			else {
				wait_to_reinitial(10);
			}
		}
}
 800157c:	e009      	b.n	8001592 <fncSend_CommandAT+0x6a>
			if(CHECK_CMD_CIPOPQUERY == curr_cmd){
 800157e:	79fb      	ldrb	r3, [r7, #7]
 8001580:	2b0b      	cmp	r3, #11
 8001582:	d103      	bne.n	800158c <fncSend_CommandAT+0x64>
				wait_to_reinitialTCP(10);
 8001584:	200a      	movs	r0, #10
 8001586:	f000 f96f 	bl	8001868 <wait_to_reinitialTCP>
}
 800158a:	e002      	b.n	8001592 <fncSend_CommandAT+0x6a>
				wait_to_reinitial(10);
 800158c:	200a      	movs	r0, #10
 800158e:	f000 f94b 	bl	8001828 <wait_to_reinitial>
}
 8001592:	bf00      	nop
 8001594:	3708      	adds	r7, #8
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	20000004 	.word	0x20000004
 80015a0:	200005fd 	.word	0x200005fd
 80015a4:	20000000 	.word	0x20000000

080015a8 <Sim_work>:

void Sim_work(void){
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
  switch (gsm_state){
 80015ac:	4b33      	ldr	r3, [pc, #204]	; (800167c <Sim_work+0xd4>)
 80015ae:	f993 3000 	ldrsb.w	r3, [r3]
 80015b2:	3301      	adds	r3, #1
 80015b4:	2b0c      	cmp	r3, #12
 80015b6:	d85f      	bhi.n	8001678 <Sim_work+0xd0>
 80015b8:	a201      	add	r2, pc, #4	; (adr r2, 80015c0 <Sim_work+0x18>)
 80015ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015be:	bf00      	nop
 80015c0:	080015f5 	.word	0x080015f5
 80015c4:	08001601 	.word	0x08001601
 80015c8:	0800160b 	.word	0x0800160b
 80015cc:	08001615 	.word	0x08001615
 80015d0:	0800161f 	.word	0x0800161f
 80015d4:	08001629 	.word	0x08001629
 80015d8:	08001633 	.word	0x08001633
 80015dc:	0800163d 	.word	0x0800163d
 80015e0:	08001647 	.word	0x08001647
 80015e4:	08001651 	.word	0x08001651
 80015e8:	0800165b 	.word	0x0800165b
 80015ec:	08001665 	.word	0x08001665
 80015f0:	0800166f 	.word	0x0800166f
  	 case CMD_PWNON:
  		  GSM_Init();
 80015f4:	f7ff fe24 	bl	8001240 <GSM_Init>
  		  gsm_state = CHECK_CMD_AT;
 80015f8:	4b20      	ldr	r3, [pc, #128]	; (800167c <Sim_work+0xd4>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	701a      	strb	r2, [r3, #0]
  		  break;
 80015fe:	e03b      	b.n	8001678 <Sim_work+0xd0>
  	 case CHECK_CMD_AT:
  		  fncSend_CommandAT(CHECK_CMD_AT, CHECK_STATUS_SIM);
 8001600:	2101      	movs	r1, #1
 8001602:	2000      	movs	r0, #0
 8001604:	f7ff ff90 	bl	8001528 <fncSend_CommandAT>
  		  break;
 8001608:	e036      	b.n	8001678 <Sim_work+0xd0>
  	 case CHECK_STATUS_SIM:
  		  fncSend_CommandAT(CHECK_STATUS_SIM, CHECK_CMD_CSQ);
 800160a:	2102      	movs	r1, #2
 800160c:	2001      	movs	r0, #1
 800160e:	f7ff ff8b 	bl	8001528 <fncSend_CommandAT>
  		  break;
 8001612:	e031      	b.n	8001678 <Sim_work+0xd0>
  	 case CHECK_CMD_CSQ:
  		  fncSend_CommandAT(CHECK_CMD_CSQ, CHECK_STATUS_NETWORK);
 8001614:	2103      	movs	r1, #3
 8001616:	2002      	movs	r0, #2
 8001618:	f7ff ff86 	bl	8001528 <fncSend_CommandAT>
  		  break;
 800161c:	e02c      	b.n	8001678 <Sim_work+0xd0>
  	 case CHECK_STATUS_NETWORK:
  		  fncSend_CommandAT(CHECK_STATUS_NETWORK, CMD_REPORT_NETWORK);
 800161e:	2104      	movs	r1, #4
 8001620:	2003      	movs	r0, #3
 8001622:	f7ff ff81 	bl	8001528 <fncSend_CommandAT>
   		  break;
 8001626:	e027      	b.n	8001678 <Sim_work+0xd0>
  	 case CMD_REPORT_NETWORK:
  		  fncSend_CommandAT(CMD_REPORT_NETWORK, CHECK_ATTACHED_STATUS);
 8001628:	2105      	movs	r1, #5
 800162a:	2004      	movs	r0, #4
 800162c:	f7ff ff7c 	bl	8001528 <fncSend_CommandAT>
    	  break;
 8001630:	e022      	b.n	8001678 <Sim_work+0xd0>
  	 case CHECK_ATTACHED_STATUS:
  		  fncSend_CommandAT(CHECK_ATTACHED_STATUS, CMD_CIPTIMEOUT);
 8001632:	2106      	movs	r1, #6
 8001634:	2005      	movs	r0, #5
 8001636:	f7ff ff77 	bl	8001528 <fncSend_CommandAT>
     	  break;
 800163a:	e01d      	b.n	8001678 <Sim_work+0xd0>
  	 case CMD_CIPTIMEOUT:
  		  fncSend_CommandAT(CMD_CIPTIMEOUT, CHECK_MODE_TCP);
 800163c:	2107      	movs	r1, #7
 800163e:	2006      	movs	r0, #6
 8001640:	f7ff ff72 	bl	8001528 <fncSend_CommandAT>
      	  break;
 8001644:	e018      	b.n	8001678 <Sim_work+0xd0>
  	 case CHECK_MODE_TCP:
  		  fncSend_CommandAT(CHECK_MODE_TCP, CHECK_CMD_NETOPEN);
 8001646:	2108      	movs	r1, #8
 8001648:	2007      	movs	r0, #7
 800164a:	f7ff ff6d 	bl	8001528 <fncSend_CommandAT>
       	  break;
 800164e:	e013      	b.n	8001678 <Sim_work+0xd0>
 	 case CHECK_CMD_NETOPEN:
 		  fncSend_CommandAT(CHECK_CMD_NETOPEN, CMD_GET_IPADDR);
 8001650:	2109      	movs	r1, #9
 8001652:	2008      	movs	r0, #8
 8001654:	f7ff ff68 	bl	8001528 <fncSend_CommandAT>
          break;
 8001658:	e00e      	b.n	8001678 <Sim_work+0xd0>
 	 case CMD_GET_IPADDR:
 		  fncSend_CommandAT(CMD_GET_IPADDR, CMD_CREATE_TCP);
 800165a:	210a      	movs	r1, #10
 800165c:	2009      	movs	r0, #9
 800165e:	f7ff ff63 	bl	8001528 <fncSend_CommandAT>
          break;
 8001662:	e009      	b.n	8001678 <Sim_work+0xd0>
 	 case CMD_CREATE_TCP:
 		  fncSend_CommandAT(CMD_CREATE_TCP, CHECK_CMD_CIPOPQUERY);
 8001664:	210b      	movs	r1, #11
 8001666:	200a      	movs	r0, #10
 8001668:	f7ff ff5e 	bl	8001528 <fncSend_CommandAT>
          break;
 800166c:	e004      	b.n	8001678 <Sim_work+0xd0>
 	 case CHECK_CMD_CIPOPQUERY:
 		  fncSend_CommandAT(CHECK_CMD_CIPOPQUERY, CMD_SENDREC_DATA);
 800166e:	210e      	movs	r1, #14
 8001670:	200b      	movs	r0, #11
 8001672:	f7ff ff59 	bl	8001528 <fncSend_CommandAT>
          break;
 8001676:	bf00      	nop
  	  }
}
 8001678:	bf00      	nop
 800167a:	bd80      	pop	{r7, pc}
 800167c:	20000000 	.word	0x20000000

08001680 <fncSend_DataServer>:
		}
	}
}


uint8_t fncSend_DataServer(uint8_t *arrSend, uint32_t len){
 8001680:	b590      	push	{r4, r7, lr}
 8001682:	b08f      	sub	sp, #60	; 0x3c
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
 8001688:	6039      	str	r1, [r7, #0]
		char numArr[20]= {0};
 800168a:	f107 0320 	add.w	r3, r7, #32
 800168e:	2200      	movs	r2, #0
 8001690:	601a      	str	r2, [r3, #0]
 8001692:	605a      	str	r2, [r3, #4]
 8001694:	609a      	str	r2, [r3, #8]
 8001696:	60da      	str	r2, [r3, #12]
 8001698:	611a      	str	r2, [r3, #16]
		char fullCmdSend[20] = {0};
 800169a:	f107 030c 	add.w	r3, r7, #12
 800169e:	2200      	movs	r2, #0
 80016a0:	601a      	str	r2, [r3, #0]
 80016a2:	605a      	str	r2, [r3, #4]
 80016a4:	609a      	str	r2, [r3, #8]
 80016a6:	60da      	str	r2, [r3, #12]
 80016a8:	611a      	str	r2, [r3, #16]
		char endChar[] = "\r\n";
 80016aa:	4a31      	ldr	r2, [pc, #196]	; (8001770 <fncSend_DataServer+0xf0>)
 80016ac:	f107 0308 	add.w	r3, r7, #8
 80016b0:	6812      	ldr	r2, [r2, #0]
 80016b2:	4611      	mov	r1, r2
 80016b4:	8019      	strh	r1, [r3, #0]
 80016b6:	3302      	adds	r3, #2
 80016b8:	0c12      	lsrs	r2, r2, #16
 80016ba:	701a      	strb	r2, [r3, #0]
		uint32_t lengh = 0;
 80016bc:	2300      	movs	r3, #0
 80016be:	637b      	str	r3, [r7, #52]	; 0x34
		itoa(len, numArr, 10);
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	f107 0120 	add.w	r1, r7, #32
 80016c6:	220a      	movs	r2, #10
 80016c8:	4618      	mov	r0, r3
 80016ca:	f004 fecd 	bl	8006468 <itoa>
		strcat(numArr, endChar);
 80016ce:	f107 0208 	add.w	r2, r7, #8
 80016d2:	f107 0320 	add.w	r3, r7, #32
 80016d6:	4611      	mov	r1, r2
 80016d8:	4618      	mov	r0, r3
 80016da:	f005 fb65 	bl	8006da8 <strcat>
		strcpy(fullCmdSend, (const char*)arrInitialSim[CMD_SEND_DATA].strSend.packetAt);
 80016de:	4b25      	ldr	r3, [pc, #148]	; (8001774 <fncSend_DataServer+0xf4>)
 80016e0:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 80016e4:	f107 030c 	add.w	r3, r7, #12
 80016e8:	4611      	mov	r1, r2
 80016ea:	4618      	mov	r0, r3
 80016ec:	f005 fb6b 	bl	8006dc6 <strcpy>
		strcat(fullCmdSend, numArr);
 80016f0:	f107 0220 	add.w	r2, r7, #32
 80016f4:	f107 030c 	add.w	r3, r7, #12
 80016f8:	4611      	mov	r1, r2
 80016fa:	4618      	mov	r0, r3
 80016fc:	f005 fb54 	bl	8006da8 <strcat>
		lengh = arrInitialSim[CMD_SEND_DATA].strSend.length + strlen(numArr);
 8001700:	4b1c      	ldr	r3, [pc, #112]	; (8001774 <fncSend_DataServer+0xf4>)
 8001702:	f8b3 30c8 	ldrh.w	r3, [r3, #200]	; 0xc8
 8001706:	461c      	mov	r4, r3
 8001708:	f107 0320 	add.w	r3, r7, #32
 800170c:	4618      	mov	r0, r3
 800170e:	f7fe fd67 	bl	80001e0 <strlen>
 8001712:	4603      	mov	r3, r0
 8001714:	4423      	add	r3, r4
 8001716:	637b      	str	r3, [r7, #52]	; 0x34
		result = fnCheckPacket((uint8_t*)fullCmdSend, lengh, arrInitialSim[CMD_SEND_DATA].fncType, 1000);
 8001718:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800171a:	b299      	uxth	r1, r3
 800171c:	4b15      	ldr	r3, [pc, #84]	; (8001774 <fncSend_DataServer+0xf4>)
 800171e:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 8001722:	f107 000c 	add.w	r0, r7, #12
 8001726:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800172a:	f7ff feb3 	bl	8001494 <fnCheckPacket>
 800172e:	4603      	mov	r3, r0
 8001730:	461a      	mov	r2, r3
 8001732:	4b11      	ldr	r3, [pc, #68]	; (8001778 <fncSend_DataServer+0xf8>)
 8001734:	701a      	strb	r2, [r3, #0]
		if(result != 0){
 8001736:	4b10      	ldr	r3, [pc, #64]	; (8001778 <fncSend_DataServer+0xf8>)
 8001738:	781b      	ldrb	r3, [r3, #0]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d013      	beq.n	8001766 <fncSend_DataServer+0xe6>
	 		result = fnCheckPacket(arrSend, len, fnCheckSendSVPacket, 1000);
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	b299      	uxth	r1, r3
 8001742:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001746:	4a0d      	ldr	r2, [pc, #52]	; (800177c <fncSend_DataServer+0xfc>)
 8001748:	6878      	ldr	r0, [r7, #4]
 800174a:	f7ff fea3 	bl	8001494 <fnCheckPacket>
 800174e:	4603      	mov	r3, r0
 8001750:	461a      	mov	r2, r3
 8001752:	4b09      	ldr	r3, [pc, #36]	; (8001778 <fncSend_DataServer+0xf8>)
 8001754:	701a      	strb	r2, [r3, #0]
	 			if(result != 0)
 8001756:	4b08      	ldr	r3, [pc, #32]	; (8001778 <fncSend_DataServer+0xf8>)
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <fncSend_DataServer+0xe2>
	 				return 1;
 800175e:	2301      	movs	r3, #1
 8001760:	e001      	b.n	8001766 <fncSend_DataServer+0xe6>
//	 				HAL_UART_Transmit(&huart1,serverText1, strlen((char*)serverText1), 1000);
	 			else
	 				return 0;
 8001762:	2300      	movs	r3, #0
 8001764:	e7ff      	b.n	8001766 <fncSend_DataServer+0xe6>
//	 				HAL_UART_Transmit(&huart1,serverText2, strlen((char*)serverText2), 1000);
	 	}
}
 8001766:	4618      	mov	r0, r3
 8001768:	373c      	adds	r7, #60	; 0x3c
 800176a:	46bd      	mov	sp, r7
 800176c:	bd90      	pop	{r4, r7, pc}
 800176e:	bf00      	nop
 8001770:	080087b8 	.word	0x080087b8
 8001774:	20000004 	.word	0x20000004
 8001778:	200005fd 	.word	0x200005fd
 800177c:	08001469 	.word	0x08001469

08001780 <Sim_SendToServer>:

void Sim_SendToServer(uint8_t *data, uint8_t len, uint32_t time_send_data){
 8001780:	b580      	push	{r7, lr}
 8001782:	b084      	sub	sp, #16
 8001784:	af00      	add	r7, sp, #0
 8001786:	60f8      	str	r0, [r7, #12]
 8001788:	460b      	mov	r3, r1
 800178a:	607a      	str	r2, [r7, #4]
 800178c:	72fb      	strb	r3, [r7, #11]
			if(CMD_SENDREC_DATA == gsm_state){
 800178e:	4b14      	ldr	r3, [pc, #80]	; (80017e0 <Sim_SendToServer+0x60>)
 8001790:	f993 3000 	ldrsb.w	r3, [r3]
 8001794:	2b0e      	cmp	r3, #14
 8001796:	d11f      	bne.n	80017d8 <Sim_SendToServer+0x58>
				if(vr_flag == 0){
 8001798:	4b12      	ldr	r3, [pc, #72]	; (80017e4 <Sim_SendToServer+0x64>)
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d107      	bne.n	80017b0 <Sim_SendToServer+0x30>
					Set_Frequency_Send_Data(time_send_data);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	b2db      	uxtb	r3, r3
 80017a4:	4618      	mov	r0, r3
 80017a6:	f000 ff5d 	bl	8002664 <Set_Frequency_Send_Data>
					vr_flag = 1;
 80017aa:	4b0e      	ldr	r3, [pc, #56]	; (80017e4 <Sim_SendToServer+0x64>)
 80017ac:	2201      	movs	r2, #1
 80017ae:	701a      	strb	r2, [r3, #0]
				}
				if(vr_count == 1){
 80017b0:	4b0d      	ldr	r3, [pc, #52]	; (80017e8 <Sim_SendToServer+0x68>)
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	2b01      	cmp	r3, #1
 80017b6:	d10f      	bne.n	80017d8 <Sim_SendToServer+0x58>
					Set_Frequency_Send_Data(time_send_data);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	b2db      	uxtb	r3, r3
 80017bc:	4618      	mov	r0, r3
 80017be:	f000 ff51 	bl	8002664 <Set_Frequency_Send_Data>
					vr_count = 0;
 80017c2:	4b09      	ldr	r3, [pc, #36]	; (80017e8 <Sim_SendToServer+0x68>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	701a      	strb	r2, [r3, #0]
					count_time = 0;
 80017c8:	4b08      	ldr	r3, [pc, #32]	; (80017ec <Sim_SendToServer+0x6c>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	701a      	strb	r2, [r3, #0]
					fncSend_DataServer(data, len);
 80017ce:	7afb      	ldrb	r3, [r7, #11]
 80017d0:	4619      	mov	r1, r3
 80017d2:	68f8      	ldr	r0, [r7, #12]
 80017d4:	f7ff ff54 	bl	8001680 <fncSend_DataServer>
				}
	}
}
 80017d8:	bf00      	nop
 80017da:	3710      	adds	r7, #16
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	20000000 	.word	0x20000000
 80017e4:	200002d4 	.word	0x200002d4
 80017e8:	200004f3 	.word	0x200004f3
 80017ec:	200002d5 	.word	0x200002d5

080017f0 <Packet_Data_SendToServer>:

void Packet_Data_SendToServer(uint8_t *data, uint8_t len, uint8_t time_send_data){
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
 80017f8:	460b      	mov	r3, r1
 80017fa:	70fb      	strb	r3, [r7, #3]
 80017fc:	4613      	mov	r3, r2
 80017fe:	70bb      	strb	r3, [r7, #2]
	if(1 == sTimer_1000ms.flag_timer){
 8001800:	4b08      	ldr	r3, [pc, #32]	; (8001824 <Packet_Data_SendToServer+0x34>)
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	b2db      	uxtb	r3, r3
 8001806:	2b01      	cmp	r3, #1
 8001808:	d108      	bne.n	800181c <Packet_Data_SendToServer+0x2c>
		Sim_SendToServer(data, len, time_send_data);
 800180a:	78ba      	ldrb	r2, [r7, #2]
 800180c:	78fb      	ldrb	r3, [r7, #3]
 800180e:	4619      	mov	r1, r3
 8001810:	6878      	ldr	r0, [r7, #4]
 8001812:	f7ff ffb5 	bl	8001780 <Sim_SendToServer>
		sTimer_1000ms.flag_timer = 0;
 8001816:	4b03      	ldr	r3, [pc, #12]	; (8001824 <Packet_Data_SendToServer+0x34>)
 8001818:	2200      	movs	r2, #0
 800181a:	701a      	strb	r2, [r3, #0]
	}
}
 800181c:	bf00      	nop
 800181e:	3708      	adds	r7, #8
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	20000bdc 	.word	0x20000bdc

08001828 <wait_to_reinitial>:


// ham cho de khoi tao lai
void wait_to_reinitial(uint8_t time){
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	4603      	mov	r3, r0
 8001830:	71fb      	strb	r3, [r7, #7]
	count_time++;
 8001832:	4b0b      	ldr	r3, [pc, #44]	; (8001860 <wait_to_reinitial+0x38>)
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	3301      	adds	r3, #1
 8001838:	b2da      	uxtb	r2, r3
 800183a:	4b09      	ldr	r3, [pc, #36]	; (8001860 <wait_to_reinitial+0x38>)
 800183c:	701a      	strb	r2, [r3, #0]
		 if(count_time == time){
 800183e:	4b08      	ldr	r3, [pc, #32]	; (8001860 <wait_to_reinitial+0x38>)
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	79fa      	ldrb	r2, [r7, #7]
 8001844:	429a      	cmp	r2, r3
 8001846:	d105      	bne.n	8001854 <wait_to_reinitial+0x2c>
		  	gsm_state = CMD_PWNON;
 8001848:	4b06      	ldr	r3, [pc, #24]	; (8001864 <wait_to_reinitial+0x3c>)
 800184a:	22ff      	movs	r2, #255	; 0xff
 800184c:	701a      	strb	r2, [r3, #0]
		  	count_time = 0;
 800184e:	4b04      	ldr	r3, [pc, #16]	; (8001860 <wait_to_reinitial+0x38>)
 8001850:	2200      	movs	r2, #0
 8001852:	701a      	strb	r2, [r3, #0]
		  }
}
 8001854:	bf00      	nop
 8001856:	370c      	adds	r7, #12
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr
 8001860:	200002d5 	.word	0x200002d5
 8001864:	20000000 	.word	0x20000000

08001868 <wait_to_reinitialTCP>:

// ham quay lai khoi tao TCP
void wait_to_reinitialTCP(uint8_t time){
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	4603      	mov	r3, r0
 8001870:	71fb      	strb	r3, [r7, #7]
	count_time++;
 8001872:	4b0b      	ldr	r3, [pc, #44]	; (80018a0 <wait_to_reinitialTCP+0x38>)
 8001874:	781b      	ldrb	r3, [r3, #0]
 8001876:	3301      	adds	r3, #1
 8001878:	b2da      	uxtb	r2, r3
 800187a:	4b09      	ldr	r3, [pc, #36]	; (80018a0 <wait_to_reinitialTCP+0x38>)
 800187c:	701a      	strb	r2, [r3, #0]
		 if(count_time == time){
 800187e:	4b08      	ldr	r3, [pc, #32]	; (80018a0 <wait_to_reinitialTCP+0x38>)
 8001880:	781b      	ldrb	r3, [r3, #0]
 8001882:	79fa      	ldrb	r2, [r7, #7]
 8001884:	429a      	cmp	r2, r3
 8001886:	d105      	bne.n	8001894 <wait_to_reinitialTCP+0x2c>
		  	gsm_state = CMD_CREATE_TCP;
 8001888:	4b06      	ldr	r3, [pc, #24]	; (80018a4 <wait_to_reinitialTCP+0x3c>)
 800188a:	220a      	movs	r2, #10
 800188c:	701a      	strb	r2, [r3, #0]
		  	count_time = 0;
 800188e:	4b04      	ldr	r3, [pc, #16]	; (80018a0 <wait_to_reinitialTCP+0x38>)
 8001890:	2200      	movs	r2, #0
 8001892:	701a      	strb	r2, [r3, #0]
		  }
}
 8001894:	bf00      	nop
 8001896:	370c      	adds	r7, #12
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr
 80018a0:	200002d5 	.word	0x200002d5
 80018a4:	20000000 	.word	0x20000000

080018a8 <getNH3TemperatureValue>:
extern uint8_t buffer[256];


// hàm nhận giá trị nhiệt độ cảm biến
uint8_t getNH3TemperatureValue(float *data)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b086      	sub	sp, #24
 80018ac:	af02      	add	r7, sp, #8
 80018ae:	6078      	str	r0, [r7, #4]
	uint8_t res;
	indexBuffer = 0;
 80018b0:	4b23      	ldr	r3, [pc, #140]	; (8001940 <getNH3TemperatureValue+0x98>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	701a      	strb	r2, [r3, #0]
	memset(buffer, '\0', 256);
 80018b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018ba:	2100      	movs	r1, #0
 80018bc:	4821      	ldr	r0, [pc, #132]	; (8001944 <getNH3TemperatureValue+0x9c>)
 80018be:	f004 fdef 	bl	80064a0 <memset>
	result = Master_Read_Modbus(ADDRESS_SLAVE_NH3, FUNCODE_COMMON_NH3, REG_ADDRESS_TEMP, LENGTH_DATA_TEMP);
 80018c2:	2301      	movs	r3, #1
 80018c4:	f242 0204 	movw	r2, #8196	; 0x2004
 80018c8:	2103      	movs	r1, #3
 80018ca:	200f      	movs	r0, #15
 80018cc:	f7ff fb32 	bl	8000f34 <Master_Read_Modbus>
 80018d0:	4603      	mov	r3, r0
 80018d2:	461a      	mov	r2, r3
 80018d4:	4b1c      	ldr	r3, [pc, #112]	; (8001948 <getNH3TemperatureValue+0xa0>)
 80018d6:	701a      	strb	r2, [r3, #0]
	if(result != HAL_OK){
 80018d8:	4b1b      	ldr	r3, [pc, #108]	; (8001948 <getNH3TemperatureValue+0xa0>)
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d001      	beq.n	80018e4 <getNH3TemperatureValue+0x3c>
		return FALSE;
 80018e0:	2300      	movs	r3, #0
 80018e2:	e029      	b.n	8001938 <getNH3TemperatureValue+0x90>
		//my_printf("not send frame");
	}
	wait_receivedata(200);
 80018e4:	20c8      	movs	r0, #200	; 0xc8
 80018e6:	f000 fc3b 	bl	8002160 <wait_receivedata>
	 //wait data respond
	res = parserModbusRx(ADDRESS_SLAVE_NH3, buffer, indexBuffer, &datalen, dataField);
 80018ea:	4b15      	ldr	r3, [pc, #84]	; (8001940 <getNH3TemperatureValue+0x98>)
 80018ec:	781a      	ldrb	r2, [r3, #0]
 80018ee:	4b17      	ldr	r3, [pc, #92]	; (800194c <getNH3TemperatureValue+0xa4>)
 80018f0:	9300      	str	r3, [sp, #0]
 80018f2:	4b17      	ldr	r3, [pc, #92]	; (8001950 <getNH3TemperatureValue+0xa8>)
 80018f4:	4913      	ldr	r1, [pc, #76]	; (8001944 <getNH3TemperatureValue+0x9c>)
 80018f6:	200f      	movs	r0, #15
 80018f8:	f7ff fbd6 	bl	80010a8 <parserModbusRx>
 80018fc:	4603      	mov	r3, r0
 80018fe:	73fb      	strb	r3, [r7, #15]
	if(res != 0){
 8001900:	7bfb      	ldrb	r3, [r7, #15]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d018      	beq.n	8001938 <getNH3TemperatureValue+0x90>
		*data = dataField[0] <<8 | dataField[1];
 8001906:	4b11      	ldr	r3, [pc, #68]	; (800194c <getNH3TemperatureValue+0xa4>)
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	021b      	lsls	r3, r3, #8
 800190c:	4a0f      	ldr	r2, [pc, #60]	; (800194c <getNH3TemperatureValue+0xa4>)
 800190e:	7852      	ldrb	r2, [r2, #1]
 8001910:	4313      	orrs	r3, r2
 8001912:	ee07 3a90 	vmov	s15, r3
 8001916:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	edc3 7a00 	vstr	s15, [r3]
		*data = *data / 100.0f;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	ed93 7a00 	vldr	s14, [r3]
 8001926:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8001954 <getNH3TemperatureValue+0xac>
 800192a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	edc3 7a00 	vstr	s15, [r3]
		return TRUE;
 8001934:	2301      	movs	r3, #1
 8001936:	e7ff      	b.n	8001938 <getNH3TemperatureValue+0x90>
	}
}
 8001938:	4618      	mov	r0, r3
 800193a:	3710      	adds	r7, #16
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}
 8001940:	200004e9 	.word	0x200004e9
 8001944:	20000704 	.word	0x20000704
 8001948:	200005fd 	.word	0x200005fd
 800194c:	200004fc 	.word	0x200004fc
 8001950:	200005fc 	.word	0x200005fc
 8001954:	42c80000 	.word	0x42c80000

08001958 <Ringbuf_init>:
UART_HandleTypeDef _handle;

void store_char(unsigned char c, ring_buffer *buffer);

void Ringbuf_init(UART_HandleTypeDef handle)
{
 8001958:	b084      	sub	sp, #16
 800195a:	b580      	push	{r7, lr}
 800195c:	af00      	add	r7, sp, #0
 800195e:	f107 0c08 	add.w	ip, r7, #8
 8001962:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	_rx_buffer = &rx_buffer;
 8001966:	4b12      	ldr	r3, [pc, #72]	; (80019b0 <Ringbuf_init+0x58>)
 8001968:	4a12      	ldr	r2, [pc, #72]	; (80019b4 <Ringbuf_init+0x5c>)
 800196a:	601a      	str	r2, [r3, #0]
	_tx_buffer = &tx_buffer;
 800196c:	4b12      	ldr	r3, [pc, #72]	; (80019b8 <Ringbuf_init+0x60>)
 800196e:	4a13      	ldr	r2, [pc, #76]	; (80019bc <Ringbuf_init+0x64>)
 8001970:	601a      	str	r2, [r3, #0]
	_handle = handle;
 8001972:	4b13      	ldr	r3, [pc, #76]	; (80019c0 <Ringbuf_init+0x68>)
 8001974:	4618      	mov	r0, r3
 8001976:	f107 0108 	add.w	r1, r7, #8
 800197a:	2380      	movs	r3, #128	; 0x80
 800197c:	461a      	mov	r2, r3
 800197e:	f004 fd84 	bl	800648a <memcpy>

	/* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
	__HAL_UART_ENABLE_IT(&_handle, UART_IT_ERR);
 8001982:	4b0f      	ldr	r3, [pc, #60]	; (80019c0 <Ringbuf_init+0x68>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	689a      	ldr	r2, [r3, #8]
 8001988:	4b0d      	ldr	r3, [pc, #52]	; (80019c0 <Ringbuf_init+0x68>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f042 0201 	orr.w	r2, r2, #1
 8001990:	609a      	str	r2, [r3, #8]

	/* Enable the UART Data Register not empty Interrupt */
	__HAL_UART_ENABLE_IT(&_handle, UART_IT_RXNE);
 8001992:	4b0b      	ldr	r3, [pc, #44]	; (80019c0 <Ringbuf_init+0x68>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	4b09      	ldr	r3, [pc, #36]	; (80019c0 <Ringbuf_init+0x68>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f042 0220 	orr.w	r2, r2, #32
 80019a0:	601a      	str	r2, [r3, #0]
}
 80019a2:	bf00      	nop
 80019a4:	46bd      	mov	sp, r7
 80019a6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80019aa:	b004      	add	sp, #16
 80019ac:	4770      	bx	lr
 80019ae:	bf00      	nop
 80019b0:	2000098c 	.word	0x2000098c
 80019b4:	200002d8 	.word	0x200002d8
 80019b8:	20000988 	.word	0x20000988
 80019bc:	200003e0 	.word	0x200003e0
 80019c0:	20000908 	.word	0x20000908

080019c4 <store_char>:

void store_char(unsigned char c, ring_buffer *buffer)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b085      	sub	sp, #20
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	4603      	mov	r3, r0
 80019cc:	6039      	str	r1, [r7, #0]
 80019ce:	71fb      	strb	r3, [r7, #7]
	int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80019d6:	3301      	adds	r3, #1
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	60fb      	str	r3, [r7, #12]
	// if we should be storing the received character into the location
	// just before the tail (meaning that the head would advance to the
	// current location of the tail), we're about to overflow the buffer
	// and so we don't write the character or advance the head.
	if(i != buffer->tail)
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d009      	beq.n	80019fc <store_char+0x38>
	{
		buffer->buffer[buffer->head] = c;
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80019ee:	683a      	ldr	r2, [r7, #0]
 80019f0:	79f9      	ldrb	r1, [r7, #7]
 80019f2:	54d1      	strb	r1, [r2, r3]
		buffer->head = i;
 80019f4:	68fa      	ldr	r2, [r7, #12]
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	}
}
 80019fc:	bf00      	nop
 80019fe:	3714      	adds	r7, #20
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr

08001a08 <Uart_read>:

int Uart_read(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	af00      	add	r7, sp, #0
	// if the head isn't ahead of the tail, we don't have any characters
	if(_rx_buffer->head == _rx_buffer->tail)
 8001a0e:	4b13      	ldr	r3, [pc, #76]	; (8001a5c <Uart_read+0x54>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8001a16:	4b11      	ldr	r3, [pc, #68]	; (8001a5c <Uart_read+0x54>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8001a1e:	429a      	cmp	r2, r3
 8001a20:	d102      	bne.n	8001a28 <Uart_read+0x20>
		return -1;
 8001a22:	f04f 33ff 	mov.w	r3, #4294967295
 8001a26:	e012      	b.n	8001a4e <Uart_read+0x46>
	else
	{
		unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
 8001a28:	4b0c      	ldr	r3, [pc, #48]	; (8001a5c <Uart_read+0x54>)
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	4b0b      	ldr	r3, [pc, #44]	; (8001a5c <Uart_read+0x54>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8001a34:	5cd3      	ldrb	r3, [r2, r3]
 8001a36:	71fb      	strb	r3, [r7, #7]
		_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 8001a38:	4b08      	ldr	r3, [pc, #32]	; (8001a5c <Uart_read+0x54>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8001a40:	1c5a      	adds	r2, r3, #1
 8001a42:	4b06      	ldr	r3, [pc, #24]	; (8001a5c <Uart_read+0x54>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	b2d2      	uxtb	r2, r2
 8001a48:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		return c;
 8001a4c:	79fb      	ldrb	r3, [r7, #7]
	}
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	370c      	adds	r7, #12
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	2000098c 	.word	0x2000098c

08001a60 <Uart_write>:

void Uart_write(int c)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b085      	sub	sp, #20
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
	int i = (_tx_buffer->head + 1) % UART_BUFFER_SIZE;
 8001a68:	4b15      	ldr	r3, [pc, #84]	; (8001ac0 <Uart_write+0x60>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8001a70:	3301      	adds	r3, #1
 8001a72:	b2db      	uxtb	r3, r3
 8001a74:	60fb      	str	r3, [r7, #12]
	// If the output buffer is full, there's nothing for it other than to
	// wait for the interrupt handler to empty it a bit
	// ???: return 0 here instead?
	while (i == _tx_buffer->tail);
 8001a76:	bf00      	nop
 8001a78:	4b11      	ldr	r3, [pc, #68]	; (8001ac0 <Uart_write+0x60>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	429a      	cmp	r2, r3
 8001a84:	d0f8      	beq.n	8001a78 <Uart_write+0x18>
	_tx_buffer->buffer[_tx_buffer->head] = (uint8_t)c;
 8001a86:	4b0e      	ldr	r3, [pc, #56]	; (8001ac0 <Uart_write+0x60>)
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	4b0d      	ldr	r3, [pc, #52]	; (8001ac0 <Uart_write+0x60>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8001a92:	6879      	ldr	r1, [r7, #4]
 8001a94:	b2c9      	uxtb	r1, r1
 8001a96:	54d1      	strb	r1, [r2, r3]
	_tx_buffer->head = i;
 8001a98:	4b09      	ldr	r3, [pc, #36]	; (8001ac0 <Uart_write+0x60>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	68fa      	ldr	r2, [r7, #12]
 8001a9e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	__HAL_UART_ENABLE_IT(&_handle, UART_IT_TXE); // Enable UART transmission interrupt
 8001aa2:	4b08      	ldr	r3, [pc, #32]	; (8001ac4 <Uart_write+0x64>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	4b06      	ldr	r3, [pc, #24]	; (8001ac4 <Uart_write+0x64>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001ab0:	601a      	str	r2, [r3, #0]
}
 8001ab2:	bf00      	nop
 8001ab4:	3714      	adds	r7, #20
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	20000988 	.word	0x20000988
 8001ac4:	20000908 	.word	0x20000908

08001ac8 <IsDataAvailable>:

int IsDataAvailable(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
	return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % UART_BUFFER_SIZE;
 8001acc:	4b08      	ldr	r3, [pc, #32]	; (8001af0 <IsDataAvailable+0x28>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8001ad4:	b29a      	uxth	r2, r3
 8001ad6:	4b06      	ldr	r3, [pc, #24]	; (8001af0 <IsDataAvailable+0x28>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8001ade:	b29b      	uxth	r3, r3
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	b29b      	uxth	r3, r3
 8001ae4:	b2db      	uxtb	r3, r3
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr
 8001af0:	2000098c 	.word	0x2000098c

08001af4 <Uart_sendArray>:
	}
	else return -1;
}

void Uart_sendArray (char arr[],int numBytes)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b084      	sub	sp, #16
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
 8001afc:	6039      	str	r1, [r7, #0]
	//temporary clean tx
	_tx_buffer->tail = _tx_buffer->head = 0;
 8001afe:	4b0f      	ldr	r3, [pc, #60]	; (8001b3c <Uart_sendArray+0x48>)
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	2300      	movs	r3, #0
 8001b04:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
 8001b08:	4a0c      	ldr	r2, [pc, #48]	; (8001b3c <Uart_sendArray+0x48>)
 8001b0a:	6812      	ldr	r2, [r2, #0]
 8001b0c:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
	for(int i=0;i<numBytes;i++)
 8001b10:	2300      	movs	r3, #0
 8001b12:	60fb      	str	r3, [r7, #12]
 8001b14:	e009      	b.n	8001b2a <Uart_sendArray+0x36>
	{
		Uart_write(arr[i]);	//send one byte at a time
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	687a      	ldr	r2, [r7, #4]
 8001b1a:	4413      	add	r3, r2
 8001b1c:	781b      	ldrb	r3, [r3, #0]
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f7ff ff9e 	bl	8001a60 <Uart_write>
	for(int i=0;i<numBytes;i++)
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	3301      	adds	r3, #1
 8001b28:	60fb      	str	r3, [r7, #12]
 8001b2a:	68fa      	ldr	r2, [r7, #12]
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	429a      	cmp	r2, r3
 8001b30:	dbf1      	blt.n	8001b16 <Uart_sendArray+0x22>
	}
}
 8001b32:	bf00      	nop
 8001b34:	3710      	adds	r7, #16
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	20000988 	.word	0x20000988

08001b40 <Uart_isr>:
{
	_rx_buffer->tail = _rx_buffer->head;	//move the tail up to the head so all available chars 'disappear'
}

void Uart_isr (UART_HandleTypeDef *huart)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b086      	sub	sp, #24
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
	uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	69db      	ldr	r3, [r3, #28]
 8001b4e:	617b      	str	r3, [r7, #20]
	uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	613b      	str	r3, [r7, #16]

	/* if DR is not empty and the Rx Int is enabled */
	if (((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	f003 0320 	and.w	r3, r3, #32
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d014      	beq.n	8001b8c <Uart_isr+0x4c>
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	f003 0320 	and.w	r3, r3, #32
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d00f      	beq.n	8001b8c <Uart_isr+0x4c>
		* @note   RXNE flag can be also cleared by a read to the USART_DR register.
		* @note   TC flag can be also cleared by software sequence: a read operation to
		*          USART_SR register followed by a write operation to USART_DR register.
		* @note   TXE flag is cleared only by a write to the USART_DR register.
		*********************/
		huart->Instance->ISR;                       /* Read status register */
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	69db      	ldr	r3, [r3, #28]
		unsigned char c = huart->Instance->RDR;     /* Read data register */
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001b78:	b29b      	uxth	r3, r3
 8001b7a:	73fb      	strb	r3, [r7, #15]
		store_char (c, _rx_buffer);  // store data in buffer
 8001b7c:	4b1e      	ldr	r3, [pc, #120]	; (8001bf8 <Uart_isr+0xb8>)
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	7bfb      	ldrb	r3, [r7, #15]
 8001b82:	4611      	mov	r1, r2
 8001b84:	4618      	mov	r0, r3
 8001b86:	f7ff ff1d 	bl	80019c4 <store_char>
		return;
 8001b8a:	e031      	b.n	8001bf0 <Uart_isr+0xb0>
	}

	/*If interrupt is caused due to Transmit Data Register Empty */
	if (((isrflags & USART_ISR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d02c      	beq.n	8001bf0 <Uart_isr+0xb0>
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d027      	beq.n	8001bf0 <Uart_isr+0xb0>
	{
		if(tx_buffer.head == tx_buffer.tail)
 8001ba0:	4b16      	ldr	r3, [pc, #88]	; (8001bfc <Uart_isr+0xbc>)
 8001ba2:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8001ba6:	4b15      	ldr	r3, [pc, #84]	; (8001bfc <Uart_isr+0xbc>)
 8001ba8:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8001bac:	429a      	cmp	r2, r3
 8001bae:	d108      	bne.n	8001bc2 <Uart_isr+0x82>
		{
			// Buffer empty, so disable interrupts
			__HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001bbe:	601a      	str	r2, [r3, #0]
			unsigned char c = tx_buffer.buffer[tx_buffer.tail];
			tx_buffer.tail = (tx_buffer.tail + 1) % UART_BUFFER_SIZE;
			huart->Instance->ISR;
			huart->Instance->TDR = c;
		}
		return;
 8001bc0:	e016      	b.n	8001bf0 <Uart_isr+0xb0>
			unsigned char c = tx_buffer.buffer[tx_buffer.tail];
 8001bc2:	4b0e      	ldr	r3, [pc, #56]	; (8001bfc <Uart_isr+0xbc>)
 8001bc4:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8001bc8:	4a0c      	ldr	r2, [pc, #48]	; (8001bfc <Uart_isr+0xbc>)
 8001bca:	5cd3      	ldrb	r3, [r2, r3]
 8001bcc:	73bb      	strb	r3, [r7, #14]
			tx_buffer.tail = (tx_buffer.tail + 1) % UART_BUFFER_SIZE;
 8001bce:	4b0b      	ldr	r3, [pc, #44]	; (8001bfc <Uart_isr+0xbc>)
 8001bd0:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8001bd4:	3301      	adds	r3, #1
 8001bd6:	b2db      	uxtb	r3, r3
 8001bd8:	4a08      	ldr	r2, [pc, #32]	; (8001bfc <Uart_isr+0xbc>)
 8001bda:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
			huart->Instance->ISR;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	69db      	ldr	r3, [r3, #28]
			huart->Instance->TDR = c;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	7bba      	ldrb	r2, [r7, #14]
 8001bea:	b292      	uxth	r2, r2
 8001bec:	851a      	strh	r2, [r3, #40]	; 0x28
		return;
 8001bee:	bf00      	nop
	}
}
 8001bf0:	3718      	adds	r7, #24
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	2000098c 	.word	0x2000098c
 8001bfc:	200003e0 	.word	0x200003e0

08001c00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c00:	b590      	push	{r4, r7, lr}
 8001c02:	b09d      	sub	sp, #116	; 0x74
 8001c04:	af1c      	add	r7, sp, #112	; 0x70
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c06:	f000 fde4 	bl	80027d2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c0a:	f000 f857 	bl	8001cbc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c0e:	f000 f9fb 	bl	8002008 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001c12:	f000 f999 	bl	8001f48 <MX_USART1_UART_Init>
  MX_RTC_Init();
 8001c16:	f000 f8b9 	bl	8001d8c <MX_RTC_Init>
  MX_USART3_UART_Init();
 8001c1a:	f000 f9c5 	bl	8001fa8 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8001c1e:	f000 f945 	bl	8001eac <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_IT(&huart1, &data, 1);
 8001c22:	2201      	movs	r2, #1
 8001c24:	491c      	ldr	r1, [pc, #112]	; (8001c98 <main+0x98>)
 8001c26:	481d      	ldr	r0, [pc, #116]	; (8001c9c <main+0x9c>)
 8001c28:	f003 fd1a 	bl	8005660 <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 8001c2c:	481c      	ldr	r0, [pc, #112]	; (8001ca0 <main+0xa0>)
 8001c2e:	f003 f845 	bl	8004cbc <HAL_TIM_Base_Start_IT>
  Ringbuf_init(huart3);
 8001c32:	4c1c      	ldr	r4, [pc, #112]	; (8001ca4 <main+0xa4>)
 8001c34:	4668      	mov	r0, sp
 8001c36:	f104 0310 	add.w	r3, r4, #16
 8001c3a:	2270      	movs	r2, #112	; 0x70
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	f004 fc24 	bl	800648a <memcpy>
 8001c42:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001c46:	f7ff fe87 	bl	8001958 <Ringbuf_init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//	  Master_Write_Modbus (0x0F, 0x10, 0x2004, 1, buf_test);
	  value = getNH3TemperatureValue(&temperature);
 8001c4a:	4817      	ldr	r0, [pc, #92]	; (8001ca8 <main+0xa8>)
 8001c4c:	f7ff fe2c 	bl	80018a8 <getNH3TemperatureValue>
 8001c50:	4603      	mov	r3, r0
 8001c52:	461a      	mov	r2, r3
 8001c54:	4b15      	ldr	r3, [pc, #84]	; (8001cac <main+0xac>)
 8001c56:	701a      	strb	r2, [r3, #0]
	  if(value != 0){
 8001c58:	4b14      	ldr	r3, [pc, #80]	; (8001cac <main+0xac>)
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d00c      	beq.n	8001c7a <main+0x7a>
		  sprintf(arr, "Temperature NH3: %0.2f\r\n", temperature);
 8001c60:	4b11      	ldr	r3, [pc, #68]	; (8001ca8 <main+0xa8>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4618      	mov	r0, r3
 8001c66:	f7fe fc77 	bl	8000558 <__aeabi_f2d>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	460c      	mov	r4, r1
 8001c6e:	461a      	mov	r2, r3
 8001c70:	4623      	mov	r3, r4
 8001c72:	490f      	ldr	r1, [pc, #60]	; (8001cb0 <main+0xb0>)
 8001c74:	480f      	ldr	r0, [pc, #60]	; (8001cb4 <main+0xb4>)
 8001c76:	f005 f877 	bl	8006d68 <siprintf>
	  }

	  Sim_work();
 8001c7a:	f7ff fc95 	bl	80015a8 <Sim_work>
	  Packet_Data_SendToServer(arr, strlen(arr), Time_send_sv);
 8001c7e:	480d      	ldr	r0, [pc, #52]	; (8001cb4 <main+0xb4>)
 8001c80:	f7fe faae 	bl	80001e0 <strlen>
 8001c84:	4603      	mov	r3, r0
 8001c86:	b2d9      	uxtb	r1, r3
 8001c88:	4b0b      	ldr	r3, [pc, #44]	; (8001cb8 <main+0xb8>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	461a      	mov	r2, r3
 8001c90:	4808      	ldr	r0, [pc, #32]	; (8001cb4 <main+0xb4>)
 8001c92:	f7ff fdad 	bl	80017f0 <Packet_Data_SendToServer>
	  value = getNH3TemperatureValue(&temperature);
 8001c96:	e7d8      	b.n	8001c4a <main+0x4a>
 8001c98:	200004e8 	.word	0x200004e8
 8001c9c:	20000a7c 	.word	0x20000a7c
 8001ca0:	20000b24 	.word	0x20000b24
 8001ca4:	200009f4 	.word	0x200009f4
 8001ca8:	20000a74 	.word	0x20000a74
 8001cac:	20000b70 	.word	0x20000b70
 8001cb0:	080087bc 	.word	0x080087bc
 8001cb4:	20000990 	.word	0x20000990
 8001cb8:	200000d4 	.word	0x200000d4

08001cbc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b0b0      	sub	sp, #192	; 0xc0
 8001cc0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001cc2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001cc6:	2244      	movs	r2, #68	; 0x44
 8001cc8:	2100      	movs	r1, #0
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f004 fbe8 	bl	80064a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001cd0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	601a      	str	r2, [r3, #0]
 8001cd8:	605a      	str	r2, [r3, #4]
 8001cda:	609a      	str	r2, [r3, #8]
 8001cdc:	60da      	str	r2, [r3, #12]
 8001cde:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ce0:	463b      	mov	r3, r7
 8001ce2:	2268      	movs	r2, #104	; 0x68
 8001ce4:	2100      	movs	r1, #0
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f004 fbda 	bl	80064a0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001cec:	230a      	movs	r3, #10
 8001cee:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001cf0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001cf4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001cf8:	2340      	movs	r3, #64	; 0x40
 8001cfa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001d04:	2300      	movs	r3, #0
 8001d06:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d0a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f001 f958 	bl	8002fc4 <HAL_RCC_OscConfig>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d001      	beq.n	8001d1e <SystemClock_Config+0x62>
  {
    Error_Handler();
 8001d1a:	f000 fa19 	bl	8002150 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d1e:	230f      	movs	r3, #15
 8001d20:	66bb      	str	r3, [r7, #104]	; 0x68
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001d22:	2301      	movs	r3, #1
 8001d24:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d26:	2300      	movs	r3, #0
 8001d28:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001d32:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001d36:	2100      	movs	r1, #0
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f001 fd63 	bl	8003804 <HAL_RCC_ClockConfig>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d001      	beq.n	8001d48 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001d44:	f000 fa04 	bl	8002150 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
 8001d48:	4b0f      	ldr	r3, [pc, #60]	; (8001d88 <SystemClock_Config+0xcc>)
 8001d4a:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_USART3;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	623b      	str	r3, [r7, #32]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001d50:	2300      	movs	r3, #0
 8001d52:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001d54:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d58:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d5a:	463b      	mov	r3, r7
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f001 ff55 	bl	8003c0c <HAL_RCCEx_PeriphCLKConfig>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d001      	beq.n	8001d6c <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8001d68:	f000 f9f2 	bl	8002150 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001d6c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001d70:	f001 f8d2 	bl	8002f18 <HAL_PWREx_ControlVoltageScaling>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d001      	beq.n	8001d7e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001d7a:	f000 f9e9 	bl	8002150 <Error_Handler>
  }
}
 8001d7e:	bf00      	nop
 8001d80:	37c0      	adds	r7, #192	; 0xc0
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	00020005 	.word	0x00020005

08001d8c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b092      	sub	sp, #72	; 0x48
 8001d90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001d92:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001d96:	2200      	movs	r2, #0
 8001d98:	601a      	str	r2, [r3, #0]
 8001d9a:	605a      	str	r2, [r3, #4]
 8001d9c:	609a      	str	r2, [r3, #8]
 8001d9e:	60da      	str	r2, [r3, #12]
 8001da0:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001da2:	2300      	movs	r3, #0
 8001da4:	633b      	str	r3, [r7, #48]	; 0x30
  RTC_AlarmTypeDef sAlarm = {0};
 8001da6:	1d3b      	adds	r3, r7, #4
 8001da8:	222c      	movs	r2, #44	; 0x2c
 8001daa:	2100      	movs	r1, #0
 8001dac:	4618      	mov	r0, r3
 8001dae:	f004 fb77 	bl	80064a0 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001db2:	4b3c      	ldr	r3, [pc, #240]	; (8001ea4 <MX_RTC_Init+0x118>)
 8001db4:	4a3c      	ldr	r2, [pc, #240]	; (8001ea8 <MX_RTC_Init+0x11c>)
 8001db6:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001db8:	4b3a      	ldr	r3, [pc, #232]	; (8001ea4 <MX_RTC_Init+0x118>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001dbe:	4b39      	ldr	r3, [pc, #228]	; (8001ea4 <MX_RTC_Init+0x118>)
 8001dc0:	227f      	movs	r2, #127	; 0x7f
 8001dc2:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001dc4:	4b37      	ldr	r3, [pc, #220]	; (8001ea4 <MX_RTC_Init+0x118>)
 8001dc6:	22ff      	movs	r2, #255	; 0xff
 8001dc8:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001dca:	4b36      	ldr	r3, [pc, #216]	; (8001ea4 <MX_RTC_Init+0x118>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001dd0:	4b34      	ldr	r3, [pc, #208]	; (8001ea4 <MX_RTC_Init+0x118>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001dd6:	4b33      	ldr	r3, [pc, #204]	; (8001ea4 <MX_RTC_Init+0x118>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001ddc:	4b31      	ldr	r3, [pc, #196]	; (8001ea4 <MX_RTC_Init+0x118>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001de2:	4830      	ldr	r0, [pc, #192]	; (8001ea4 <MX_RTC_Init+0x118>)
 8001de4:	f002 fa6c 	bl	80042c0 <HAL_RTC_Init>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d001      	beq.n	8001df2 <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8001dee:	f000 f9af 	bl	8002150 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8001df2:	2300      	movs	r3, #0
 8001df4:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  sTime.Minutes = 0;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  sTime.Seconds = 30;
 8001dfe:	231e      	movs	r3, #30
 8001e00:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001e04:	2300      	movs	r3, #0
 8001e06:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001e0c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001e10:	2200      	movs	r2, #0
 8001e12:	4619      	mov	r1, r3
 8001e14:	4823      	ldr	r0, [pc, #140]	; (8001ea4 <MX_RTC_Init+0x118>)
 8001e16:	f002 face 	bl	80043b6 <HAL_RTC_SetTime>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d001      	beq.n	8001e24 <MX_RTC_Init+0x98>
  {
    Error_Handler();
 8001e20:	f000 f996 	bl	8002150 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001e24:	2301      	movs	r3, #1
 8001e26:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sDate.Month = RTC_MONTH_JANUARY;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sDate.Date = 1;
 8001e30:	2301      	movs	r3, #1
 8001e32:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sDate.Year = 0;
 8001e36:	2300      	movs	r3, #0
 8001e38:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8001e3c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001e40:	2200      	movs	r2, #0
 8001e42:	4619      	mov	r1, r3
 8001e44:	4817      	ldr	r0, [pc, #92]	; (8001ea4 <MX_RTC_Init+0x118>)
 8001e46:	f002 fbaf 	bl	80045a8 <HAL_RTC_SetDate>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d001      	beq.n	8001e54 <MX_RTC_Init+0xc8>
  {
    Error_Handler();
 8001e50:	f000 f97e 	bl	8002150 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 1;
 8001e54:	2301      	movs	r3, #1
 8001e56:	713b      	strb	r3, [r7, #4]
  sAlarm.AlarmTime.Minutes = 1;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	717b      	strb	r3, [r7, #5]
  sAlarm.AlarmTime.Seconds = 10;
 8001e5c:	230a      	movs	r3, #10
 8001e5e:	71bb      	strb	r3, [r7, #6]
  sAlarm.AlarmTime.SubSeconds = 0;
 8001e60:	2300      	movs	r3, #0
 8001e62:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001e64:	2300      	movs	r3, #0
 8001e66:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY;
 8001e6c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001e70:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001e72:	2300      	movs	r3, #0
 8001e74:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001e76:	2300      	movs	r3, #0
 8001e78:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmDateWeekDay = 1;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sAlarm.Alarm = RTC_ALARM_A;
 8001e80:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e84:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8001e86:	1d3b      	adds	r3, r7, #4
 8001e88:	2200      	movs	r2, #0
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	4805      	ldr	r0, [pc, #20]	; (8001ea4 <MX_RTC_Init+0x118>)
 8001e8e:	f002 fc5f 	bl	8004750 <HAL_RTC_SetAlarm_IT>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d001      	beq.n	8001e9c <MX_RTC_Init+0x110>
  {
    Error_Handler();
 8001e98:	f000 f95a 	bl	8002150 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001e9c:	bf00      	nop
 8001e9e:	3748      	adds	r7, #72	; 0x48
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	20000afc 	.word	0x20000afc
 8001ea8:	40002800 	.word	0x40002800

08001eac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b088      	sub	sp, #32
 8001eb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001eb2:	f107 0310 	add.w	r3, r7, #16
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	601a      	str	r2, [r3, #0]
 8001eba:	605a      	str	r2, [r3, #4]
 8001ebc:	609a      	str	r2, [r3, #8]
 8001ebe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ec0:	1d3b      	adds	r3, r7, #4
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	601a      	str	r2, [r3, #0]
 8001ec6:	605a      	str	r2, [r3, #4]
 8001ec8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001eca:	4b1e      	ldr	r3, [pc, #120]	; (8001f44 <MX_TIM2_Init+0x98>)
 8001ecc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ed0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 15;
 8001ed2:	4b1c      	ldr	r3, [pc, #112]	; (8001f44 <MX_TIM2_Init+0x98>)
 8001ed4:	220f      	movs	r2, #15
 8001ed6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ed8:	4b1a      	ldr	r3, [pc, #104]	; (8001f44 <MX_TIM2_Init+0x98>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8001ede:	4b19      	ldr	r3, [pc, #100]	; (8001f44 <MX_TIM2_Init+0x98>)
 8001ee0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001ee4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ee6:	4b17      	ldr	r3, [pc, #92]	; (8001f44 <MX_TIM2_Init+0x98>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001eec:	4b15      	ldr	r3, [pc, #84]	; (8001f44 <MX_TIM2_Init+0x98>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001ef2:	4814      	ldr	r0, [pc, #80]	; (8001f44 <MX_TIM2_Init+0x98>)
 8001ef4:	f002 fe8a 	bl	8004c0c <HAL_TIM_Base_Init>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d001      	beq.n	8001f02 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001efe:	f000 f927 	bl	8002150 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f06:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001f08:	f107 0310 	add.w	r3, r7, #16
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	480d      	ldr	r0, [pc, #52]	; (8001f44 <MX_TIM2_Init+0x98>)
 8001f10:	f003 f84f 	bl	8004fb2 <HAL_TIM_ConfigClockSource>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d001      	beq.n	8001f1e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001f1a:	f000 f919 	bl	8002150 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f22:	2300      	movs	r3, #0
 8001f24:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001f26:	1d3b      	adds	r3, r7, #4
 8001f28:	4619      	mov	r1, r3
 8001f2a:	4806      	ldr	r0, [pc, #24]	; (8001f44 <MX_TIM2_Init+0x98>)
 8001f2c:	f003 fa2a 	bl	8005384 <HAL_TIMEx_MasterConfigSynchronization>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d001      	beq.n	8001f3a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001f36:	f000 f90b 	bl	8002150 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001f3a:	bf00      	nop
 8001f3c:	3720      	adds	r7, #32
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	20000b24 	.word	0x20000b24

08001f48 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001f4c:	4b14      	ldr	r3, [pc, #80]	; (8001fa0 <MX_USART1_UART_Init+0x58>)
 8001f4e:	4a15      	ldr	r2, [pc, #84]	; (8001fa4 <MX_USART1_UART_Init+0x5c>)
 8001f50:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001f52:	4b13      	ldr	r3, [pc, #76]	; (8001fa0 <MX_USART1_UART_Init+0x58>)
 8001f54:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001f58:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001f5a:	4b11      	ldr	r3, [pc, #68]	; (8001fa0 <MX_USART1_UART_Init+0x58>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001f60:	4b0f      	ldr	r3, [pc, #60]	; (8001fa0 <MX_USART1_UART_Init+0x58>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001f66:	4b0e      	ldr	r3, [pc, #56]	; (8001fa0 <MX_USART1_UART_Init+0x58>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001f6c:	4b0c      	ldr	r3, [pc, #48]	; (8001fa0 <MX_USART1_UART_Init+0x58>)
 8001f6e:	220c      	movs	r2, #12
 8001f70:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f72:	4b0b      	ldr	r3, [pc, #44]	; (8001fa0 <MX_USART1_UART_Init+0x58>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f78:	4b09      	ldr	r3, [pc, #36]	; (8001fa0 <MX_USART1_UART_Init+0x58>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f7e:	4b08      	ldr	r3, [pc, #32]	; (8001fa0 <MX_USART1_UART_Init+0x58>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f84:	4b06      	ldr	r3, [pc, #24]	; (8001fa0 <MX_USART1_UART_Init+0x58>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001f8a:	4805      	ldr	r0, [pc, #20]	; (8001fa0 <MX_USART1_UART_Init+0x58>)
 8001f8c:	f003 fa86 	bl	800549c <HAL_UART_Init>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d001      	beq.n	8001f9a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001f96:	f000 f8db 	bl	8002150 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001f9a:	bf00      	nop
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	20000a7c 	.word	0x20000a7c
 8001fa4:	40013800 	.word	0x40013800

08001fa8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001fac:	4b14      	ldr	r3, [pc, #80]	; (8002000 <MX_USART3_UART_Init+0x58>)
 8001fae:	4a15      	ldr	r2, [pc, #84]	; (8002004 <MX_USART3_UART_Init+0x5c>)
 8001fb0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001fb2:	4b13      	ldr	r3, [pc, #76]	; (8002000 <MX_USART3_UART_Init+0x58>)
 8001fb4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001fb8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001fba:	4b11      	ldr	r3, [pc, #68]	; (8002000 <MX_USART3_UART_Init+0x58>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001fc0:	4b0f      	ldr	r3, [pc, #60]	; (8002000 <MX_USART3_UART_Init+0x58>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001fc6:	4b0e      	ldr	r3, [pc, #56]	; (8002000 <MX_USART3_UART_Init+0x58>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001fcc:	4b0c      	ldr	r3, [pc, #48]	; (8002000 <MX_USART3_UART_Init+0x58>)
 8001fce:	220c      	movs	r2, #12
 8001fd0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fd2:	4b0b      	ldr	r3, [pc, #44]	; (8002000 <MX_USART3_UART_Init+0x58>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fd8:	4b09      	ldr	r3, [pc, #36]	; (8002000 <MX_USART3_UART_Init+0x58>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001fde:	4b08      	ldr	r3, [pc, #32]	; (8002000 <MX_USART3_UART_Init+0x58>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001fe4:	4b06      	ldr	r3, [pc, #24]	; (8002000 <MX_USART3_UART_Init+0x58>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001fea:	4805      	ldr	r0, [pc, #20]	; (8002000 <MX_USART3_UART_Init+0x58>)
 8001fec:	f003 fa56 	bl	800549c <HAL_UART_Init>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d001      	beq.n	8001ffa <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001ff6:	f000 f8ab 	bl	8002150 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001ffa:	bf00      	nop
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	200009f4 	.word	0x200009f4
 8002004:	40004800 	.word	0x40004800

08002008 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b088      	sub	sp, #32
 800200c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800200e:	f107 030c 	add.w	r3, r7, #12
 8002012:	2200      	movs	r2, #0
 8002014:	601a      	str	r2, [r3, #0]
 8002016:	605a      	str	r2, [r3, #4]
 8002018:	609a      	str	r2, [r3, #8]
 800201a:	60da      	str	r2, [r3, #12]
 800201c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800201e:	4b32      	ldr	r3, [pc, #200]	; (80020e8 <MX_GPIO_Init+0xe0>)
 8002020:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002022:	4a31      	ldr	r2, [pc, #196]	; (80020e8 <MX_GPIO_Init+0xe0>)
 8002024:	f043 0304 	orr.w	r3, r3, #4
 8002028:	64d3      	str	r3, [r2, #76]	; 0x4c
 800202a:	4b2f      	ldr	r3, [pc, #188]	; (80020e8 <MX_GPIO_Init+0xe0>)
 800202c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800202e:	f003 0304 	and.w	r3, r3, #4
 8002032:	60bb      	str	r3, [r7, #8]
 8002034:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002036:	4b2c      	ldr	r3, [pc, #176]	; (80020e8 <MX_GPIO_Init+0xe0>)
 8002038:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800203a:	4a2b      	ldr	r2, [pc, #172]	; (80020e8 <MX_GPIO_Init+0xe0>)
 800203c:	f043 0302 	orr.w	r3, r3, #2
 8002040:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002042:	4b29      	ldr	r3, [pc, #164]	; (80020e8 <MX_GPIO_Init+0xe0>)
 8002044:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002046:	f003 0302 	and.w	r3, r3, #2
 800204a:	607b      	str	r3, [r7, #4]
 800204c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800204e:	4b26      	ldr	r3, [pc, #152]	; (80020e8 <MX_GPIO_Init+0xe0>)
 8002050:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002052:	4a25      	ldr	r2, [pc, #148]	; (80020e8 <MX_GPIO_Init+0xe0>)
 8002054:	f043 0301 	orr.w	r3, r3, #1
 8002058:	64d3      	str	r3, [r2, #76]	; 0x4c
 800205a:	4b23      	ldr	r3, [pc, #140]	; (80020e8 <MX_GPIO_Init+0xe0>)
 800205c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800205e:	f003 0301 	and.w	r3, r3, #1
 8002062:	603b      	str	r3, [r7, #0]
 8002064:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8002066:	2200      	movs	r2, #0
 8002068:	2108      	movs	r1, #8
 800206a:	4820      	ldr	r0, [pc, #128]	; (80020ec <MX_GPIO_Init+0xe4>)
 800206c:	f000 ff14 	bl	8002e98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_3, GPIO_PIN_RESET);
 8002070:	2200      	movs	r2, #0
 8002072:	2109      	movs	r1, #9
 8002074:	481e      	ldr	r0, [pc, #120]	; (80020f0 <MX_GPIO_Init+0xe8>)
 8002076:	f000 ff0f 	bl	8002e98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 800207a:	2200      	movs	r2, #0
 800207c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002080:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002084:	f000 ff08 	bl	8002e98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002088:	2308      	movs	r3, #8
 800208a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800208c:	2301      	movs	r3, #1
 800208e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002090:	2300      	movs	r3, #0
 8002092:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002094:	2300      	movs	r3, #0
 8002096:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002098:	f107 030c 	add.w	r3, r7, #12
 800209c:	4619      	mov	r1, r3
 800209e:	4813      	ldr	r0, [pc, #76]	; (80020ec <MX_GPIO_Init+0xe4>)
 80020a0:	f000 fd80 	bl	8002ba4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 80020a4:	2309      	movs	r3, #9
 80020a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020a8:	2301      	movs	r3, #1
 80020aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ac:	2300      	movs	r3, #0
 80020ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020b0:	2300      	movs	r3, #0
 80020b2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020b4:	f107 030c 	add.w	r3, r7, #12
 80020b8:	4619      	mov	r1, r3
 80020ba:	480d      	ldr	r0, [pc, #52]	; (80020f0 <MX_GPIO_Init+0xe8>)
 80020bc:	f000 fd72 	bl	8002ba4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80020c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80020c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020c6:	2301      	movs	r3, #1
 80020c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ca:	2300      	movs	r3, #0
 80020cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ce:	2300      	movs	r3, #0
 80020d0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020d2:	f107 030c 	add.w	r3, r7, #12
 80020d6:	4619      	mov	r1, r3
 80020d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020dc:	f000 fd62 	bl	8002ba4 <HAL_GPIO_Init>

}
 80020e0:	bf00      	nop
 80020e2:	3720      	adds	r7, #32
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	40021000 	.word	0x40021000
 80020ec:	48000800 	.word	0x48000800
 80020f0:	48000400 	.word	0x48000400

080020f4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a0e      	ldr	r2, [pc, #56]	; (800213c <HAL_UART_RxCpltCallback+0x48>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d115      	bne.n	8002132 <HAL_UART_RxCpltCallback+0x3e>
	{
		if(data != 0){
 8002106:	4b0e      	ldr	r3, [pc, #56]	; (8002140 <HAL_UART_RxCpltCallback+0x4c>)
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d011      	beq.n	8002132 <HAL_UART_RxCpltCallback+0x3e>
		buffer[indexBuffer] = data;
 800210e:	4b0d      	ldr	r3, [pc, #52]	; (8002144 <HAL_UART_RxCpltCallback+0x50>)
 8002110:	781b      	ldrb	r3, [r3, #0]
 8002112:	461a      	mov	r2, r3
 8002114:	4b0a      	ldr	r3, [pc, #40]	; (8002140 <HAL_UART_RxCpltCallback+0x4c>)
 8002116:	7819      	ldrb	r1, [r3, #0]
 8002118:	4b0b      	ldr	r3, [pc, #44]	; (8002148 <HAL_UART_RxCpltCallback+0x54>)
 800211a:	5499      	strb	r1, [r3, r2]
		indexBuffer++;
 800211c:	4b09      	ldr	r3, [pc, #36]	; (8002144 <HAL_UART_RxCpltCallback+0x50>)
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	3301      	adds	r3, #1
 8002122:	b2da      	uxtb	r2, r3
 8002124:	4b07      	ldr	r3, [pc, #28]	; (8002144 <HAL_UART_RxCpltCallback+0x50>)
 8002126:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart1, &data, 1);
 8002128:	2201      	movs	r2, #1
 800212a:	4905      	ldr	r1, [pc, #20]	; (8002140 <HAL_UART_RxCpltCallback+0x4c>)
 800212c:	4807      	ldr	r0, [pc, #28]	; (800214c <HAL_UART_RxCpltCallback+0x58>)
 800212e:	f003 fa97 	bl	8005660 <HAL_UART_Receive_IT>
		}
	}
}
 8002132:	bf00      	nop
 8002134:	3708      	adds	r7, #8
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	40013800 	.word	0x40013800
 8002140:	200004e8 	.word	0x200004e8
 8002144:	200004e9 	.word	0x200004e9
 8002148:	20000704 	.word	0x20000704
 800214c:	20000a7c 	.word	0x20000a7c

08002150 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002150:	b480      	push	{r7}
 8002152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002154:	bf00      	nop
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr
	...

08002160 <wait_receivedata>:
		data[i] = data[length - 1 - i];
		data[length - 1 - i] = bTmp;
	}
}

void wait_receivedata(uint16_t TIMEOUT_WAIT_RX_MS){
 8002160:	b580      	push	{r7, lr}
 8002162:	b084      	sub	sp, #16
 8002164:	af00      	add	r7, sp, #0
 8002166:	4603      	mov	r3, r0
 8002168:	80fb      	strh	r3, [r7, #6]
	 uint8_t last_indexBuffer = 0;
 800216a:	2300      	movs	r3, #0
 800216c:	73fb      	strb	r3, [r7, #15]
	 uint16_t timeCount = 0;
 800216e:	2300      	movs	r3, #0
 8002170:	81bb      	strh	r3, [r7, #12]
	 indexBuffer = 0;
 8002172:	4b11      	ldr	r3, [pc, #68]	; (80021b8 <wait_receivedata+0x58>)
 8002174:	2200      	movs	r2, #0
 8002176:	701a      	strb	r2, [r3, #0]
	while(indexBuffer == 0 && timeCount < TIMEOUT_WAIT_RX_MS)// break khi có data, timeout là 200 ms
 8002178:	e005      	b.n	8002186 <wait_receivedata+0x26>
	{
		 HAL_Delay(1);// 1 ms
 800217a:	2001      	movs	r0, #1
 800217c:	f000 fb9e 	bl	80028bc <HAL_Delay>
		 timeCount++;
 8002180:	89bb      	ldrh	r3, [r7, #12]
 8002182:	3301      	adds	r3, #1
 8002184:	81bb      	strh	r3, [r7, #12]
	while(indexBuffer == 0 && timeCount < TIMEOUT_WAIT_RX_MS)// break khi có data, timeout là 200 ms
 8002186:	4b0c      	ldr	r3, [pc, #48]	; (80021b8 <wait_receivedata+0x58>)
 8002188:	781b      	ldrb	r3, [r3, #0]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d10a      	bne.n	80021a4 <wait_receivedata+0x44>
 800218e:	89ba      	ldrh	r2, [r7, #12]
 8002190:	88fb      	ldrh	r3, [r7, #6]
 8002192:	429a      	cmp	r2, r3
 8002194:	d3f1      	bcc.n	800217a <wait_receivedata+0x1a>
	}
	while( last_indexBuffer != indexBuffer) //break khi không còn nhận ở ngắt, toàn bộ rx đã nhận
 8002196:	e005      	b.n	80021a4 <wait_receivedata+0x44>
	{
		 last_indexBuffer = indexBuffer;
 8002198:	4b07      	ldr	r3, [pc, #28]	; (80021b8 <wait_receivedata+0x58>)
 800219a:	781b      	ldrb	r3, [r3, #0]
 800219c:	73fb      	strb	r3, [r7, #15]
		 HAL_Delay(1);
 800219e:	2001      	movs	r0, #1
 80021a0:	f000 fb8c 	bl	80028bc <HAL_Delay>
	while( last_indexBuffer != indexBuffer) //break khi không còn nhận ở ngắt, toàn bộ rx đã nhận
 80021a4:	4b04      	ldr	r3, [pc, #16]	; (80021b8 <wait_receivedata+0x58>)
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	7bfa      	ldrb	r2, [r7, #15]
 80021aa:	429a      	cmp	r2, r3
 80021ac:	d1f4      	bne.n	8002198 <wait_receivedata+0x38>
	}
}
 80021ae:	bf00      	nop
 80021b0:	3710      	adds	r7, #16
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	200004e9 	.word	0x200004e9

080021bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021bc:	b480      	push	{r7}
 80021be:	b083      	sub	sp, #12
 80021c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021c2:	4b0f      	ldr	r3, [pc, #60]	; (8002200 <HAL_MspInit+0x44>)
 80021c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021c6:	4a0e      	ldr	r2, [pc, #56]	; (8002200 <HAL_MspInit+0x44>)
 80021c8:	f043 0301 	orr.w	r3, r3, #1
 80021cc:	6613      	str	r3, [r2, #96]	; 0x60
 80021ce:	4b0c      	ldr	r3, [pc, #48]	; (8002200 <HAL_MspInit+0x44>)
 80021d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021d2:	f003 0301 	and.w	r3, r3, #1
 80021d6:	607b      	str	r3, [r7, #4]
 80021d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021da:	4b09      	ldr	r3, [pc, #36]	; (8002200 <HAL_MspInit+0x44>)
 80021dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021de:	4a08      	ldr	r2, [pc, #32]	; (8002200 <HAL_MspInit+0x44>)
 80021e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021e4:	6593      	str	r3, [r2, #88]	; 0x58
 80021e6:	4b06      	ldr	r3, [pc, #24]	; (8002200 <HAL_MspInit+0x44>)
 80021e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ee:	603b      	str	r3, [r7, #0]
 80021f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021f2:	bf00      	nop
 80021f4:	370c      	adds	r7, #12
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr
 80021fe:	bf00      	nop
 8002200:	40021000 	.word	0x40021000

08002204 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a0b      	ldr	r2, [pc, #44]	; (8002240 <HAL_RTC_MspInit+0x3c>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d10f      	bne.n	8002236 <HAL_RTC_MspInit+0x32>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002216:	4b0b      	ldr	r3, [pc, #44]	; (8002244 <HAL_RTC_MspInit+0x40>)
 8002218:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800221c:	4a09      	ldr	r2, [pc, #36]	; (8002244 <HAL_RTC_MspInit+0x40>)
 800221e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002222:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8002226:	2200      	movs	r2, #0
 8002228:	2100      	movs	r1, #0
 800222a:	2029      	movs	r0, #41	; 0x29
 800222c:	f000 fc43 	bl	8002ab6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8002230:	2029      	movs	r0, #41	; 0x29
 8002232:	f000 fc5c 	bl	8002aee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002236:	bf00      	nop
 8002238:	3708      	adds	r7, #8
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	40002800 	.word	0x40002800
 8002244:	40021000 	.word	0x40021000

08002248 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b084      	sub	sp, #16
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002258:	d113      	bne.n	8002282 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800225a:	4b0c      	ldr	r3, [pc, #48]	; (800228c <HAL_TIM_Base_MspInit+0x44>)
 800225c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800225e:	4a0b      	ldr	r2, [pc, #44]	; (800228c <HAL_TIM_Base_MspInit+0x44>)
 8002260:	f043 0301 	orr.w	r3, r3, #1
 8002264:	6593      	str	r3, [r2, #88]	; 0x58
 8002266:	4b09      	ldr	r3, [pc, #36]	; (800228c <HAL_TIM_Base_MspInit+0x44>)
 8002268:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800226a:	f003 0301 	and.w	r3, r3, #1
 800226e:	60fb      	str	r3, [r7, #12]
 8002270:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002272:	2200      	movs	r2, #0
 8002274:	2100      	movs	r1, #0
 8002276:	201c      	movs	r0, #28
 8002278:	f000 fc1d 	bl	8002ab6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800227c:	201c      	movs	r0, #28
 800227e:	f000 fc36 	bl	8002aee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002282:	bf00      	nop
 8002284:	3710      	adds	r7, #16
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	40021000 	.word	0x40021000

08002290 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b08c      	sub	sp, #48	; 0x30
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002298:	f107 031c 	add.w	r3, r7, #28
 800229c:	2200      	movs	r2, #0
 800229e:	601a      	str	r2, [r3, #0]
 80022a0:	605a      	str	r2, [r3, #4]
 80022a2:	609a      	str	r2, [r3, #8]
 80022a4:	60da      	str	r2, [r3, #12]
 80022a6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a37      	ldr	r2, [pc, #220]	; (800238c <HAL_UART_MspInit+0xfc>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d132      	bne.n	8002318 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80022b2:	4b37      	ldr	r3, [pc, #220]	; (8002390 <HAL_UART_MspInit+0x100>)
 80022b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022b6:	4a36      	ldr	r2, [pc, #216]	; (8002390 <HAL_UART_MspInit+0x100>)
 80022b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022bc:	6613      	str	r3, [r2, #96]	; 0x60
 80022be:	4b34      	ldr	r3, [pc, #208]	; (8002390 <HAL_UART_MspInit+0x100>)
 80022c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022c6:	61bb      	str	r3, [r7, #24]
 80022c8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022ca:	4b31      	ldr	r3, [pc, #196]	; (8002390 <HAL_UART_MspInit+0x100>)
 80022cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022ce:	4a30      	ldr	r2, [pc, #192]	; (8002390 <HAL_UART_MspInit+0x100>)
 80022d0:	f043 0301 	orr.w	r3, r3, #1
 80022d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022d6:	4b2e      	ldr	r3, [pc, #184]	; (8002390 <HAL_UART_MspInit+0x100>)
 80022d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022da:	f003 0301 	and.w	r3, r3, #1
 80022de:	617b      	str	r3, [r7, #20]
 80022e0:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80022e2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80022e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022e8:	2302      	movs	r3, #2
 80022ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ec:	2300      	movs	r3, #0
 80022ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022f0:	2303      	movs	r3, #3
 80022f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80022f4:	2307      	movs	r3, #7
 80022f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022f8:	f107 031c 	add.w	r3, r7, #28
 80022fc:	4619      	mov	r1, r3
 80022fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002302:	f000 fc4f 	bl	8002ba4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002306:	2200      	movs	r2, #0
 8002308:	2100      	movs	r1, #0
 800230a:	2025      	movs	r0, #37	; 0x25
 800230c:	f000 fbd3 	bl	8002ab6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002310:	2025      	movs	r0, #37	; 0x25
 8002312:	f000 fbec 	bl	8002aee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002316:	e035      	b.n	8002384 <HAL_UART_MspInit+0xf4>
  else if(huart->Instance==USART3)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a1d      	ldr	r2, [pc, #116]	; (8002394 <HAL_UART_MspInit+0x104>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d130      	bne.n	8002384 <HAL_UART_MspInit+0xf4>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002322:	4b1b      	ldr	r3, [pc, #108]	; (8002390 <HAL_UART_MspInit+0x100>)
 8002324:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002326:	4a1a      	ldr	r2, [pc, #104]	; (8002390 <HAL_UART_MspInit+0x100>)
 8002328:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800232c:	6593      	str	r3, [r2, #88]	; 0x58
 800232e:	4b18      	ldr	r3, [pc, #96]	; (8002390 <HAL_UART_MspInit+0x100>)
 8002330:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002332:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002336:	613b      	str	r3, [r7, #16]
 8002338:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800233a:	4b15      	ldr	r3, [pc, #84]	; (8002390 <HAL_UART_MspInit+0x100>)
 800233c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800233e:	4a14      	ldr	r2, [pc, #80]	; (8002390 <HAL_UART_MspInit+0x100>)
 8002340:	f043 0302 	orr.w	r3, r3, #2
 8002344:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002346:	4b12      	ldr	r3, [pc, #72]	; (8002390 <HAL_UART_MspInit+0x100>)
 8002348:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800234a:	f003 0302 	and.w	r3, r3, #2
 800234e:	60fb      	str	r3, [r7, #12]
 8002350:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002352:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002356:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002358:	2302      	movs	r3, #2
 800235a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800235c:	2300      	movs	r3, #0
 800235e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002360:	2303      	movs	r3, #3
 8002362:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002364:	2307      	movs	r3, #7
 8002366:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002368:	f107 031c 	add.w	r3, r7, #28
 800236c:	4619      	mov	r1, r3
 800236e:	480a      	ldr	r0, [pc, #40]	; (8002398 <HAL_UART_MspInit+0x108>)
 8002370:	f000 fc18 	bl	8002ba4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002374:	2200      	movs	r2, #0
 8002376:	2100      	movs	r1, #0
 8002378:	2027      	movs	r0, #39	; 0x27
 800237a:	f000 fb9c 	bl	8002ab6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800237e:	2027      	movs	r0, #39	; 0x27
 8002380:	f000 fbb5 	bl	8002aee <HAL_NVIC_EnableIRQ>
}
 8002384:	bf00      	nop
 8002386:	3730      	adds	r7, #48	; 0x30
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}
 800238c:	40013800 	.word	0x40013800
 8002390:	40021000 	.word	0x40021000
 8002394:	40004800 	.word	0x40004800
 8002398:	48000400 	.word	0x48000400

0800239c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800239c:	b480      	push	{r7}
 800239e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80023a0:	bf00      	nop
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr

080023aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023aa:	b480      	push	{r7}
 80023ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023ae:	e7fe      	b.n	80023ae <HardFault_Handler+0x4>

080023b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023b0:	b480      	push	{r7}
 80023b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023b4:	e7fe      	b.n	80023b4 <MemManage_Handler+0x4>

080023b6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023b6:	b480      	push	{r7}
 80023b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023ba:	e7fe      	b.n	80023ba <BusFault_Handler+0x4>

080023bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023bc:	b480      	push	{r7}
 80023be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023c0:	e7fe      	b.n	80023c0 <UsageFault_Handler+0x4>

080023c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023c2:	b480      	push	{r7}
 80023c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023c6:	bf00      	nop
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr

080023d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023d0:	b480      	push	{r7}
 80023d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023d4:	bf00      	nop
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr

080023de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023de:	b480      	push	{r7}
 80023e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023e2:	bf00      	nop
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr

080023ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023f0:	f000 fa44 	bl	800287c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023f4:	bf00      	nop
 80023f6:	bd80      	pop	{r7, pc}

080023f8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80023fc:	4802      	ldr	r0, [pc, #8]	; (8002408 <TIM2_IRQHandler+0x10>)
 80023fe:	f002 fcb9 	bl	8004d74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002402:	bf00      	nop
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	20000b24 	.word	0x20000b24

0800240c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002410:	4802      	ldr	r0, [pc, #8]	; (800241c <USART1_IRQHandler+0x10>)
 8002412:	f003 f9c7 	bl	80057a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002416:	bf00      	nop
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	20000a7c 	.word	0x20000a7c

08002420 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	Uart_isr (&huart3);
 8002424:	4803      	ldr	r0, [pc, #12]	; (8002434 <USART3_IRQHandler+0x14>)
 8002426:	f7ff fb8b 	bl	8001b40 <Uart_isr>
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800242a:	4802      	ldr	r0, [pc, #8]	; (8002434 <USART3_IRQHandler+0x14>)
 800242c:	f003 f9ba 	bl	80057a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002430:	bf00      	nop
 8002432:	bd80      	pop	{r7, pc}
 8002434:	200009f4 	.word	0x200009f4

08002438 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 18.
  */
void RTC_Alarm_IRQHandler(void)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 800243c:	4802      	ldr	r0, [pc, #8]	; (8002448 <RTC_Alarm_IRQHandler+0x10>)
 800243e:	f002 fac3 	bl	80049c8 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8002442:	bf00      	nop
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	20000afc 	.word	0x20000afc

0800244c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b086      	sub	sp, #24
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002454:	4a14      	ldr	r2, [pc, #80]	; (80024a8 <_sbrk+0x5c>)
 8002456:	4b15      	ldr	r3, [pc, #84]	; (80024ac <_sbrk+0x60>)
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002460:	4b13      	ldr	r3, [pc, #76]	; (80024b0 <_sbrk+0x64>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d102      	bne.n	800246e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002468:	4b11      	ldr	r3, [pc, #68]	; (80024b0 <_sbrk+0x64>)
 800246a:	4a12      	ldr	r2, [pc, #72]	; (80024b4 <_sbrk+0x68>)
 800246c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800246e:	4b10      	ldr	r3, [pc, #64]	; (80024b0 <_sbrk+0x64>)
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	4413      	add	r3, r2
 8002476:	693a      	ldr	r2, [r7, #16]
 8002478:	429a      	cmp	r2, r3
 800247a:	d207      	bcs.n	800248c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800247c:	f003 ffb2 	bl	80063e4 <__errno>
 8002480:	4602      	mov	r2, r0
 8002482:	230c      	movs	r3, #12
 8002484:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002486:	f04f 33ff 	mov.w	r3, #4294967295
 800248a:	e009      	b.n	80024a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800248c:	4b08      	ldr	r3, [pc, #32]	; (80024b0 <_sbrk+0x64>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002492:	4b07      	ldr	r3, [pc, #28]	; (80024b0 <_sbrk+0x64>)
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	4413      	add	r3, r2
 800249a:	4a05      	ldr	r2, [pc, #20]	; (80024b0 <_sbrk+0x64>)
 800249c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800249e:	68fb      	ldr	r3, [r7, #12]
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	3718      	adds	r7, #24
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}
 80024a8:	20028000 	.word	0x20028000
 80024ac:	00000400 	.word	0x00000400
 80024b0:	200004ec 	.word	0x200004ec
 80024b4:	20000bf8 	.word	0x20000bf8

080024b8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80024b8:	b480      	push	{r7}
 80024ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80024bc:	4b17      	ldr	r3, [pc, #92]	; (800251c <SystemInit+0x64>)
 80024be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024c2:	4a16      	ldr	r2, [pc, #88]	; (800251c <SystemInit+0x64>)
 80024c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80024c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80024cc:	4b14      	ldr	r3, [pc, #80]	; (8002520 <SystemInit+0x68>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a13      	ldr	r2, [pc, #76]	; (8002520 <SystemInit+0x68>)
 80024d2:	f043 0301 	orr.w	r3, r3, #1
 80024d6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80024d8:	4b11      	ldr	r3, [pc, #68]	; (8002520 <SystemInit+0x68>)
 80024da:	2200      	movs	r2, #0
 80024dc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80024de:	4b10      	ldr	r3, [pc, #64]	; (8002520 <SystemInit+0x68>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a0f      	ldr	r2, [pc, #60]	; (8002520 <SystemInit+0x68>)
 80024e4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80024e8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80024ec:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80024ee:	4b0c      	ldr	r3, [pc, #48]	; (8002520 <SystemInit+0x68>)
 80024f0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80024f4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80024f6:	4b0a      	ldr	r3, [pc, #40]	; (8002520 <SystemInit+0x68>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a09      	ldr	r2, [pc, #36]	; (8002520 <SystemInit+0x68>)
 80024fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002500:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8002502:	4b07      	ldr	r3, [pc, #28]	; (8002520 <SystemInit+0x68>)
 8002504:	2200      	movs	r2, #0
 8002506:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002508:	4b04      	ldr	r3, [pc, #16]	; (800251c <SystemInit+0x64>)
 800250a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800250e:	609a      	str	r2, [r3, #8]
#endif
}
 8002510:	bf00      	nop
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr
 800251a:	bf00      	nop
 800251c:	e000ed00 	.word	0xe000ed00
 8002520:	40021000 	.word	0x40021000

08002524 <HAL_TIM_PeriodElapsedCallback>:
	  	*(p_time+22) = '\r';
		*(p_time+23) = '\n';
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b082      	sub	sp, #8
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002534:	d133      	bne.n	800259e <HAL_TIM_PeriodElapsedCallback+0x7a>
	{
		  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_3);
 8002536:	2108      	movs	r1, #8
 8002538:	481b      	ldr	r0, [pc, #108]	; (80025a8 <HAL_TIM_PeriodElapsedCallback+0x84>)
 800253a:	f000 fcc5 	bl	8002ec8 <HAL_GPIO_TogglePin>
		  sTimer_10s.vr_count ++;
 800253e:	4b1b      	ldr	r3, [pc, #108]	; (80025ac <HAL_TIM_PeriodElapsedCallback+0x88>)
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	3301      	adds	r3, #1
 8002544:	4a19      	ldr	r2, [pc, #100]	; (80025ac <HAL_TIM_PeriodElapsedCallback+0x88>)
 8002546:	6053      	str	r3, [r2, #4]
		  sTimer_100ms.vr_count ++;
 8002548:	4b19      	ldr	r3, [pc, #100]	; (80025b0 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	3301      	adds	r3, #1
 800254e:	4a18      	ldr	r2, [pc, #96]	; (80025b0 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8002550:	6053      	str	r3, [r2, #4]
		  sTimer_1000ms.vr_count ++;
 8002552:	4b18      	ldr	r3, [pc, #96]	; (80025b4 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	3301      	adds	r3, #1
 8002558:	4a16      	ldr	r2, [pc, #88]	; (80025b4 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800255a:	6053      	str	r3, [r2, #4]

		  if(sTimer_10s.vr_count == time_sendServer){
 800255c:	4b13      	ldr	r3, [pc, #76]	; (80025ac <HAL_TIM_PeriodElapsedCallback+0x88>)
 800255e:	685a      	ldr	r2, [r3, #4]
 8002560:	4b15      	ldr	r3, [pc, #84]	; (80025b8 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	429a      	cmp	r2, r3
 8002566:	d105      	bne.n	8002574 <HAL_TIM_PeriodElapsedCallback+0x50>
			  sTimer_10s.flag_timer = 1; // timer du 10s thi gui du lieu len server
 8002568:	4b10      	ldr	r3, [pc, #64]	; (80025ac <HAL_TIM_PeriodElapsedCallback+0x88>)
 800256a:	2201      	movs	r2, #1
 800256c:	701a      	strb	r2, [r3, #0]
			  sTimer_10s.vr_count = 0;
 800256e:	4b0f      	ldr	r3, [pc, #60]	; (80025ac <HAL_TIM_PeriodElapsedCallback+0x88>)
 8002570:	2200      	movs	r2, #0
 8002572:	605a      	str	r2, [r3, #4]
		  }
		  if(100 == sTimer_100ms.vr_count){
 8002574:	4b0e      	ldr	r3, [pc, #56]	; (80025b0 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	2b64      	cmp	r3, #100	; 0x64
 800257a:	d105      	bne.n	8002588 <HAL_TIM_PeriodElapsedCallback+0x64>
			  sTimer_100ms.flag_timer = 1; // timer du 100ms
 800257c:	4b0c      	ldr	r3, [pc, #48]	; (80025b0 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800257e:	2201      	movs	r2, #1
 8002580:	701a      	strb	r2, [r3, #0]
			  sTimer_100ms.vr_count = 0;
 8002582:	4b0b      	ldr	r3, [pc, #44]	; (80025b0 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8002584:	2200      	movs	r2, #0
 8002586:	605a      	str	r2, [r3, #4]
		  }
		  if(1000 == sTimer_1000ms.vr_count){
 8002588:	4b0a      	ldr	r3, [pc, #40]	; (80025b4 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002590:	d105      	bne.n	800259e <HAL_TIM_PeriodElapsedCallback+0x7a>
			  sTimer_1000ms.flag_timer = 1; // timer du 1000ms
 8002592:	4b08      	ldr	r3, [pc, #32]	; (80025b4 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8002594:	2201      	movs	r2, #1
 8002596:	701a      	strb	r2, [r3, #0]
			  sTimer_1000ms.vr_count = 0;
 8002598:	4b06      	ldr	r3, [pc, #24]	; (80025b4 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800259a:	2200      	movs	r2, #0
 800259c:	605a      	str	r2, [r3, #4]
		  }
	}
}
 800259e:	bf00      	nop
 80025a0:	3708      	adds	r7, #8
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	48000800 	.word	0x48000800
 80025ac:	20000bb4 	.word	0x20000bb4
 80025b0:	20000be4 	.word	0x20000be4
 80025b4:	20000bdc 	.word	0x20000bdc
 80025b8:	200000dc 	.word	0x200000dc

080025bc <set_alarm_A>:


void set_alarm_A(uint8_t hour,uint8_t minute,uint8_t second)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b082      	sub	sp, #8
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	4603      	mov	r3, r0
 80025c4:	71fb      	strb	r3, [r7, #7]
 80025c6:	460b      	mov	r3, r1
 80025c8:	71bb      	strb	r3, [r7, #6]
 80025ca:	4613      	mov	r3, r2
 80025cc:	717b      	strb	r3, [r7, #5]
	nAlarm.AlarmTime.Hours = hour;;
 80025ce:	4a19      	ldr	r2, [pc, #100]	; (8002634 <set_alarm_A+0x78>)
 80025d0:	79fb      	ldrb	r3, [r7, #7]
 80025d2:	7013      	strb	r3, [r2, #0]
	nAlarm.AlarmTime.Minutes = minute;
 80025d4:	4a17      	ldr	r2, [pc, #92]	; (8002634 <set_alarm_A+0x78>)
 80025d6:	79bb      	ldrb	r3, [r7, #6]
 80025d8:	7053      	strb	r3, [r2, #1]
	nAlarm.AlarmTime.Seconds = second;
 80025da:	4a16      	ldr	r2, [pc, #88]	; (8002634 <set_alarm_A+0x78>)
 80025dc:	797b      	ldrb	r3, [r7, #5]
 80025de:	7093      	strb	r3, [r2, #2]
	nAlarm.AlarmTime.SubSeconds = 0;
 80025e0:	4b14      	ldr	r3, [pc, #80]	; (8002634 <set_alarm_A+0x78>)
 80025e2:	2200      	movs	r2, #0
 80025e4:	605a      	str	r2, [r3, #4]
	nAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80025e6:	4b13      	ldr	r3, [pc, #76]	; (8002634 <set_alarm_A+0x78>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	60da      	str	r2, [r3, #12]
	nAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80025ec:	4b11      	ldr	r3, [pc, #68]	; (8002634 <set_alarm_A+0x78>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	611a      	str	r2, [r3, #16]
	nAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY;
 80025f2:	4b10      	ldr	r3, [pc, #64]	; (8002634 <set_alarm_A+0x78>)
 80025f4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80025f8:	615a      	str	r2, [r3, #20]
	nAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80025fa:	4b0e      	ldr	r3, [pc, #56]	; (8002634 <set_alarm_A+0x78>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	61da      	str	r2, [r3, #28]
	nAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8002600:	4b0c      	ldr	r3, [pc, #48]	; (8002634 <set_alarm_A+0x78>)
 8002602:	2200      	movs	r2, #0
 8002604:	621a      	str	r2, [r3, #32]
	nAlarm.AlarmDateWeekDay = 1;
 8002606:	4b0b      	ldr	r3, [pc, #44]	; (8002634 <set_alarm_A+0x78>)
 8002608:	2201      	movs	r2, #1
 800260a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	nAlarm.Alarm = RTC_ALARM_A;
 800260e:	4b09      	ldr	r3, [pc, #36]	; (8002634 <set_alarm_A+0x78>)
 8002610:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002614:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RTC_SetAlarm_IT(&hrtc, &nAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8002616:	2200      	movs	r2, #0
 8002618:	4906      	ldr	r1, [pc, #24]	; (8002634 <set_alarm_A+0x78>)
 800261a:	4807      	ldr	r0, [pc, #28]	; (8002638 <set_alarm_A+0x7c>)
 800261c:	f002 f898 	bl	8004750 <HAL_RTC_SetAlarm_IT>
 8002620:	4603      	mov	r3, r0
 8002622:	2b00      	cmp	r3, #0
 8002624:	d001      	beq.n	800262a <set_alarm_A+0x6e>
  {
    Error_Handler();
 8002626:	f7ff fd93 	bl	8002150 <Error_Handler>
  }
}
 800262a:	bf00      	nop
 800262c:	3708      	adds	r7, #8
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	20000b88 	.word	0x20000b88
 8002638:	20000afc 	.word	0x20000afc

0800263c <get_rtc_data>:

void get_rtc_data(void)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	af00      	add	r7, sp, #0
	HAL_RTC_GetTime(&hrtc,&sTime,RTC_FORMAT_BIN);
 8002640:	2200      	movs	r2, #0
 8002642:	4905      	ldr	r1, [pc, #20]	; (8002658 <get_rtc_data+0x1c>)
 8002644:	4805      	ldr	r0, [pc, #20]	; (800265c <get_rtc_data+0x20>)
 8002646:	f001 ff53 	bl	80044f0 <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc,&sDate,RTC_FORMAT_BIN);
 800264a:	2200      	movs	r2, #0
 800264c:	4904      	ldr	r1, [pc, #16]	; (8002660 <get_rtc_data+0x24>)
 800264e:	4803      	ldr	r0, [pc, #12]	; (800265c <get_rtc_data+0x20>)
 8002650:	f002 f831 	bl	80046b6 <HAL_RTC_GetDate>
}
 8002654:	bf00      	nop
 8002656:	bd80      	pop	{r7, pc}
 8002658:	20000b74 	.word	0x20000b74
 800265c:	20000afc 	.word	0x20000afc
 8002660:	20000bc0 	.word	0x20000bc0

08002664 <Set_Frequency_Send_Data>:
	get_rtc_data();
	convertTime(output, 10, num_check);
}

void Set_Frequency_Send_Data(uint8_t frequency)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b084      	sub	sp, #16
 8002668:	af00      	add	r7, sp, #0
 800266a:	4603      	mov	r3, r0
 800266c:	71fb      	strb	r3, [r7, #7]
	uint32_t now_time;
	uint32_t alarm_time;
	get_rtc_data();
 800266e:	f7ff ffe5 	bl	800263c <get_rtc_data>
    time_data.second = sTime.Seconds;
 8002672:	4b33      	ldr	r3, [pc, #204]	; (8002740 <Set_Frequency_Send_Data+0xdc>)
 8002674:	789a      	ldrb	r2, [r3, #2]
 8002676:	4b33      	ldr	r3, [pc, #204]	; (8002744 <Set_Frequency_Send_Data+0xe0>)
 8002678:	709a      	strb	r2, [r3, #2]
    time_data.minute = sTime.Minutes;
 800267a:	4b31      	ldr	r3, [pc, #196]	; (8002740 <Set_Frequency_Send_Data+0xdc>)
 800267c:	785a      	ldrb	r2, [r3, #1]
 800267e:	4b31      	ldr	r3, [pc, #196]	; (8002744 <Set_Frequency_Send_Data+0xe0>)
 8002680:	705a      	strb	r2, [r3, #1]
    time_data.hour = sTime.Hours;
 8002682:	4b2f      	ldr	r3, [pc, #188]	; (8002740 <Set_Frequency_Send_Data+0xdc>)
 8002684:	781a      	ldrb	r2, [r3, #0]
 8002686:	4b2f      	ldr	r3, [pc, #188]	; (8002744 <Set_Frequency_Send_Data+0xe0>)
 8002688:	701a      	strb	r2, [r3, #0]
	now_time = time_data.hour*3600 + time_data.minute*60 + time_data.second;
 800268a:	4b2e      	ldr	r3, [pc, #184]	; (8002744 <Set_Frequency_Send_Data+0xe0>)
 800268c:	781b      	ldrb	r3, [r3, #0]
 800268e:	461a      	mov	r2, r3
 8002690:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8002694:	fb03 f202 	mul.w	r2, r3, r2
 8002698:	4b2a      	ldr	r3, [pc, #168]	; (8002744 <Set_Frequency_Send_Data+0xe0>)
 800269a:	785b      	ldrb	r3, [r3, #1]
 800269c:	4619      	mov	r1, r3
 800269e:	460b      	mov	r3, r1
 80026a0:	011b      	lsls	r3, r3, #4
 80026a2:	1a5b      	subs	r3, r3, r1
 80026a4:	009b      	lsls	r3, r3, #2
 80026a6:	4413      	add	r3, r2
 80026a8:	4a26      	ldr	r2, [pc, #152]	; (8002744 <Set_Frequency_Send_Data+0xe0>)
 80026aa:	7892      	ldrb	r2, [r2, #2]
 80026ac:	4413      	add	r3, r2
 80026ae:	60bb      	str	r3, [r7, #8]
	alarm_time = now_time + frequency;
 80026b0:	79fb      	ldrb	r3, [r7, #7]
 80026b2:	68ba      	ldr	r2, [r7, #8]
 80026b4:	4413      	add	r3, r2
 80026b6:	60fb      	str	r3, [r7, #12]
	if(alarm_time > TIME_24_HOUR)
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	4a23      	ldr	r2, [pc, #140]	; (8002748 <Set_Frequency_Send_Data+0xe4>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d905      	bls.n	80026cc <Set_Frequency_Send_Data+0x68>
	{
		alarm_time = alarm_time - TIME_24_HOUR;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	f5a3 33a8 	sub.w	r3, r3, #86016	; 0x15000
 80026c6:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80026ca:	60fb      	str	r3, [r7, #12]
	}
	alarm_hour = alarm_time/3600;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	4a1f      	ldr	r2, [pc, #124]	; (800274c <Set_Frequency_Send_Data+0xe8>)
 80026d0:	fba2 2303 	umull	r2, r3, r2, r3
 80026d4:	0adb      	lsrs	r3, r3, #11
 80026d6:	b2da      	uxtb	r2, r3
 80026d8:	4b1d      	ldr	r3, [pc, #116]	; (8002750 <Set_Frequency_Send_Data+0xec>)
 80026da:	701a      	strb	r2, [r3, #0]
	alarm_minute = (alarm_time - alarm_hour*3600)/60;
 80026dc:	4b1c      	ldr	r3, [pc, #112]	; (8002750 <Set_Frequency_Send_Data+0xec>)
 80026de:	781b      	ldrb	r3, [r3, #0]
 80026e0:	461a      	mov	r2, r3
 80026e2:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80026e6:	fb03 f302 	mul.w	r3, r3, r2
 80026ea:	461a      	mov	r2, r3
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	1a9b      	subs	r3, r3, r2
 80026f0:	4a18      	ldr	r2, [pc, #96]	; (8002754 <Set_Frequency_Send_Data+0xf0>)
 80026f2:	fba2 2303 	umull	r2, r3, r2, r3
 80026f6:	095b      	lsrs	r3, r3, #5
 80026f8:	b2da      	uxtb	r2, r3
 80026fa:	4b17      	ldr	r3, [pc, #92]	; (8002758 <Set_Frequency_Send_Data+0xf4>)
 80026fc:	701a      	strb	r2, [r3, #0]
	alarm_second = alarm_time - alarm_hour*3600 - alarm_minute*60;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	b2da      	uxtb	r2, r3
 8002702:	4b13      	ldr	r3, [pc, #76]	; (8002750 <Set_Frequency_Send_Data+0xec>)
 8002704:	781b      	ldrb	r3, [r3, #0]
 8002706:	011b      	lsls	r3, r3, #4
 8002708:	b2db      	uxtb	r3, r3
 800270a:	1ad3      	subs	r3, r2, r3
 800270c:	b2da      	uxtb	r2, r3
 800270e:	4b12      	ldr	r3, [pc, #72]	; (8002758 <Set_Frequency_Send_Data+0xf4>)
 8002710:	781b      	ldrb	r3, [r3, #0]
 8002712:	4619      	mov	r1, r3
 8002714:	0109      	lsls	r1, r1, #4
 8002716:	1acb      	subs	r3, r1, r3
 8002718:	009b      	lsls	r3, r3, #2
 800271a:	b2db      	uxtb	r3, r3
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	b2da      	uxtb	r2, r3
 8002720:	4b0e      	ldr	r3, [pc, #56]	; (800275c <Set_Frequency_Send_Data+0xf8>)
 8002722:	701a      	strb	r2, [r3, #0]
	set_alarm_A(alarm_hour, alarm_minute, alarm_second);
 8002724:	4b0a      	ldr	r3, [pc, #40]	; (8002750 <Set_Frequency_Send_Data+0xec>)
 8002726:	7818      	ldrb	r0, [r3, #0]
 8002728:	4b0b      	ldr	r3, [pc, #44]	; (8002758 <Set_Frequency_Send_Data+0xf4>)
 800272a:	7819      	ldrb	r1, [r3, #0]
 800272c:	4b0b      	ldr	r3, [pc, #44]	; (800275c <Set_Frequency_Send_Data+0xf8>)
 800272e:	781b      	ldrb	r3, [r3, #0]
 8002730:	461a      	mov	r2, r3
 8002732:	f7ff ff43 	bl	80025bc <set_alarm_A>
}
 8002736:	bf00      	nop
 8002738:	3710      	adds	r7, #16
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	20000b74 	.word	0x20000b74
 8002744:	20000bbc 	.word	0x20000bbc
 8002748:	00015180 	.word	0x00015180
 800274c:	91a2b3c5 	.word	0x91a2b3c5
 8002750:	200004f0 	.word	0x200004f0
 8002754:	88888889 	.word	0x88888889
 8002758:	200004f1 	.word	0x200004f1
 800275c:	200004f2 	.word	0x200004f2

08002760 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc){
 8002760:	b480      	push	{r7}
 8002762:	b083      	sub	sp, #12
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
	vr_count = 1;
 8002768:	4b04      	ldr	r3, [pc, #16]	; (800277c <HAL_RTC_AlarmAEventCallback+0x1c>)
 800276a:	2201      	movs	r2, #1
 800276c:	701a      	strb	r2, [r3, #0]
}
 800276e:	bf00      	nop
 8002770:	370c      	adds	r7, #12
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr
 800277a:	bf00      	nop
 800277c:	200004f3 	.word	0x200004f3

08002780 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002780:	f8df d034 	ldr.w	sp, [pc, #52]	; 80027b8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002784:	f7ff fe98 	bl	80024b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002788:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800278a:	e003      	b.n	8002794 <LoopCopyDataInit>

0800278c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800278c:	4b0b      	ldr	r3, [pc, #44]	; (80027bc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800278e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002790:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002792:	3104      	adds	r1, #4

08002794 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002794:	480a      	ldr	r0, [pc, #40]	; (80027c0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002796:	4b0b      	ldr	r3, [pc, #44]	; (80027c4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002798:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800279a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800279c:	d3f6      	bcc.n	800278c <CopyDataInit>
	ldr	r2, =_sbss
 800279e:	4a0a      	ldr	r2, [pc, #40]	; (80027c8 <LoopForever+0x12>)
	b	LoopFillZerobss
 80027a0:	e002      	b.n	80027a8 <LoopFillZerobss>

080027a2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80027a2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80027a4:	f842 3b04 	str.w	r3, [r2], #4

080027a8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80027a8:	4b08      	ldr	r3, [pc, #32]	; (80027cc <LoopForever+0x16>)
	cmp	r2, r3
 80027aa:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80027ac:	d3f9      	bcc.n	80027a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80027ae:	f003 fe1f 	bl	80063f0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80027b2:	f7ff fa25 	bl	8001c00 <main>

080027b6 <LoopForever>:

LoopForever:
    b LoopForever
 80027b6:	e7fe      	b.n	80027b6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80027b8:	20028000 	.word	0x20028000
	ldr	r3, =_sidata
 80027bc:	08008ab0 	.word	0x08008ab0
	ldr	r0, =_sdata
 80027c0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80027c4:	200002b8 	.word	0x200002b8
	ldr	r2, =_sbss
 80027c8:	200002b8 	.word	0x200002b8
	ldr	r3, = _ebss
 80027cc:	20000bf4 	.word	0x20000bf4

080027d0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80027d0:	e7fe      	b.n	80027d0 <ADC1_IRQHandler>

080027d2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027d2:	b580      	push	{r7, lr}
 80027d4:	b082      	sub	sp, #8
 80027d6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80027d8:	2300      	movs	r3, #0
 80027da:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027dc:	2003      	movs	r0, #3
 80027de:	f000 f95f 	bl	8002aa0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80027e2:	2000      	movs	r0, #0
 80027e4:	f000 f80e 	bl	8002804 <HAL_InitTick>
 80027e8:	4603      	mov	r3, r0
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d002      	beq.n	80027f4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	71fb      	strb	r3, [r7, #7]
 80027f2:	e001      	b.n	80027f8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80027f4:	f7ff fce2 	bl	80021bc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80027f8:	79fb      	ldrb	r3, [r7, #7]
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	3708      	adds	r7, #8
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
	...

08002804 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b084      	sub	sp, #16
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800280c:	2300      	movs	r3, #0
 800280e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002810:	4b17      	ldr	r3, [pc, #92]	; (8002870 <HAL_InitTick+0x6c>)
 8002812:	781b      	ldrb	r3, [r3, #0]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d023      	beq.n	8002860 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002818:	4b16      	ldr	r3, [pc, #88]	; (8002874 <HAL_InitTick+0x70>)
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	4b14      	ldr	r3, [pc, #80]	; (8002870 <HAL_InitTick+0x6c>)
 800281e:	781b      	ldrb	r3, [r3, #0]
 8002820:	4619      	mov	r1, r3
 8002822:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002826:	fbb3 f3f1 	udiv	r3, r3, r1
 800282a:	fbb2 f3f3 	udiv	r3, r2, r3
 800282e:	4618      	mov	r0, r3
 8002830:	f000 f96b 	bl	8002b0a <HAL_SYSTICK_Config>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	d10f      	bne.n	800285a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2b0f      	cmp	r3, #15
 800283e:	d809      	bhi.n	8002854 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002840:	2200      	movs	r2, #0
 8002842:	6879      	ldr	r1, [r7, #4]
 8002844:	f04f 30ff 	mov.w	r0, #4294967295
 8002848:	f000 f935 	bl	8002ab6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800284c:	4a0a      	ldr	r2, [pc, #40]	; (8002878 <HAL_InitTick+0x74>)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6013      	str	r3, [r2, #0]
 8002852:	e007      	b.n	8002864 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	73fb      	strb	r3, [r7, #15]
 8002858:	e004      	b.n	8002864 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	73fb      	strb	r3, [r7, #15]
 800285e:	e001      	b.n	8002864 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002864:	7bfb      	ldrb	r3, [r7, #15]
}
 8002866:	4618      	mov	r0, r3
 8002868:	3710      	adds	r7, #16
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	200000e4 	.word	0x200000e4
 8002874:	200000d8 	.word	0x200000d8
 8002878:	200000e0 	.word	0x200000e0

0800287c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800287c:	b480      	push	{r7}
 800287e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002880:	4b06      	ldr	r3, [pc, #24]	; (800289c <HAL_IncTick+0x20>)
 8002882:	781b      	ldrb	r3, [r3, #0]
 8002884:	461a      	mov	r2, r3
 8002886:	4b06      	ldr	r3, [pc, #24]	; (80028a0 <HAL_IncTick+0x24>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4413      	add	r3, r2
 800288c:	4a04      	ldr	r2, [pc, #16]	; (80028a0 <HAL_IncTick+0x24>)
 800288e:	6013      	str	r3, [r2, #0]
}
 8002890:	bf00      	nop
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr
 800289a:	bf00      	nop
 800289c:	200000e4 	.word	0x200000e4
 80028a0:	20000bec 	.word	0x20000bec

080028a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028a4:	b480      	push	{r7}
 80028a6:	af00      	add	r7, sp, #0
  return uwTick;
 80028a8:	4b03      	ldr	r3, [pc, #12]	; (80028b8 <HAL_GetTick+0x14>)
 80028aa:	681b      	ldr	r3, [r3, #0]
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr
 80028b6:	bf00      	nop
 80028b8:	20000bec 	.word	0x20000bec

080028bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b084      	sub	sp, #16
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028c4:	f7ff ffee 	bl	80028a4 <HAL_GetTick>
 80028c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028d4:	d005      	beq.n	80028e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80028d6:	4b09      	ldr	r3, [pc, #36]	; (80028fc <HAL_Delay+0x40>)
 80028d8:	781b      	ldrb	r3, [r3, #0]
 80028da:	461a      	mov	r2, r3
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	4413      	add	r3, r2
 80028e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80028e2:	bf00      	nop
 80028e4:	f7ff ffde 	bl	80028a4 <HAL_GetTick>
 80028e8:	4602      	mov	r2, r0
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	68fa      	ldr	r2, [r7, #12]
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d8f7      	bhi.n	80028e4 <HAL_Delay+0x28>
  {
  }
}
 80028f4:	bf00      	nop
 80028f6:	3710      	adds	r7, #16
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}
 80028fc:	200000e4 	.word	0x200000e4

08002900 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002900:	b480      	push	{r7}
 8002902:	b085      	sub	sp, #20
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	f003 0307 	and.w	r3, r3, #7
 800290e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002910:	4b0c      	ldr	r3, [pc, #48]	; (8002944 <__NVIC_SetPriorityGrouping+0x44>)
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002916:	68ba      	ldr	r2, [r7, #8]
 8002918:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800291c:	4013      	ands	r3, r2
 800291e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002928:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800292c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002930:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002932:	4a04      	ldr	r2, [pc, #16]	; (8002944 <__NVIC_SetPriorityGrouping+0x44>)
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	60d3      	str	r3, [r2, #12]
}
 8002938:	bf00      	nop
 800293a:	3714      	adds	r7, #20
 800293c:	46bd      	mov	sp, r7
 800293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002942:	4770      	bx	lr
 8002944:	e000ed00 	.word	0xe000ed00

08002948 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002948:	b480      	push	{r7}
 800294a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800294c:	4b04      	ldr	r3, [pc, #16]	; (8002960 <__NVIC_GetPriorityGrouping+0x18>)
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	0a1b      	lsrs	r3, r3, #8
 8002952:	f003 0307 	and.w	r3, r3, #7
}
 8002956:	4618      	mov	r0, r3
 8002958:	46bd      	mov	sp, r7
 800295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295e:	4770      	bx	lr
 8002960:	e000ed00 	.word	0xe000ed00

08002964 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002964:	b480      	push	{r7}
 8002966:	b083      	sub	sp, #12
 8002968:	af00      	add	r7, sp, #0
 800296a:	4603      	mov	r3, r0
 800296c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800296e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002972:	2b00      	cmp	r3, #0
 8002974:	db0b      	blt.n	800298e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002976:	79fb      	ldrb	r3, [r7, #7]
 8002978:	f003 021f 	and.w	r2, r3, #31
 800297c:	4907      	ldr	r1, [pc, #28]	; (800299c <__NVIC_EnableIRQ+0x38>)
 800297e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002982:	095b      	lsrs	r3, r3, #5
 8002984:	2001      	movs	r0, #1
 8002986:	fa00 f202 	lsl.w	r2, r0, r2
 800298a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800298e:	bf00      	nop
 8002990:	370c      	adds	r7, #12
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr
 800299a:	bf00      	nop
 800299c:	e000e100 	.word	0xe000e100

080029a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b083      	sub	sp, #12
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	4603      	mov	r3, r0
 80029a8:	6039      	str	r1, [r7, #0]
 80029aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	db0a      	blt.n	80029ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	b2da      	uxtb	r2, r3
 80029b8:	490c      	ldr	r1, [pc, #48]	; (80029ec <__NVIC_SetPriority+0x4c>)
 80029ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029be:	0112      	lsls	r2, r2, #4
 80029c0:	b2d2      	uxtb	r2, r2
 80029c2:	440b      	add	r3, r1
 80029c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029c8:	e00a      	b.n	80029e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	b2da      	uxtb	r2, r3
 80029ce:	4908      	ldr	r1, [pc, #32]	; (80029f0 <__NVIC_SetPriority+0x50>)
 80029d0:	79fb      	ldrb	r3, [r7, #7]
 80029d2:	f003 030f 	and.w	r3, r3, #15
 80029d6:	3b04      	subs	r3, #4
 80029d8:	0112      	lsls	r2, r2, #4
 80029da:	b2d2      	uxtb	r2, r2
 80029dc:	440b      	add	r3, r1
 80029de:	761a      	strb	r2, [r3, #24]
}
 80029e0:	bf00      	nop
 80029e2:	370c      	adds	r7, #12
 80029e4:	46bd      	mov	sp, r7
 80029e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ea:	4770      	bx	lr
 80029ec:	e000e100 	.word	0xe000e100
 80029f0:	e000ed00 	.word	0xe000ed00

080029f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b089      	sub	sp, #36	; 0x24
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	60f8      	str	r0, [r7, #12]
 80029fc:	60b9      	str	r1, [r7, #8]
 80029fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	f003 0307 	and.w	r3, r3, #7
 8002a06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a08:	69fb      	ldr	r3, [r7, #28]
 8002a0a:	f1c3 0307 	rsb	r3, r3, #7
 8002a0e:	2b04      	cmp	r3, #4
 8002a10:	bf28      	it	cs
 8002a12:	2304      	movcs	r3, #4
 8002a14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a16:	69fb      	ldr	r3, [r7, #28]
 8002a18:	3304      	adds	r3, #4
 8002a1a:	2b06      	cmp	r3, #6
 8002a1c:	d902      	bls.n	8002a24 <NVIC_EncodePriority+0x30>
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	3b03      	subs	r3, #3
 8002a22:	e000      	b.n	8002a26 <NVIC_EncodePriority+0x32>
 8002a24:	2300      	movs	r3, #0
 8002a26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a28:	f04f 32ff 	mov.w	r2, #4294967295
 8002a2c:	69bb      	ldr	r3, [r7, #24]
 8002a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a32:	43da      	mvns	r2, r3
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	401a      	ands	r2, r3
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a3c:	f04f 31ff 	mov.w	r1, #4294967295
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	fa01 f303 	lsl.w	r3, r1, r3
 8002a46:	43d9      	mvns	r1, r3
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a4c:	4313      	orrs	r3, r2
         );
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	3724      	adds	r7, #36	; 0x24
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr
	...

08002a5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b082      	sub	sp, #8
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	3b01      	subs	r3, #1
 8002a68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a6c:	d301      	bcc.n	8002a72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e00f      	b.n	8002a92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a72:	4a0a      	ldr	r2, [pc, #40]	; (8002a9c <SysTick_Config+0x40>)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	3b01      	subs	r3, #1
 8002a78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a7a:	210f      	movs	r1, #15
 8002a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8002a80:	f7ff ff8e 	bl	80029a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a84:	4b05      	ldr	r3, [pc, #20]	; (8002a9c <SysTick_Config+0x40>)
 8002a86:	2200      	movs	r2, #0
 8002a88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a8a:	4b04      	ldr	r3, [pc, #16]	; (8002a9c <SysTick_Config+0x40>)
 8002a8c:	2207      	movs	r2, #7
 8002a8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a90:	2300      	movs	r3, #0
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3708      	adds	r7, #8
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	e000e010 	.word	0xe000e010

08002aa0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b082      	sub	sp, #8
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002aa8:	6878      	ldr	r0, [r7, #4]
 8002aaa:	f7ff ff29 	bl	8002900 <__NVIC_SetPriorityGrouping>
}
 8002aae:	bf00      	nop
 8002ab0:	3708      	adds	r7, #8
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}

08002ab6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ab6:	b580      	push	{r7, lr}
 8002ab8:	b086      	sub	sp, #24
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	4603      	mov	r3, r0
 8002abe:	60b9      	str	r1, [r7, #8]
 8002ac0:	607a      	str	r2, [r7, #4]
 8002ac2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002ac8:	f7ff ff3e 	bl	8002948 <__NVIC_GetPriorityGrouping>
 8002acc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ace:	687a      	ldr	r2, [r7, #4]
 8002ad0:	68b9      	ldr	r1, [r7, #8]
 8002ad2:	6978      	ldr	r0, [r7, #20]
 8002ad4:	f7ff ff8e 	bl	80029f4 <NVIC_EncodePriority>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ade:	4611      	mov	r1, r2
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f7ff ff5d 	bl	80029a0 <__NVIC_SetPriority>
}
 8002ae6:	bf00      	nop
 8002ae8:	3718      	adds	r7, #24
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}

08002aee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002aee:	b580      	push	{r7, lr}
 8002af0:	b082      	sub	sp, #8
 8002af2:	af00      	add	r7, sp, #0
 8002af4:	4603      	mov	r3, r0
 8002af6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002af8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002afc:	4618      	mov	r0, r3
 8002afe:	f7ff ff31 	bl	8002964 <__NVIC_EnableIRQ>
}
 8002b02:	bf00      	nop
 8002b04:	3708      	adds	r7, #8
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}

08002b0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b0a:	b580      	push	{r7, lr}
 8002b0c:	b082      	sub	sp, #8
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f7ff ffa2 	bl	8002a5c <SysTick_Config>
 8002b18:	4603      	mov	r3, r0
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	3708      	adds	r7, #8
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}

08002b22 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002b22:	b580      	push	{r7, lr}
 8002b24:	b084      	sub	sp, #16
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	2b02      	cmp	r3, #2
 8002b38:	d005      	beq.n	8002b46 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2204      	movs	r2, #4
 8002b3e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002b40:	2301      	movs	r3, #1
 8002b42:	73fb      	strb	r3, [r7, #15]
 8002b44:	e029      	b.n	8002b9a <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f022 020e 	bic.w	r2, r2, #14
 8002b54:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f022 0201 	bic.w	r2, r2, #1
 8002b64:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b6a:	f003 021c 	and.w	r2, r3, #28
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b72:	2101      	movs	r1, #1
 8002b74:	fa01 f202 	lsl.w	r2, r1, r2
 8002b78:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2200      	movs	r2, #0
 8002b86:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d003      	beq.n	8002b9a <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	4798      	blx	r3
    }
  }
  return status;
 8002b9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	3710      	adds	r7, #16
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}

08002ba4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b087      	sub	sp, #28
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
 8002bac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002bb2:	e154      	b.n	8002e5e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	2101      	movs	r1, #1
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	fa01 f303 	lsl.w	r3, r1, r3
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	f000 8146 	beq.w	8002e58 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d00b      	beq.n	8002bec <HAL_GPIO_Init+0x48>
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	2b02      	cmp	r3, #2
 8002bda:	d007      	beq.n	8002bec <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002be0:	2b11      	cmp	r3, #17
 8002be2:	d003      	beq.n	8002bec <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	2b12      	cmp	r3, #18
 8002bea:	d130      	bne.n	8002c4e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	005b      	lsls	r3, r3, #1
 8002bf6:	2203      	movs	r2, #3
 8002bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfc:	43db      	mvns	r3, r3
 8002bfe:	693a      	ldr	r2, [r7, #16]
 8002c00:	4013      	ands	r3, r2
 8002c02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	68da      	ldr	r2, [r3, #12]
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	005b      	lsls	r3, r3, #1
 8002c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c10:	693a      	ldr	r2, [r7, #16]
 8002c12:	4313      	orrs	r3, r2
 8002c14:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	693a      	ldr	r2, [r7, #16]
 8002c1a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002c22:	2201      	movs	r2, #1
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2a:	43db      	mvns	r3, r3
 8002c2c:	693a      	ldr	r2, [r7, #16]
 8002c2e:	4013      	ands	r3, r2
 8002c30:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	091b      	lsrs	r3, r3, #4
 8002c38:	f003 0201 	and.w	r2, r3, #1
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c42:	693a      	ldr	r2, [r7, #16]
 8002c44:	4313      	orrs	r3, r2
 8002c46:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	693a      	ldr	r2, [r7, #16]
 8002c4c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	68db      	ldr	r3, [r3, #12]
 8002c52:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	005b      	lsls	r3, r3, #1
 8002c58:	2203      	movs	r2, #3
 8002c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c5e:	43db      	mvns	r3, r3
 8002c60:	693a      	ldr	r2, [r7, #16]
 8002c62:	4013      	ands	r3, r2
 8002c64:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	689a      	ldr	r2, [r3, #8]
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	005b      	lsls	r3, r3, #1
 8002c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c72:	693a      	ldr	r2, [r7, #16]
 8002c74:	4313      	orrs	r3, r2
 8002c76:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	693a      	ldr	r2, [r7, #16]
 8002c7c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	2b02      	cmp	r3, #2
 8002c84:	d003      	beq.n	8002c8e <HAL_GPIO_Init+0xea>
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	2b12      	cmp	r3, #18
 8002c8c:	d123      	bne.n	8002cd6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	08da      	lsrs	r2, r3, #3
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	3208      	adds	r2, #8
 8002c96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c9a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	f003 0307 	and.w	r3, r3, #7
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	220f      	movs	r2, #15
 8002ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8002caa:	43db      	mvns	r3, r3
 8002cac:	693a      	ldr	r2, [r7, #16]
 8002cae:	4013      	ands	r3, r2
 8002cb0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	691a      	ldr	r2, [r3, #16]
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	f003 0307 	and.w	r3, r3, #7
 8002cbc:	009b      	lsls	r3, r3, #2
 8002cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc2:	693a      	ldr	r2, [r7, #16]
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	08da      	lsrs	r2, r3, #3
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	3208      	adds	r2, #8
 8002cd0:	6939      	ldr	r1, [r7, #16]
 8002cd2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	005b      	lsls	r3, r3, #1
 8002ce0:	2203      	movs	r2, #3
 8002ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce6:	43db      	mvns	r3, r3
 8002ce8:	693a      	ldr	r2, [r7, #16]
 8002cea:	4013      	ands	r3, r2
 8002cec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	f003 0203 	and.w	r2, r3, #3
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	005b      	lsls	r3, r3, #1
 8002cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfe:	693a      	ldr	r2, [r7, #16]
 8002d00:	4313      	orrs	r3, r2
 8002d02:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	693a      	ldr	r2, [r7, #16]
 8002d08:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	f000 80a0 	beq.w	8002e58 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d18:	4b58      	ldr	r3, [pc, #352]	; (8002e7c <HAL_GPIO_Init+0x2d8>)
 8002d1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d1c:	4a57      	ldr	r2, [pc, #348]	; (8002e7c <HAL_GPIO_Init+0x2d8>)
 8002d1e:	f043 0301 	orr.w	r3, r3, #1
 8002d22:	6613      	str	r3, [r2, #96]	; 0x60
 8002d24:	4b55      	ldr	r3, [pc, #340]	; (8002e7c <HAL_GPIO_Init+0x2d8>)
 8002d26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d28:	f003 0301 	and.w	r3, r3, #1
 8002d2c:	60bb      	str	r3, [r7, #8]
 8002d2e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002d30:	4a53      	ldr	r2, [pc, #332]	; (8002e80 <HAL_GPIO_Init+0x2dc>)
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	089b      	lsrs	r3, r3, #2
 8002d36:	3302      	adds	r3, #2
 8002d38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d3c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	f003 0303 	and.w	r3, r3, #3
 8002d44:	009b      	lsls	r3, r3, #2
 8002d46:	220f      	movs	r2, #15
 8002d48:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4c:	43db      	mvns	r3, r3
 8002d4e:	693a      	ldr	r2, [r7, #16]
 8002d50:	4013      	ands	r3, r2
 8002d52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002d5a:	d019      	beq.n	8002d90 <HAL_GPIO_Init+0x1ec>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	4a49      	ldr	r2, [pc, #292]	; (8002e84 <HAL_GPIO_Init+0x2e0>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d013      	beq.n	8002d8c <HAL_GPIO_Init+0x1e8>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	4a48      	ldr	r2, [pc, #288]	; (8002e88 <HAL_GPIO_Init+0x2e4>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d00d      	beq.n	8002d88 <HAL_GPIO_Init+0x1e4>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	4a47      	ldr	r2, [pc, #284]	; (8002e8c <HAL_GPIO_Init+0x2e8>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d007      	beq.n	8002d84 <HAL_GPIO_Init+0x1e0>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	4a46      	ldr	r2, [pc, #280]	; (8002e90 <HAL_GPIO_Init+0x2ec>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d101      	bne.n	8002d80 <HAL_GPIO_Init+0x1dc>
 8002d7c:	2304      	movs	r3, #4
 8002d7e:	e008      	b.n	8002d92 <HAL_GPIO_Init+0x1ee>
 8002d80:	2307      	movs	r3, #7
 8002d82:	e006      	b.n	8002d92 <HAL_GPIO_Init+0x1ee>
 8002d84:	2303      	movs	r3, #3
 8002d86:	e004      	b.n	8002d92 <HAL_GPIO_Init+0x1ee>
 8002d88:	2302      	movs	r3, #2
 8002d8a:	e002      	b.n	8002d92 <HAL_GPIO_Init+0x1ee>
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	e000      	b.n	8002d92 <HAL_GPIO_Init+0x1ee>
 8002d90:	2300      	movs	r3, #0
 8002d92:	697a      	ldr	r2, [r7, #20]
 8002d94:	f002 0203 	and.w	r2, r2, #3
 8002d98:	0092      	lsls	r2, r2, #2
 8002d9a:	4093      	lsls	r3, r2
 8002d9c:	693a      	ldr	r2, [r7, #16]
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002da2:	4937      	ldr	r1, [pc, #220]	; (8002e80 <HAL_GPIO_Init+0x2dc>)
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	089b      	lsrs	r3, r3, #2
 8002da8:	3302      	adds	r3, #2
 8002daa:	693a      	ldr	r2, [r7, #16]
 8002dac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002db0:	4b38      	ldr	r3, [pc, #224]	; (8002e94 <HAL_GPIO_Init+0x2f0>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	43db      	mvns	r3, r3
 8002dba:	693a      	ldr	r2, [r7, #16]
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d003      	beq.n	8002dd4 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002dcc:	693a      	ldr	r2, [r7, #16]
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002dd4:	4a2f      	ldr	r2, [pc, #188]	; (8002e94 <HAL_GPIO_Init+0x2f0>)
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002dda:	4b2e      	ldr	r3, [pc, #184]	; (8002e94 <HAL_GPIO_Init+0x2f0>)
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	43db      	mvns	r3, r3
 8002de4:	693a      	ldr	r2, [r7, #16]
 8002de6:	4013      	ands	r3, r2
 8002de8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d003      	beq.n	8002dfe <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002df6:	693a      	ldr	r2, [r7, #16]
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002dfe:	4a25      	ldr	r2, [pc, #148]	; (8002e94 <HAL_GPIO_Init+0x2f0>)
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002e04:	4b23      	ldr	r3, [pc, #140]	; (8002e94 <HAL_GPIO_Init+0x2f0>)
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	43db      	mvns	r3, r3
 8002e0e:	693a      	ldr	r2, [r7, #16]
 8002e10:	4013      	ands	r3, r2
 8002e12:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d003      	beq.n	8002e28 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002e20:	693a      	ldr	r2, [r7, #16]
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	4313      	orrs	r3, r2
 8002e26:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002e28:	4a1a      	ldr	r2, [pc, #104]	; (8002e94 <HAL_GPIO_Init+0x2f0>)
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002e2e:	4b19      	ldr	r3, [pc, #100]	; (8002e94 <HAL_GPIO_Init+0x2f0>)
 8002e30:	68db      	ldr	r3, [r3, #12]
 8002e32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	43db      	mvns	r3, r3
 8002e38:	693a      	ldr	r2, [r7, #16]
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d003      	beq.n	8002e52 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002e4a:	693a      	ldr	r2, [r7, #16]
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002e52:	4a10      	ldr	r2, [pc, #64]	; (8002e94 <HAL_GPIO_Init+0x2f0>)
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	3301      	adds	r3, #1
 8002e5c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	fa22 f303 	lsr.w	r3, r2, r3
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	f47f aea3 	bne.w	8002bb4 <HAL_GPIO_Init+0x10>
  }
}
 8002e6e:	bf00      	nop
 8002e70:	371c      	adds	r7, #28
 8002e72:	46bd      	mov	sp, r7
 8002e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e78:	4770      	bx	lr
 8002e7a:	bf00      	nop
 8002e7c:	40021000 	.word	0x40021000
 8002e80:	40010000 	.word	0x40010000
 8002e84:	48000400 	.word	0x48000400
 8002e88:	48000800 	.word	0x48000800
 8002e8c:	48000c00 	.word	0x48000c00
 8002e90:	48001000 	.word	0x48001000
 8002e94:	40010400 	.word	0x40010400

08002e98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b083      	sub	sp, #12
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
 8002ea0:	460b      	mov	r3, r1
 8002ea2:	807b      	strh	r3, [r7, #2]
 8002ea4:	4613      	mov	r3, r2
 8002ea6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ea8:	787b      	ldrb	r3, [r7, #1]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d003      	beq.n	8002eb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002eae:	887a      	ldrh	r2, [r7, #2]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002eb4:	e002      	b.n	8002ebc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002eb6:	887a      	ldrh	r2, [r7, #2]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002ebc:	bf00      	nop
 8002ebe:	370c      	adds	r7, #12
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr

08002ec8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b085      	sub	sp, #20
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
 8002ed0:	460b      	mov	r3, r1
 8002ed2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	695b      	ldr	r3, [r3, #20]
 8002ed8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002eda:	887a      	ldrh	r2, [r7, #2]
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	4013      	ands	r3, r2
 8002ee0:	041a      	lsls	r2, r3, #16
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	43d9      	mvns	r1, r3
 8002ee6:	887b      	ldrh	r3, [r7, #2]
 8002ee8:	400b      	ands	r3, r1
 8002eea:	431a      	orrs	r2, r3
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	619a      	str	r2, [r3, #24]
}
 8002ef0:	bf00      	nop
 8002ef2:	3714      	adds	r7, #20
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efa:	4770      	bx	lr

08002efc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002efc:	b480      	push	{r7}
 8002efe:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002f00:	4b04      	ldr	r3, [pc, #16]	; (8002f14 <HAL_PWREx_GetVoltageRange+0x18>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr
 8002f12:	bf00      	nop
 8002f14:	40007000 	.word	0x40007000

08002f18 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b085      	sub	sp, #20
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f26:	d130      	bne.n	8002f8a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f28:	4b23      	ldr	r3, [pc, #140]	; (8002fb8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002f30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f34:	d038      	beq.n	8002fa8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f36:	4b20      	ldr	r3, [pc, #128]	; (8002fb8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002f3e:	4a1e      	ldr	r2, [pc, #120]	; (8002fb8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f40:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f44:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002f46:	4b1d      	ldr	r3, [pc, #116]	; (8002fbc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	2232      	movs	r2, #50	; 0x32
 8002f4c:	fb02 f303 	mul.w	r3, r2, r3
 8002f50:	4a1b      	ldr	r2, [pc, #108]	; (8002fc0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002f52:	fba2 2303 	umull	r2, r3, r2, r3
 8002f56:	0c9b      	lsrs	r3, r3, #18
 8002f58:	3301      	adds	r3, #1
 8002f5a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f5c:	e002      	b.n	8002f64 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	3b01      	subs	r3, #1
 8002f62:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f64:	4b14      	ldr	r3, [pc, #80]	; (8002fb8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f66:	695b      	ldr	r3, [r3, #20]
 8002f68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f70:	d102      	bne.n	8002f78 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d1f2      	bne.n	8002f5e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002f78:	4b0f      	ldr	r3, [pc, #60]	; (8002fb8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f7a:	695b      	ldr	r3, [r3, #20]
 8002f7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f84:	d110      	bne.n	8002fa8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002f86:	2303      	movs	r3, #3
 8002f88:	e00f      	b.n	8002faa <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002f8a:	4b0b      	ldr	r3, [pc, #44]	; (8002fb8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002f92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f96:	d007      	beq.n	8002fa8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002f98:	4b07      	ldr	r3, [pc, #28]	; (8002fb8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002fa0:	4a05      	ldr	r2, [pc, #20]	; (8002fb8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002fa2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002fa6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002fa8:	2300      	movs	r3, #0
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3714      	adds	r7, #20
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb4:	4770      	bx	lr
 8002fb6:	bf00      	nop
 8002fb8:	40007000 	.word	0x40007000
 8002fbc:	200000d8 	.word	0x200000d8
 8002fc0:	431bde83 	.word	0x431bde83

08002fc4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b088      	sub	sp, #32
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d102      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	f000 bc11 	b.w	80037fa <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002fd8:	4ba0      	ldr	r3, [pc, #640]	; (800325c <HAL_RCC_OscConfig+0x298>)
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	f003 030c 	and.w	r3, r3, #12
 8002fe0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002fe2:	4b9e      	ldr	r3, [pc, #632]	; (800325c <HAL_RCC_OscConfig+0x298>)
 8002fe4:	68db      	ldr	r3, [r3, #12]
 8002fe6:	f003 0303 	and.w	r3, r3, #3
 8002fea:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f003 0310 	and.w	r3, r3, #16
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	f000 80e4 	beq.w	80031c2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002ffa:	69bb      	ldr	r3, [r7, #24]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d007      	beq.n	8003010 <HAL_RCC_OscConfig+0x4c>
 8003000:	69bb      	ldr	r3, [r7, #24]
 8003002:	2b0c      	cmp	r3, #12
 8003004:	f040 808b 	bne.w	800311e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	2b01      	cmp	r3, #1
 800300c:	f040 8087 	bne.w	800311e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003010:	4b92      	ldr	r3, [pc, #584]	; (800325c <HAL_RCC_OscConfig+0x298>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 0302 	and.w	r3, r3, #2
 8003018:	2b00      	cmp	r3, #0
 800301a:	d005      	beq.n	8003028 <HAL_RCC_OscConfig+0x64>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	699b      	ldr	r3, [r3, #24]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d101      	bne.n	8003028 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	e3e8      	b.n	80037fa <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6a1a      	ldr	r2, [r3, #32]
 800302c:	4b8b      	ldr	r3, [pc, #556]	; (800325c <HAL_RCC_OscConfig+0x298>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f003 0308 	and.w	r3, r3, #8
 8003034:	2b00      	cmp	r3, #0
 8003036:	d004      	beq.n	8003042 <HAL_RCC_OscConfig+0x7e>
 8003038:	4b88      	ldr	r3, [pc, #544]	; (800325c <HAL_RCC_OscConfig+0x298>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003040:	e005      	b.n	800304e <HAL_RCC_OscConfig+0x8a>
 8003042:	4b86      	ldr	r3, [pc, #536]	; (800325c <HAL_RCC_OscConfig+0x298>)
 8003044:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003048:	091b      	lsrs	r3, r3, #4
 800304a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800304e:	4293      	cmp	r3, r2
 8003050:	d223      	bcs.n	800309a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6a1b      	ldr	r3, [r3, #32]
 8003056:	4618      	mov	r0, r3
 8003058:	f000 fd78 	bl	8003b4c <RCC_SetFlashLatencyFromMSIRange>
 800305c:	4603      	mov	r3, r0
 800305e:	2b00      	cmp	r3, #0
 8003060:	d001      	beq.n	8003066 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e3c9      	b.n	80037fa <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003066:	4b7d      	ldr	r3, [pc, #500]	; (800325c <HAL_RCC_OscConfig+0x298>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a7c      	ldr	r2, [pc, #496]	; (800325c <HAL_RCC_OscConfig+0x298>)
 800306c:	f043 0308 	orr.w	r3, r3, #8
 8003070:	6013      	str	r3, [r2, #0]
 8003072:	4b7a      	ldr	r3, [pc, #488]	; (800325c <HAL_RCC_OscConfig+0x298>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6a1b      	ldr	r3, [r3, #32]
 800307e:	4977      	ldr	r1, [pc, #476]	; (800325c <HAL_RCC_OscConfig+0x298>)
 8003080:	4313      	orrs	r3, r2
 8003082:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003084:	4b75      	ldr	r3, [pc, #468]	; (800325c <HAL_RCC_OscConfig+0x298>)
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	69db      	ldr	r3, [r3, #28]
 8003090:	021b      	lsls	r3, r3, #8
 8003092:	4972      	ldr	r1, [pc, #456]	; (800325c <HAL_RCC_OscConfig+0x298>)
 8003094:	4313      	orrs	r3, r2
 8003096:	604b      	str	r3, [r1, #4]
 8003098:	e025      	b.n	80030e6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800309a:	4b70      	ldr	r3, [pc, #448]	; (800325c <HAL_RCC_OscConfig+0x298>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a6f      	ldr	r2, [pc, #444]	; (800325c <HAL_RCC_OscConfig+0x298>)
 80030a0:	f043 0308 	orr.w	r3, r3, #8
 80030a4:	6013      	str	r3, [r2, #0]
 80030a6:	4b6d      	ldr	r3, [pc, #436]	; (800325c <HAL_RCC_OscConfig+0x298>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6a1b      	ldr	r3, [r3, #32]
 80030b2:	496a      	ldr	r1, [pc, #424]	; (800325c <HAL_RCC_OscConfig+0x298>)
 80030b4:	4313      	orrs	r3, r2
 80030b6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80030b8:	4b68      	ldr	r3, [pc, #416]	; (800325c <HAL_RCC_OscConfig+0x298>)
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	69db      	ldr	r3, [r3, #28]
 80030c4:	021b      	lsls	r3, r3, #8
 80030c6:	4965      	ldr	r1, [pc, #404]	; (800325c <HAL_RCC_OscConfig+0x298>)
 80030c8:	4313      	orrs	r3, r2
 80030ca:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80030cc:	69bb      	ldr	r3, [r7, #24]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d109      	bne.n	80030e6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6a1b      	ldr	r3, [r3, #32]
 80030d6:	4618      	mov	r0, r3
 80030d8:	f000 fd38 	bl	8003b4c <RCC_SetFlashLatencyFromMSIRange>
 80030dc:	4603      	mov	r3, r0
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d001      	beq.n	80030e6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e389      	b.n	80037fa <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80030e6:	f000 fc6f 	bl	80039c8 <HAL_RCC_GetSysClockFreq>
 80030ea:	4601      	mov	r1, r0
 80030ec:	4b5b      	ldr	r3, [pc, #364]	; (800325c <HAL_RCC_OscConfig+0x298>)
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	091b      	lsrs	r3, r3, #4
 80030f2:	f003 030f 	and.w	r3, r3, #15
 80030f6:	4a5a      	ldr	r2, [pc, #360]	; (8003260 <HAL_RCC_OscConfig+0x29c>)
 80030f8:	5cd3      	ldrb	r3, [r2, r3]
 80030fa:	f003 031f 	and.w	r3, r3, #31
 80030fe:	fa21 f303 	lsr.w	r3, r1, r3
 8003102:	4a58      	ldr	r2, [pc, #352]	; (8003264 <HAL_RCC_OscConfig+0x2a0>)
 8003104:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003106:	4b58      	ldr	r3, [pc, #352]	; (8003268 <HAL_RCC_OscConfig+0x2a4>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4618      	mov	r0, r3
 800310c:	f7ff fb7a 	bl	8002804 <HAL_InitTick>
 8003110:	4603      	mov	r3, r0
 8003112:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003114:	7bfb      	ldrb	r3, [r7, #15]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d052      	beq.n	80031c0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800311a:	7bfb      	ldrb	r3, [r7, #15]
 800311c:	e36d      	b.n	80037fa <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	699b      	ldr	r3, [r3, #24]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d032      	beq.n	800318c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003126:	4b4d      	ldr	r3, [pc, #308]	; (800325c <HAL_RCC_OscConfig+0x298>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a4c      	ldr	r2, [pc, #304]	; (800325c <HAL_RCC_OscConfig+0x298>)
 800312c:	f043 0301 	orr.w	r3, r3, #1
 8003130:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003132:	f7ff fbb7 	bl	80028a4 <HAL_GetTick>
 8003136:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003138:	e008      	b.n	800314c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800313a:	f7ff fbb3 	bl	80028a4 <HAL_GetTick>
 800313e:	4602      	mov	r2, r0
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	1ad3      	subs	r3, r2, r3
 8003144:	2b02      	cmp	r3, #2
 8003146:	d901      	bls.n	800314c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003148:	2303      	movs	r3, #3
 800314a:	e356      	b.n	80037fa <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800314c:	4b43      	ldr	r3, [pc, #268]	; (800325c <HAL_RCC_OscConfig+0x298>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 0302 	and.w	r3, r3, #2
 8003154:	2b00      	cmp	r3, #0
 8003156:	d0f0      	beq.n	800313a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003158:	4b40      	ldr	r3, [pc, #256]	; (800325c <HAL_RCC_OscConfig+0x298>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a3f      	ldr	r2, [pc, #252]	; (800325c <HAL_RCC_OscConfig+0x298>)
 800315e:	f043 0308 	orr.w	r3, r3, #8
 8003162:	6013      	str	r3, [r2, #0]
 8003164:	4b3d      	ldr	r3, [pc, #244]	; (800325c <HAL_RCC_OscConfig+0x298>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6a1b      	ldr	r3, [r3, #32]
 8003170:	493a      	ldr	r1, [pc, #232]	; (800325c <HAL_RCC_OscConfig+0x298>)
 8003172:	4313      	orrs	r3, r2
 8003174:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003176:	4b39      	ldr	r3, [pc, #228]	; (800325c <HAL_RCC_OscConfig+0x298>)
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	69db      	ldr	r3, [r3, #28]
 8003182:	021b      	lsls	r3, r3, #8
 8003184:	4935      	ldr	r1, [pc, #212]	; (800325c <HAL_RCC_OscConfig+0x298>)
 8003186:	4313      	orrs	r3, r2
 8003188:	604b      	str	r3, [r1, #4]
 800318a:	e01a      	b.n	80031c2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800318c:	4b33      	ldr	r3, [pc, #204]	; (800325c <HAL_RCC_OscConfig+0x298>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a32      	ldr	r2, [pc, #200]	; (800325c <HAL_RCC_OscConfig+0x298>)
 8003192:	f023 0301 	bic.w	r3, r3, #1
 8003196:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003198:	f7ff fb84 	bl	80028a4 <HAL_GetTick>
 800319c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800319e:	e008      	b.n	80031b2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80031a0:	f7ff fb80 	bl	80028a4 <HAL_GetTick>
 80031a4:	4602      	mov	r2, r0
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	1ad3      	subs	r3, r2, r3
 80031aa:	2b02      	cmp	r3, #2
 80031ac:	d901      	bls.n	80031b2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80031ae:	2303      	movs	r3, #3
 80031b0:	e323      	b.n	80037fa <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80031b2:	4b2a      	ldr	r3, [pc, #168]	; (800325c <HAL_RCC_OscConfig+0x298>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 0302 	and.w	r3, r3, #2
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d1f0      	bne.n	80031a0 <HAL_RCC_OscConfig+0x1dc>
 80031be:	e000      	b.n	80031c2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80031c0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 0301 	and.w	r3, r3, #1
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d073      	beq.n	80032b6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80031ce:	69bb      	ldr	r3, [r7, #24]
 80031d0:	2b08      	cmp	r3, #8
 80031d2:	d005      	beq.n	80031e0 <HAL_RCC_OscConfig+0x21c>
 80031d4:	69bb      	ldr	r3, [r7, #24]
 80031d6:	2b0c      	cmp	r3, #12
 80031d8:	d10e      	bne.n	80031f8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	2b03      	cmp	r3, #3
 80031de:	d10b      	bne.n	80031f8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031e0:	4b1e      	ldr	r3, [pc, #120]	; (800325c <HAL_RCC_OscConfig+0x298>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d063      	beq.n	80032b4 <HAL_RCC_OscConfig+0x2f0>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d15f      	bne.n	80032b4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	e300      	b.n	80037fa <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003200:	d106      	bne.n	8003210 <HAL_RCC_OscConfig+0x24c>
 8003202:	4b16      	ldr	r3, [pc, #88]	; (800325c <HAL_RCC_OscConfig+0x298>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a15      	ldr	r2, [pc, #84]	; (800325c <HAL_RCC_OscConfig+0x298>)
 8003208:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800320c:	6013      	str	r3, [r2, #0]
 800320e:	e01d      	b.n	800324c <HAL_RCC_OscConfig+0x288>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003218:	d10c      	bne.n	8003234 <HAL_RCC_OscConfig+0x270>
 800321a:	4b10      	ldr	r3, [pc, #64]	; (800325c <HAL_RCC_OscConfig+0x298>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a0f      	ldr	r2, [pc, #60]	; (800325c <HAL_RCC_OscConfig+0x298>)
 8003220:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003224:	6013      	str	r3, [r2, #0]
 8003226:	4b0d      	ldr	r3, [pc, #52]	; (800325c <HAL_RCC_OscConfig+0x298>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a0c      	ldr	r2, [pc, #48]	; (800325c <HAL_RCC_OscConfig+0x298>)
 800322c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003230:	6013      	str	r3, [r2, #0]
 8003232:	e00b      	b.n	800324c <HAL_RCC_OscConfig+0x288>
 8003234:	4b09      	ldr	r3, [pc, #36]	; (800325c <HAL_RCC_OscConfig+0x298>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a08      	ldr	r2, [pc, #32]	; (800325c <HAL_RCC_OscConfig+0x298>)
 800323a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800323e:	6013      	str	r3, [r2, #0]
 8003240:	4b06      	ldr	r3, [pc, #24]	; (800325c <HAL_RCC_OscConfig+0x298>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a05      	ldr	r2, [pc, #20]	; (800325c <HAL_RCC_OscConfig+0x298>)
 8003246:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800324a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d01b      	beq.n	800328c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003254:	f7ff fb26 	bl	80028a4 <HAL_GetTick>
 8003258:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800325a:	e010      	b.n	800327e <HAL_RCC_OscConfig+0x2ba>
 800325c:	40021000 	.word	0x40021000
 8003260:	080087d8 	.word	0x080087d8
 8003264:	200000d8 	.word	0x200000d8
 8003268:	200000e0 	.word	0x200000e0
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800326c:	f7ff fb1a 	bl	80028a4 <HAL_GetTick>
 8003270:	4602      	mov	r2, r0
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	1ad3      	subs	r3, r2, r3
 8003276:	2b64      	cmp	r3, #100	; 0x64
 8003278:	d901      	bls.n	800327e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800327a:	2303      	movs	r3, #3
 800327c:	e2bd      	b.n	80037fa <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800327e:	4baf      	ldr	r3, [pc, #700]	; (800353c <HAL_RCC_OscConfig+0x578>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003286:	2b00      	cmp	r3, #0
 8003288:	d0f0      	beq.n	800326c <HAL_RCC_OscConfig+0x2a8>
 800328a:	e014      	b.n	80032b6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800328c:	f7ff fb0a 	bl	80028a4 <HAL_GetTick>
 8003290:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003292:	e008      	b.n	80032a6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003294:	f7ff fb06 	bl	80028a4 <HAL_GetTick>
 8003298:	4602      	mov	r2, r0
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	1ad3      	subs	r3, r2, r3
 800329e:	2b64      	cmp	r3, #100	; 0x64
 80032a0:	d901      	bls.n	80032a6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80032a2:	2303      	movs	r3, #3
 80032a4:	e2a9      	b.n	80037fa <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80032a6:	4ba5      	ldr	r3, [pc, #660]	; (800353c <HAL_RCC_OscConfig+0x578>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d1f0      	bne.n	8003294 <HAL_RCC_OscConfig+0x2d0>
 80032b2:	e000      	b.n	80032b6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 0302 	and.w	r3, r3, #2
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d060      	beq.n	8003384 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80032c2:	69bb      	ldr	r3, [r7, #24]
 80032c4:	2b04      	cmp	r3, #4
 80032c6:	d005      	beq.n	80032d4 <HAL_RCC_OscConfig+0x310>
 80032c8:	69bb      	ldr	r3, [r7, #24]
 80032ca:	2b0c      	cmp	r3, #12
 80032cc:	d119      	bne.n	8003302 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	2b02      	cmp	r3, #2
 80032d2:	d116      	bne.n	8003302 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80032d4:	4b99      	ldr	r3, [pc, #612]	; (800353c <HAL_RCC_OscConfig+0x578>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d005      	beq.n	80032ec <HAL_RCC_OscConfig+0x328>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	68db      	ldr	r3, [r3, #12]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d101      	bne.n	80032ec <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80032e8:	2301      	movs	r3, #1
 80032ea:	e286      	b.n	80037fa <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032ec:	4b93      	ldr	r3, [pc, #588]	; (800353c <HAL_RCC_OscConfig+0x578>)
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	691b      	ldr	r3, [r3, #16]
 80032f8:	061b      	lsls	r3, r3, #24
 80032fa:	4990      	ldr	r1, [pc, #576]	; (800353c <HAL_RCC_OscConfig+0x578>)
 80032fc:	4313      	orrs	r3, r2
 80032fe:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003300:	e040      	b.n	8003384 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	68db      	ldr	r3, [r3, #12]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d023      	beq.n	8003352 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800330a:	4b8c      	ldr	r3, [pc, #560]	; (800353c <HAL_RCC_OscConfig+0x578>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a8b      	ldr	r2, [pc, #556]	; (800353c <HAL_RCC_OscConfig+0x578>)
 8003310:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003314:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003316:	f7ff fac5 	bl	80028a4 <HAL_GetTick>
 800331a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800331c:	e008      	b.n	8003330 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800331e:	f7ff fac1 	bl	80028a4 <HAL_GetTick>
 8003322:	4602      	mov	r2, r0
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	1ad3      	subs	r3, r2, r3
 8003328:	2b02      	cmp	r3, #2
 800332a:	d901      	bls.n	8003330 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800332c:	2303      	movs	r3, #3
 800332e:	e264      	b.n	80037fa <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003330:	4b82      	ldr	r3, [pc, #520]	; (800353c <HAL_RCC_OscConfig+0x578>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003338:	2b00      	cmp	r3, #0
 800333a:	d0f0      	beq.n	800331e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800333c:	4b7f      	ldr	r3, [pc, #508]	; (800353c <HAL_RCC_OscConfig+0x578>)
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	691b      	ldr	r3, [r3, #16]
 8003348:	061b      	lsls	r3, r3, #24
 800334a:	497c      	ldr	r1, [pc, #496]	; (800353c <HAL_RCC_OscConfig+0x578>)
 800334c:	4313      	orrs	r3, r2
 800334e:	604b      	str	r3, [r1, #4]
 8003350:	e018      	b.n	8003384 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003352:	4b7a      	ldr	r3, [pc, #488]	; (800353c <HAL_RCC_OscConfig+0x578>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a79      	ldr	r2, [pc, #484]	; (800353c <HAL_RCC_OscConfig+0x578>)
 8003358:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800335c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800335e:	f7ff faa1 	bl	80028a4 <HAL_GetTick>
 8003362:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003364:	e008      	b.n	8003378 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003366:	f7ff fa9d 	bl	80028a4 <HAL_GetTick>
 800336a:	4602      	mov	r2, r0
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	1ad3      	subs	r3, r2, r3
 8003370:	2b02      	cmp	r3, #2
 8003372:	d901      	bls.n	8003378 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003374:	2303      	movs	r3, #3
 8003376:	e240      	b.n	80037fa <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003378:	4b70      	ldr	r3, [pc, #448]	; (800353c <HAL_RCC_OscConfig+0x578>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003380:	2b00      	cmp	r3, #0
 8003382:	d1f0      	bne.n	8003366 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f003 0308 	and.w	r3, r3, #8
 800338c:	2b00      	cmp	r3, #0
 800338e:	d03c      	beq.n	800340a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	695b      	ldr	r3, [r3, #20]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d01c      	beq.n	80033d2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003398:	4b68      	ldr	r3, [pc, #416]	; (800353c <HAL_RCC_OscConfig+0x578>)
 800339a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800339e:	4a67      	ldr	r2, [pc, #412]	; (800353c <HAL_RCC_OscConfig+0x578>)
 80033a0:	f043 0301 	orr.w	r3, r3, #1
 80033a4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033a8:	f7ff fa7c 	bl	80028a4 <HAL_GetTick>
 80033ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80033ae:	e008      	b.n	80033c2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033b0:	f7ff fa78 	bl	80028a4 <HAL_GetTick>
 80033b4:	4602      	mov	r2, r0
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	1ad3      	subs	r3, r2, r3
 80033ba:	2b02      	cmp	r3, #2
 80033bc:	d901      	bls.n	80033c2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80033be:	2303      	movs	r3, #3
 80033c0:	e21b      	b.n	80037fa <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80033c2:	4b5e      	ldr	r3, [pc, #376]	; (800353c <HAL_RCC_OscConfig+0x578>)
 80033c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033c8:	f003 0302 	and.w	r3, r3, #2
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d0ef      	beq.n	80033b0 <HAL_RCC_OscConfig+0x3ec>
 80033d0:	e01b      	b.n	800340a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033d2:	4b5a      	ldr	r3, [pc, #360]	; (800353c <HAL_RCC_OscConfig+0x578>)
 80033d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033d8:	4a58      	ldr	r2, [pc, #352]	; (800353c <HAL_RCC_OscConfig+0x578>)
 80033da:	f023 0301 	bic.w	r3, r3, #1
 80033de:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033e2:	f7ff fa5f 	bl	80028a4 <HAL_GetTick>
 80033e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80033e8:	e008      	b.n	80033fc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033ea:	f7ff fa5b 	bl	80028a4 <HAL_GetTick>
 80033ee:	4602      	mov	r2, r0
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	1ad3      	subs	r3, r2, r3
 80033f4:	2b02      	cmp	r3, #2
 80033f6:	d901      	bls.n	80033fc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80033f8:	2303      	movs	r3, #3
 80033fa:	e1fe      	b.n	80037fa <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80033fc:	4b4f      	ldr	r3, [pc, #316]	; (800353c <HAL_RCC_OscConfig+0x578>)
 80033fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003402:	f003 0302 	and.w	r3, r3, #2
 8003406:	2b00      	cmp	r3, #0
 8003408:	d1ef      	bne.n	80033ea <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 0304 	and.w	r3, r3, #4
 8003412:	2b00      	cmp	r3, #0
 8003414:	f000 80a6 	beq.w	8003564 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003418:	2300      	movs	r3, #0
 800341a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800341c:	4b47      	ldr	r3, [pc, #284]	; (800353c <HAL_RCC_OscConfig+0x578>)
 800341e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003420:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003424:	2b00      	cmp	r3, #0
 8003426:	d10d      	bne.n	8003444 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003428:	4b44      	ldr	r3, [pc, #272]	; (800353c <HAL_RCC_OscConfig+0x578>)
 800342a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800342c:	4a43      	ldr	r2, [pc, #268]	; (800353c <HAL_RCC_OscConfig+0x578>)
 800342e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003432:	6593      	str	r3, [r2, #88]	; 0x58
 8003434:	4b41      	ldr	r3, [pc, #260]	; (800353c <HAL_RCC_OscConfig+0x578>)
 8003436:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003438:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800343c:	60bb      	str	r3, [r7, #8]
 800343e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003440:	2301      	movs	r3, #1
 8003442:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003444:	4b3e      	ldr	r3, [pc, #248]	; (8003540 <HAL_RCC_OscConfig+0x57c>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800344c:	2b00      	cmp	r3, #0
 800344e:	d118      	bne.n	8003482 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003450:	4b3b      	ldr	r3, [pc, #236]	; (8003540 <HAL_RCC_OscConfig+0x57c>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a3a      	ldr	r2, [pc, #232]	; (8003540 <HAL_RCC_OscConfig+0x57c>)
 8003456:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800345a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800345c:	f7ff fa22 	bl	80028a4 <HAL_GetTick>
 8003460:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003462:	e008      	b.n	8003476 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003464:	f7ff fa1e 	bl	80028a4 <HAL_GetTick>
 8003468:	4602      	mov	r2, r0
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	1ad3      	subs	r3, r2, r3
 800346e:	2b02      	cmp	r3, #2
 8003470:	d901      	bls.n	8003476 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003472:	2303      	movs	r3, #3
 8003474:	e1c1      	b.n	80037fa <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003476:	4b32      	ldr	r3, [pc, #200]	; (8003540 <HAL_RCC_OscConfig+0x57c>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800347e:	2b00      	cmp	r3, #0
 8003480:	d0f0      	beq.n	8003464 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	2b01      	cmp	r3, #1
 8003488:	d108      	bne.n	800349c <HAL_RCC_OscConfig+0x4d8>
 800348a:	4b2c      	ldr	r3, [pc, #176]	; (800353c <HAL_RCC_OscConfig+0x578>)
 800348c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003490:	4a2a      	ldr	r2, [pc, #168]	; (800353c <HAL_RCC_OscConfig+0x578>)
 8003492:	f043 0301 	orr.w	r3, r3, #1
 8003496:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800349a:	e024      	b.n	80034e6 <HAL_RCC_OscConfig+0x522>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	2b05      	cmp	r3, #5
 80034a2:	d110      	bne.n	80034c6 <HAL_RCC_OscConfig+0x502>
 80034a4:	4b25      	ldr	r3, [pc, #148]	; (800353c <HAL_RCC_OscConfig+0x578>)
 80034a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034aa:	4a24      	ldr	r2, [pc, #144]	; (800353c <HAL_RCC_OscConfig+0x578>)
 80034ac:	f043 0304 	orr.w	r3, r3, #4
 80034b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80034b4:	4b21      	ldr	r3, [pc, #132]	; (800353c <HAL_RCC_OscConfig+0x578>)
 80034b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034ba:	4a20      	ldr	r2, [pc, #128]	; (800353c <HAL_RCC_OscConfig+0x578>)
 80034bc:	f043 0301 	orr.w	r3, r3, #1
 80034c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80034c4:	e00f      	b.n	80034e6 <HAL_RCC_OscConfig+0x522>
 80034c6:	4b1d      	ldr	r3, [pc, #116]	; (800353c <HAL_RCC_OscConfig+0x578>)
 80034c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034cc:	4a1b      	ldr	r2, [pc, #108]	; (800353c <HAL_RCC_OscConfig+0x578>)
 80034ce:	f023 0301 	bic.w	r3, r3, #1
 80034d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80034d6:	4b19      	ldr	r3, [pc, #100]	; (800353c <HAL_RCC_OscConfig+0x578>)
 80034d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034dc:	4a17      	ldr	r2, [pc, #92]	; (800353c <HAL_RCC_OscConfig+0x578>)
 80034de:	f023 0304 	bic.w	r3, r3, #4
 80034e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d016      	beq.n	800351c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034ee:	f7ff f9d9 	bl	80028a4 <HAL_GetTick>
 80034f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034f4:	e00a      	b.n	800350c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034f6:	f7ff f9d5 	bl	80028a4 <HAL_GetTick>
 80034fa:	4602      	mov	r2, r0
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	1ad3      	subs	r3, r2, r3
 8003500:	f241 3288 	movw	r2, #5000	; 0x1388
 8003504:	4293      	cmp	r3, r2
 8003506:	d901      	bls.n	800350c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003508:	2303      	movs	r3, #3
 800350a:	e176      	b.n	80037fa <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800350c:	4b0b      	ldr	r3, [pc, #44]	; (800353c <HAL_RCC_OscConfig+0x578>)
 800350e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003512:	f003 0302 	and.w	r3, r3, #2
 8003516:	2b00      	cmp	r3, #0
 8003518:	d0ed      	beq.n	80034f6 <HAL_RCC_OscConfig+0x532>
 800351a:	e01a      	b.n	8003552 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800351c:	f7ff f9c2 	bl	80028a4 <HAL_GetTick>
 8003520:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003522:	e00f      	b.n	8003544 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003524:	f7ff f9be 	bl	80028a4 <HAL_GetTick>
 8003528:	4602      	mov	r2, r0
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	1ad3      	subs	r3, r2, r3
 800352e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003532:	4293      	cmp	r3, r2
 8003534:	d906      	bls.n	8003544 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003536:	2303      	movs	r3, #3
 8003538:	e15f      	b.n	80037fa <HAL_RCC_OscConfig+0x836>
 800353a:	bf00      	nop
 800353c:	40021000 	.word	0x40021000
 8003540:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003544:	4baa      	ldr	r3, [pc, #680]	; (80037f0 <HAL_RCC_OscConfig+0x82c>)
 8003546:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800354a:	f003 0302 	and.w	r3, r3, #2
 800354e:	2b00      	cmp	r3, #0
 8003550:	d1e8      	bne.n	8003524 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003552:	7ffb      	ldrb	r3, [r7, #31]
 8003554:	2b01      	cmp	r3, #1
 8003556:	d105      	bne.n	8003564 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003558:	4ba5      	ldr	r3, [pc, #660]	; (80037f0 <HAL_RCC_OscConfig+0x82c>)
 800355a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800355c:	4aa4      	ldr	r2, [pc, #656]	; (80037f0 <HAL_RCC_OscConfig+0x82c>)
 800355e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003562:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f003 0320 	and.w	r3, r3, #32
 800356c:	2b00      	cmp	r3, #0
 800356e:	d03c      	beq.n	80035ea <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003574:	2b00      	cmp	r3, #0
 8003576:	d01c      	beq.n	80035b2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003578:	4b9d      	ldr	r3, [pc, #628]	; (80037f0 <HAL_RCC_OscConfig+0x82c>)
 800357a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800357e:	4a9c      	ldr	r2, [pc, #624]	; (80037f0 <HAL_RCC_OscConfig+0x82c>)
 8003580:	f043 0301 	orr.w	r3, r3, #1
 8003584:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003588:	f7ff f98c 	bl	80028a4 <HAL_GetTick>
 800358c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800358e:	e008      	b.n	80035a2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003590:	f7ff f988 	bl	80028a4 <HAL_GetTick>
 8003594:	4602      	mov	r2, r0
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	1ad3      	subs	r3, r2, r3
 800359a:	2b02      	cmp	r3, #2
 800359c:	d901      	bls.n	80035a2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800359e:	2303      	movs	r3, #3
 80035a0:	e12b      	b.n	80037fa <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80035a2:	4b93      	ldr	r3, [pc, #588]	; (80037f0 <HAL_RCC_OscConfig+0x82c>)
 80035a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80035a8:	f003 0302 	and.w	r3, r3, #2
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d0ef      	beq.n	8003590 <HAL_RCC_OscConfig+0x5cc>
 80035b0:	e01b      	b.n	80035ea <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80035b2:	4b8f      	ldr	r3, [pc, #572]	; (80037f0 <HAL_RCC_OscConfig+0x82c>)
 80035b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80035b8:	4a8d      	ldr	r2, [pc, #564]	; (80037f0 <HAL_RCC_OscConfig+0x82c>)
 80035ba:	f023 0301 	bic.w	r3, r3, #1
 80035be:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035c2:	f7ff f96f 	bl	80028a4 <HAL_GetTick>
 80035c6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80035c8:	e008      	b.n	80035dc <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80035ca:	f7ff f96b 	bl	80028a4 <HAL_GetTick>
 80035ce:	4602      	mov	r2, r0
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	1ad3      	subs	r3, r2, r3
 80035d4:	2b02      	cmp	r3, #2
 80035d6:	d901      	bls.n	80035dc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80035d8:	2303      	movs	r3, #3
 80035da:	e10e      	b.n	80037fa <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80035dc:	4b84      	ldr	r3, [pc, #528]	; (80037f0 <HAL_RCC_OscConfig+0x82c>)
 80035de:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80035e2:	f003 0302 	and.w	r3, r3, #2
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d1ef      	bne.n	80035ca <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	f000 8102 	beq.w	80037f8 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035f8:	2b02      	cmp	r3, #2
 80035fa:	f040 80c5 	bne.w	8003788 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80035fe:	4b7c      	ldr	r3, [pc, #496]	; (80037f0 <HAL_RCC_OscConfig+0x82c>)
 8003600:	68db      	ldr	r3, [r3, #12]
 8003602:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	f003 0203 	and.w	r2, r3, #3
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800360e:	429a      	cmp	r2, r3
 8003610:	d12c      	bne.n	800366c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800361c:	3b01      	subs	r3, #1
 800361e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003620:	429a      	cmp	r2, r3
 8003622:	d123      	bne.n	800366c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800362e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003630:	429a      	cmp	r2, r3
 8003632:	d11b      	bne.n	800366c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800363e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003640:	429a      	cmp	r2, r3
 8003642:	d113      	bne.n	800366c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800364e:	085b      	lsrs	r3, r3, #1
 8003650:	3b01      	subs	r3, #1
 8003652:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003654:	429a      	cmp	r2, r3
 8003656:	d109      	bne.n	800366c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003662:	085b      	lsrs	r3, r3, #1
 8003664:	3b01      	subs	r3, #1
 8003666:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003668:	429a      	cmp	r2, r3
 800366a:	d067      	beq.n	800373c <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800366c:	69bb      	ldr	r3, [r7, #24]
 800366e:	2b0c      	cmp	r3, #12
 8003670:	d062      	beq.n	8003738 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003672:	4b5f      	ldr	r3, [pc, #380]	; (80037f0 <HAL_RCC_OscConfig+0x82c>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800367a:	2b00      	cmp	r3, #0
 800367c:	d001      	beq.n	8003682 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e0bb      	b.n	80037fa <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003682:	4b5b      	ldr	r3, [pc, #364]	; (80037f0 <HAL_RCC_OscConfig+0x82c>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a5a      	ldr	r2, [pc, #360]	; (80037f0 <HAL_RCC_OscConfig+0x82c>)
 8003688:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800368c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800368e:	f7ff f909 	bl	80028a4 <HAL_GetTick>
 8003692:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003694:	e008      	b.n	80036a8 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003696:	f7ff f905 	bl	80028a4 <HAL_GetTick>
 800369a:	4602      	mov	r2, r0
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	1ad3      	subs	r3, r2, r3
 80036a0:	2b02      	cmp	r3, #2
 80036a2:	d901      	bls.n	80036a8 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80036a4:	2303      	movs	r3, #3
 80036a6:	e0a8      	b.n	80037fa <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036a8:	4b51      	ldr	r3, [pc, #324]	; (80037f0 <HAL_RCC_OscConfig+0x82c>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d1f0      	bne.n	8003696 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036b4:	4b4e      	ldr	r3, [pc, #312]	; (80037f0 <HAL_RCC_OscConfig+0x82c>)
 80036b6:	68da      	ldr	r2, [r3, #12]
 80036b8:	4b4e      	ldr	r3, [pc, #312]	; (80037f4 <HAL_RCC_OscConfig+0x830>)
 80036ba:	4013      	ands	r3, r2
 80036bc:	687a      	ldr	r2, [r7, #4]
 80036be:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80036c0:	687a      	ldr	r2, [r7, #4]
 80036c2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80036c4:	3a01      	subs	r2, #1
 80036c6:	0112      	lsls	r2, r2, #4
 80036c8:	4311      	orrs	r1, r2
 80036ca:	687a      	ldr	r2, [r7, #4]
 80036cc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80036ce:	0212      	lsls	r2, r2, #8
 80036d0:	4311      	orrs	r1, r2
 80036d2:	687a      	ldr	r2, [r7, #4]
 80036d4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80036d6:	0852      	lsrs	r2, r2, #1
 80036d8:	3a01      	subs	r2, #1
 80036da:	0552      	lsls	r2, r2, #21
 80036dc:	4311      	orrs	r1, r2
 80036de:	687a      	ldr	r2, [r7, #4]
 80036e0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80036e2:	0852      	lsrs	r2, r2, #1
 80036e4:	3a01      	subs	r2, #1
 80036e6:	0652      	lsls	r2, r2, #25
 80036e8:	4311      	orrs	r1, r2
 80036ea:	687a      	ldr	r2, [r7, #4]
 80036ec:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80036ee:	06d2      	lsls	r2, r2, #27
 80036f0:	430a      	orrs	r2, r1
 80036f2:	493f      	ldr	r1, [pc, #252]	; (80037f0 <HAL_RCC_OscConfig+0x82c>)
 80036f4:	4313      	orrs	r3, r2
 80036f6:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80036f8:	4b3d      	ldr	r3, [pc, #244]	; (80037f0 <HAL_RCC_OscConfig+0x82c>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a3c      	ldr	r2, [pc, #240]	; (80037f0 <HAL_RCC_OscConfig+0x82c>)
 80036fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003702:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003704:	4b3a      	ldr	r3, [pc, #232]	; (80037f0 <HAL_RCC_OscConfig+0x82c>)
 8003706:	68db      	ldr	r3, [r3, #12]
 8003708:	4a39      	ldr	r2, [pc, #228]	; (80037f0 <HAL_RCC_OscConfig+0x82c>)
 800370a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800370e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003710:	f7ff f8c8 	bl	80028a4 <HAL_GetTick>
 8003714:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003716:	e008      	b.n	800372a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003718:	f7ff f8c4 	bl	80028a4 <HAL_GetTick>
 800371c:	4602      	mov	r2, r0
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	1ad3      	subs	r3, r2, r3
 8003722:	2b02      	cmp	r3, #2
 8003724:	d901      	bls.n	800372a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003726:	2303      	movs	r3, #3
 8003728:	e067      	b.n	80037fa <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800372a:	4b31      	ldr	r3, [pc, #196]	; (80037f0 <HAL_RCC_OscConfig+0x82c>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003732:	2b00      	cmp	r3, #0
 8003734:	d0f0      	beq.n	8003718 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003736:	e05f      	b.n	80037f8 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	e05e      	b.n	80037fa <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800373c:	4b2c      	ldr	r3, [pc, #176]	; (80037f0 <HAL_RCC_OscConfig+0x82c>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003744:	2b00      	cmp	r3, #0
 8003746:	d157      	bne.n	80037f8 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003748:	4b29      	ldr	r3, [pc, #164]	; (80037f0 <HAL_RCC_OscConfig+0x82c>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a28      	ldr	r2, [pc, #160]	; (80037f0 <HAL_RCC_OscConfig+0x82c>)
 800374e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003752:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003754:	4b26      	ldr	r3, [pc, #152]	; (80037f0 <HAL_RCC_OscConfig+0x82c>)
 8003756:	68db      	ldr	r3, [r3, #12]
 8003758:	4a25      	ldr	r2, [pc, #148]	; (80037f0 <HAL_RCC_OscConfig+0x82c>)
 800375a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800375e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003760:	f7ff f8a0 	bl	80028a4 <HAL_GetTick>
 8003764:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003766:	e008      	b.n	800377a <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003768:	f7ff f89c 	bl	80028a4 <HAL_GetTick>
 800376c:	4602      	mov	r2, r0
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	1ad3      	subs	r3, r2, r3
 8003772:	2b02      	cmp	r3, #2
 8003774:	d901      	bls.n	800377a <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8003776:	2303      	movs	r3, #3
 8003778:	e03f      	b.n	80037fa <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800377a:	4b1d      	ldr	r3, [pc, #116]	; (80037f0 <HAL_RCC_OscConfig+0x82c>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003782:	2b00      	cmp	r3, #0
 8003784:	d0f0      	beq.n	8003768 <HAL_RCC_OscConfig+0x7a4>
 8003786:	e037      	b.n	80037f8 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003788:	69bb      	ldr	r3, [r7, #24]
 800378a:	2b0c      	cmp	r3, #12
 800378c:	d02d      	beq.n	80037ea <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800378e:	4b18      	ldr	r3, [pc, #96]	; (80037f0 <HAL_RCC_OscConfig+0x82c>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a17      	ldr	r2, [pc, #92]	; (80037f0 <HAL_RCC_OscConfig+0x82c>)
 8003794:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003798:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800379a:	4b15      	ldr	r3, [pc, #84]	; (80037f0 <HAL_RCC_OscConfig+0x82c>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d105      	bne.n	80037b2 <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80037a6:	4b12      	ldr	r3, [pc, #72]	; (80037f0 <HAL_RCC_OscConfig+0x82c>)
 80037a8:	68db      	ldr	r3, [r3, #12]
 80037aa:	4a11      	ldr	r2, [pc, #68]	; (80037f0 <HAL_RCC_OscConfig+0x82c>)
 80037ac:	f023 0303 	bic.w	r3, r3, #3
 80037b0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80037b2:	4b0f      	ldr	r3, [pc, #60]	; (80037f0 <HAL_RCC_OscConfig+0x82c>)
 80037b4:	68db      	ldr	r3, [r3, #12]
 80037b6:	4a0e      	ldr	r2, [pc, #56]	; (80037f0 <HAL_RCC_OscConfig+0x82c>)
 80037b8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80037bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037c0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037c2:	f7ff f86f 	bl	80028a4 <HAL_GetTick>
 80037c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037c8:	e008      	b.n	80037dc <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037ca:	f7ff f86b 	bl	80028a4 <HAL_GetTick>
 80037ce:	4602      	mov	r2, r0
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	1ad3      	subs	r3, r2, r3
 80037d4:	2b02      	cmp	r3, #2
 80037d6:	d901      	bls.n	80037dc <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 80037d8:	2303      	movs	r3, #3
 80037da:	e00e      	b.n	80037fa <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037dc:	4b04      	ldr	r3, [pc, #16]	; (80037f0 <HAL_RCC_OscConfig+0x82c>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d1f0      	bne.n	80037ca <HAL_RCC_OscConfig+0x806>
 80037e8:	e006      	b.n	80037f8 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	e005      	b.n	80037fa <HAL_RCC_OscConfig+0x836>
 80037ee:	bf00      	nop
 80037f0:	40021000 	.word	0x40021000
 80037f4:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 80037f8:	2300      	movs	r3, #0
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	3720      	adds	r7, #32
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}
 8003802:	bf00      	nop

08003804 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b084      	sub	sp, #16
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
 800380c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d101      	bne.n	8003818 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003814:	2301      	movs	r3, #1
 8003816:	e0c8      	b.n	80039aa <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003818:	4b66      	ldr	r3, [pc, #408]	; (80039b4 <HAL_RCC_ClockConfig+0x1b0>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 0307 	and.w	r3, r3, #7
 8003820:	683a      	ldr	r2, [r7, #0]
 8003822:	429a      	cmp	r2, r3
 8003824:	d910      	bls.n	8003848 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003826:	4b63      	ldr	r3, [pc, #396]	; (80039b4 <HAL_RCC_ClockConfig+0x1b0>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f023 0207 	bic.w	r2, r3, #7
 800382e:	4961      	ldr	r1, [pc, #388]	; (80039b4 <HAL_RCC_ClockConfig+0x1b0>)
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	4313      	orrs	r3, r2
 8003834:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003836:	4b5f      	ldr	r3, [pc, #380]	; (80039b4 <HAL_RCC_ClockConfig+0x1b0>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 0307 	and.w	r3, r3, #7
 800383e:	683a      	ldr	r2, [r7, #0]
 8003840:	429a      	cmp	r2, r3
 8003842:	d001      	beq.n	8003848 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003844:	2301      	movs	r3, #1
 8003846:	e0b0      	b.n	80039aa <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f003 0301 	and.w	r3, r3, #1
 8003850:	2b00      	cmp	r3, #0
 8003852:	d04c      	beq.n	80038ee <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	2b03      	cmp	r3, #3
 800385a:	d107      	bne.n	800386c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800385c:	4b56      	ldr	r3, [pc, #344]	; (80039b8 <HAL_RCC_ClockConfig+0x1b4>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003864:	2b00      	cmp	r3, #0
 8003866:	d121      	bne.n	80038ac <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003868:	2301      	movs	r3, #1
 800386a:	e09e      	b.n	80039aa <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	2b02      	cmp	r3, #2
 8003872:	d107      	bne.n	8003884 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003874:	4b50      	ldr	r3, [pc, #320]	; (80039b8 <HAL_RCC_ClockConfig+0x1b4>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800387c:	2b00      	cmp	r3, #0
 800387e:	d115      	bne.n	80038ac <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	e092      	b.n	80039aa <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d107      	bne.n	800389c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800388c:	4b4a      	ldr	r3, [pc, #296]	; (80039b8 <HAL_RCC_ClockConfig+0x1b4>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f003 0302 	and.w	r3, r3, #2
 8003894:	2b00      	cmp	r3, #0
 8003896:	d109      	bne.n	80038ac <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	e086      	b.n	80039aa <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800389c:	4b46      	ldr	r3, [pc, #280]	; (80039b8 <HAL_RCC_ClockConfig+0x1b4>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d101      	bne.n	80038ac <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80038a8:	2301      	movs	r3, #1
 80038aa:	e07e      	b.n	80039aa <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80038ac:	4b42      	ldr	r3, [pc, #264]	; (80039b8 <HAL_RCC_ClockConfig+0x1b4>)
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	f023 0203 	bic.w	r2, r3, #3
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	493f      	ldr	r1, [pc, #252]	; (80039b8 <HAL_RCC_ClockConfig+0x1b4>)
 80038ba:	4313      	orrs	r3, r2
 80038bc:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038be:	f7fe fff1 	bl	80028a4 <HAL_GetTick>
 80038c2:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038c4:	e00a      	b.n	80038dc <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038c6:	f7fe ffed 	bl	80028a4 <HAL_GetTick>
 80038ca:	4602      	mov	r2, r0
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	1ad3      	subs	r3, r2, r3
 80038d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d901      	bls.n	80038dc <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80038d8:	2303      	movs	r3, #3
 80038da:	e066      	b.n	80039aa <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038dc:	4b36      	ldr	r3, [pc, #216]	; (80039b8 <HAL_RCC_ClockConfig+0x1b4>)
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	f003 020c 	and.w	r2, r3, #12
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	009b      	lsls	r3, r3, #2
 80038ea:	429a      	cmp	r2, r3
 80038ec:	d1eb      	bne.n	80038c6 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f003 0302 	and.w	r3, r3, #2
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d008      	beq.n	800390c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038fa:	4b2f      	ldr	r3, [pc, #188]	; (80039b8 <HAL_RCC_ClockConfig+0x1b4>)
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	492c      	ldr	r1, [pc, #176]	; (80039b8 <HAL_RCC_ClockConfig+0x1b4>)
 8003908:	4313      	orrs	r3, r2
 800390a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800390c:	4b29      	ldr	r3, [pc, #164]	; (80039b4 <HAL_RCC_ClockConfig+0x1b0>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 0307 	and.w	r3, r3, #7
 8003914:	683a      	ldr	r2, [r7, #0]
 8003916:	429a      	cmp	r2, r3
 8003918:	d210      	bcs.n	800393c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800391a:	4b26      	ldr	r3, [pc, #152]	; (80039b4 <HAL_RCC_ClockConfig+0x1b0>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f023 0207 	bic.w	r2, r3, #7
 8003922:	4924      	ldr	r1, [pc, #144]	; (80039b4 <HAL_RCC_ClockConfig+0x1b0>)
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	4313      	orrs	r3, r2
 8003928:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800392a:	4b22      	ldr	r3, [pc, #136]	; (80039b4 <HAL_RCC_ClockConfig+0x1b0>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f003 0307 	and.w	r3, r3, #7
 8003932:	683a      	ldr	r2, [r7, #0]
 8003934:	429a      	cmp	r2, r3
 8003936:	d001      	beq.n	800393c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003938:	2301      	movs	r3, #1
 800393a:	e036      	b.n	80039aa <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f003 0304 	and.w	r3, r3, #4
 8003944:	2b00      	cmp	r3, #0
 8003946:	d008      	beq.n	800395a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003948:	4b1b      	ldr	r3, [pc, #108]	; (80039b8 <HAL_RCC_ClockConfig+0x1b4>)
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	68db      	ldr	r3, [r3, #12]
 8003954:	4918      	ldr	r1, [pc, #96]	; (80039b8 <HAL_RCC_ClockConfig+0x1b4>)
 8003956:	4313      	orrs	r3, r2
 8003958:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f003 0308 	and.w	r3, r3, #8
 8003962:	2b00      	cmp	r3, #0
 8003964:	d009      	beq.n	800397a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003966:	4b14      	ldr	r3, [pc, #80]	; (80039b8 <HAL_RCC_ClockConfig+0x1b4>)
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	691b      	ldr	r3, [r3, #16]
 8003972:	00db      	lsls	r3, r3, #3
 8003974:	4910      	ldr	r1, [pc, #64]	; (80039b8 <HAL_RCC_ClockConfig+0x1b4>)
 8003976:	4313      	orrs	r3, r2
 8003978:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800397a:	f000 f825 	bl	80039c8 <HAL_RCC_GetSysClockFreq>
 800397e:	4601      	mov	r1, r0
 8003980:	4b0d      	ldr	r3, [pc, #52]	; (80039b8 <HAL_RCC_ClockConfig+0x1b4>)
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	091b      	lsrs	r3, r3, #4
 8003986:	f003 030f 	and.w	r3, r3, #15
 800398a:	4a0c      	ldr	r2, [pc, #48]	; (80039bc <HAL_RCC_ClockConfig+0x1b8>)
 800398c:	5cd3      	ldrb	r3, [r2, r3]
 800398e:	f003 031f 	and.w	r3, r3, #31
 8003992:	fa21 f303 	lsr.w	r3, r1, r3
 8003996:	4a0a      	ldr	r2, [pc, #40]	; (80039c0 <HAL_RCC_ClockConfig+0x1bc>)
 8003998:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800399a:	4b0a      	ldr	r3, [pc, #40]	; (80039c4 <HAL_RCC_ClockConfig+0x1c0>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4618      	mov	r0, r3
 80039a0:	f7fe ff30 	bl	8002804 <HAL_InitTick>
 80039a4:	4603      	mov	r3, r0
 80039a6:	72fb      	strb	r3, [r7, #11]

  return status;
 80039a8:	7afb      	ldrb	r3, [r7, #11]
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3710      	adds	r7, #16
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}
 80039b2:	bf00      	nop
 80039b4:	40022000 	.word	0x40022000
 80039b8:	40021000 	.word	0x40021000
 80039bc:	080087d8 	.word	0x080087d8
 80039c0:	200000d8 	.word	0x200000d8
 80039c4:	200000e0 	.word	0x200000e0

080039c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b089      	sub	sp, #36	; 0x24
 80039cc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80039ce:	2300      	movs	r3, #0
 80039d0:	61fb      	str	r3, [r7, #28]
 80039d2:	2300      	movs	r3, #0
 80039d4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039d6:	4b3d      	ldr	r3, [pc, #244]	; (8003acc <HAL_RCC_GetSysClockFreq+0x104>)
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	f003 030c 	and.w	r3, r3, #12
 80039de:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80039e0:	4b3a      	ldr	r3, [pc, #232]	; (8003acc <HAL_RCC_GetSysClockFreq+0x104>)
 80039e2:	68db      	ldr	r3, [r3, #12]
 80039e4:	f003 0303 	and.w	r3, r3, #3
 80039e8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d005      	beq.n	80039fc <HAL_RCC_GetSysClockFreq+0x34>
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	2b0c      	cmp	r3, #12
 80039f4:	d121      	bne.n	8003a3a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2b01      	cmp	r3, #1
 80039fa:	d11e      	bne.n	8003a3a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80039fc:	4b33      	ldr	r3, [pc, #204]	; (8003acc <HAL_RCC_GetSysClockFreq+0x104>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 0308 	and.w	r3, r3, #8
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d107      	bne.n	8003a18 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003a08:	4b30      	ldr	r3, [pc, #192]	; (8003acc <HAL_RCC_GetSysClockFreq+0x104>)
 8003a0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a0e:	0a1b      	lsrs	r3, r3, #8
 8003a10:	f003 030f 	and.w	r3, r3, #15
 8003a14:	61fb      	str	r3, [r7, #28]
 8003a16:	e005      	b.n	8003a24 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003a18:	4b2c      	ldr	r3, [pc, #176]	; (8003acc <HAL_RCC_GetSysClockFreq+0x104>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	091b      	lsrs	r3, r3, #4
 8003a1e:	f003 030f 	and.w	r3, r3, #15
 8003a22:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003a24:	4a2a      	ldr	r2, [pc, #168]	; (8003ad0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a26:	69fb      	ldr	r3, [r7, #28]
 8003a28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a2c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d10d      	bne.n	8003a50 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003a34:	69fb      	ldr	r3, [r7, #28]
 8003a36:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a38:	e00a      	b.n	8003a50 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	2b04      	cmp	r3, #4
 8003a3e:	d102      	bne.n	8003a46 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003a40:	4b24      	ldr	r3, [pc, #144]	; (8003ad4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003a42:	61bb      	str	r3, [r7, #24]
 8003a44:	e004      	b.n	8003a50 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	2b08      	cmp	r3, #8
 8003a4a:	d101      	bne.n	8003a50 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003a4c:	4b22      	ldr	r3, [pc, #136]	; (8003ad8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003a4e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	2b0c      	cmp	r3, #12
 8003a54:	d133      	bne.n	8003abe <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003a56:	4b1d      	ldr	r3, [pc, #116]	; (8003acc <HAL_RCC_GetSysClockFreq+0x104>)
 8003a58:	68db      	ldr	r3, [r3, #12]
 8003a5a:	f003 0303 	and.w	r3, r3, #3
 8003a5e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	2b02      	cmp	r3, #2
 8003a64:	d002      	beq.n	8003a6c <HAL_RCC_GetSysClockFreq+0xa4>
 8003a66:	2b03      	cmp	r3, #3
 8003a68:	d003      	beq.n	8003a72 <HAL_RCC_GetSysClockFreq+0xaa>
 8003a6a:	e005      	b.n	8003a78 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003a6c:	4b19      	ldr	r3, [pc, #100]	; (8003ad4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003a6e:	617b      	str	r3, [r7, #20]
      break;
 8003a70:	e005      	b.n	8003a7e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003a72:	4b19      	ldr	r3, [pc, #100]	; (8003ad8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003a74:	617b      	str	r3, [r7, #20]
      break;
 8003a76:	e002      	b.n	8003a7e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003a78:	69fb      	ldr	r3, [r7, #28]
 8003a7a:	617b      	str	r3, [r7, #20]
      break;
 8003a7c:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003a7e:	4b13      	ldr	r3, [pc, #76]	; (8003acc <HAL_RCC_GetSysClockFreq+0x104>)
 8003a80:	68db      	ldr	r3, [r3, #12]
 8003a82:	091b      	lsrs	r3, r3, #4
 8003a84:	f003 0307 	and.w	r3, r3, #7
 8003a88:	3301      	adds	r3, #1
 8003a8a:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003a8c:	4b0f      	ldr	r3, [pc, #60]	; (8003acc <HAL_RCC_GetSysClockFreq+0x104>)
 8003a8e:	68db      	ldr	r3, [r3, #12]
 8003a90:	0a1b      	lsrs	r3, r3, #8
 8003a92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a96:	697a      	ldr	r2, [r7, #20]
 8003a98:	fb02 f203 	mul.w	r2, r2, r3
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aa2:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003aa4:	4b09      	ldr	r3, [pc, #36]	; (8003acc <HAL_RCC_GetSysClockFreq+0x104>)
 8003aa6:	68db      	ldr	r3, [r3, #12]
 8003aa8:	0e5b      	lsrs	r3, r3, #25
 8003aaa:	f003 0303 	and.w	r3, r3, #3
 8003aae:	3301      	adds	r3, #1
 8003ab0:	005b      	lsls	r3, r3, #1
 8003ab2:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003ab4:	697a      	ldr	r2, [r7, #20]
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003abc:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003abe:	69bb      	ldr	r3, [r7, #24]
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	3724      	adds	r7, #36	; 0x24
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aca:	4770      	bx	lr
 8003acc:	40021000 	.word	0x40021000
 8003ad0:	080087f0 	.word	0x080087f0
 8003ad4:	00f42400 	.word	0x00f42400
 8003ad8:	007a1200 	.word	0x007a1200

08003adc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003adc:	b480      	push	{r7}
 8003ade:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ae0:	4b03      	ldr	r3, [pc, #12]	; (8003af0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aec:	4770      	bx	lr
 8003aee:	bf00      	nop
 8003af0:	200000d8 	.word	0x200000d8

08003af4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003af8:	f7ff fff0 	bl	8003adc <HAL_RCC_GetHCLKFreq>
 8003afc:	4601      	mov	r1, r0
 8003afe:	4b06      	ldr	r3, [pc, #24]	; (8003b18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	0a1b      	lsrs	r3, r3, #8
 8003b04:	f003 0307 	and.w	r3, r3, #7
 8003b08:	4a04      	ldr	r2, [pc, #16]	; (8003b1c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003b0a:	5cd3      	ldrb	r3, [r2, r3]
 8003b0c:	f003 031f 	and.w	r3, r3, #31
 8003b10:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	bd80      	pop	{r7, pc}
 8003b18:	40021000 	.word	0x40021000
 8003b1c:	080087e8 	.word	0x080087e8

08003b20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003b24:	f7ff ffda 	bl	8003adc <HAL_RCC_GetHCLKFreq>
 8003b28:	4601      	mov	r1, r0
 8003b2a:	4b06      	ldr	r3, [pc, #24]	; (8003b44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	0adb      	lsrs	r3, r3, #11
 8003b30:	f003 0307 	and.w	r3, r3, #7
 8003b34:	4a04      	ldr	r2, [pc, #16]	; (8003b48 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003b36:	5cd3      	ldrb	r3, [r2, r3]
 8003b38:	f003 031f 	and.w	r3, r3, #31
 8003b3c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	bd80      	pop	{r7, pc}
 8003b44:	40021000 	.word	0x40021000
 8003b48:	080087e8 	.word	0x080087e8

08003b4c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b086      	sub	sp, #24
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003b54:	2300      	movs	r3, #0
 8003b56:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003b58:	4b2a      	ldr	r3, [pc, #168]	; (8003c04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d003      	beq.n	8003b6c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003b64:	f7ff f9ca 	bl	8002efc <HAL_PWREx_GetVoltageRange>
 8003b68:	6178      	str	r0, [r7, #20]
 8003b6a:	e014      	b.n	8003b96 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003b6c:	4b25      	ldr	r3, [pc, #148]	; (8003c04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b70:	4a24      	ldr	r2, [pc, #144]	; (8003c04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b76:	6593      	str	r3, [r2, #88]	; 0x58
 8003b78:	4b22      	ldr	r3, [pc, #136]	; (8003c04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b80:	60fb      	str	r3, [r7, #12]
 8003b82:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003b84:	f7ff f9ba 	bl	8002efc <HAL_PWREx_GetVoltageRange>
 8003b88:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003b8a:	4b1e      	ldr	r3, [pc, #120]	; (8003c04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b8e:	4a1d      	ldr	r2, [pc, #116]	; (8003c04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b94:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b9c:	d10b      	bne.n	8003bb6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2b80      	cmp	r3, #128	; 0x80
 8003ba2:	d919      	bls.n	8003bd8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2ba0      	cmp	r3, #160	; 0xa0
 8003ba8:	d902      	bls.n	8003bb0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003baa:	2302      	movs	r3, #2
 8003bac:	613b      	str	r3, [r7, #16]
 8003bae:	e013      	b.n	8003bd8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	613b      	str	r3, [r7, #16]
 8003bb4:	e010      	b.n	8003bd8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2b80      	cmp	r3, #128	; 0x80
 8003bba:	d902      	bls.n	8003bc2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003bbc:	2303      	movs	r3, #3
 8003bbe:	613b      	str	r3, [r7, #16]
 8003bc0:	e00a      	b.n	8003bd8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2b80      	cmp	r3, #128	; 0x80
 8003bc6:	d102      	bne.n	8003bce <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003bc8:	2302      	movs	r3, #2
 8003bca:	613b      	str	r3, [r7, #16]
 8003bcc:	e004      	b.n	8003bd8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2b70      	cmp	r3, #112	; 0x70
 8003bd2:	d101      	bne.n	8003bd8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003bd8:	4b0b      	ldr	r3, [pc, #44]	; (8003c08 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f023 0207 	bic.w	r2, r3, #7
 8003be0:	4909      	ldr	r1, [pc, #36]	; (8003c08 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	4313      	orrs	r3, r2
 8003be6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003be8:	4b07      	ldr	r3, [pc, #28]	; (8003c08 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f003 0307 	and.w	r3, r3, #7
 8003bf0:	693a      	ldr	r2, [r7, #16]
 8003bf2:	429a      	cmp	r2, r3
 8003bf4:	d001      	beq.n	8003bfa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e000      	b.n	8003bfc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003bfa:	2300      	movs	r3, #0
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	3718      	adds	r7, #24
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}
 8003c04:	40021000 	.word	0x40021000
 8003c08:	40022000 	.word	0x40022000

08003c0c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b086      	sub	sp, #24
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003c14:	2300      	movs	r3, #0
 8003c16:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003c18:	2300      	movs	r3, #0
 8003c1a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d02f      	beq.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c2c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003c30:	d005      	beq.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003c32:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003c36:	d015      	beq.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x58>
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d007      	beq.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x40>
 8003c3c:	e00f      	b.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x52>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003c3e:	4b5d      	ldr	r3, [pc, #372]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003c40:	68db      	ldr	r3, [r3, #12]
 8003c42:	4a5c      	ldr	r2, [pc, #368]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003c44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c48:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003c4a:	e00c      	b.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x5a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	3304      	adds	r3, #4
 8003c50:	2100      	movs	r1, #0
 8003c52:	4618      	mov	r0, r3
 8003c54:	f000 fa44 	bl	80040e0 <RCCEx_PLLSAI1_Config>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003c5c:	e003      	b.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x5a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	74fb      	strb	r3, [r7, #19]
      break;
 8003c62:	e000      	b.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x5a>
      break;
 8003c64:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c66:	7cfb      	ldrb	r3, [r7, #19]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d10b      	bne.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003c6c:	4b51      	ldr	r3, [pc, #324]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c72:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c7a:	494e      	ldr	r1, [pc, #312]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003c82:	e001      	b.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c84:	7cfb      	ldrb	r3, [r7, #19]
 8003c86:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	f000 809e 	beq.w	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c96:	2300      	movs	r3, #0
 8003c98:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003c9a:	4b46      	ldr	r3, [pc, #280]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003c9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d101      	bne.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e000      	b.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8003caa:	2300      	movs	r3, #0
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d00d      	beq.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cb0:	4b40      	ldr	r3, [pc, #256]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003cb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cb4:	4a3f      	ldr	r2, [pc, #252]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003cb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cba:	6593      	str	r3, [r2, #88]	; 0x58
 8003cbc:	4b3d      	ldr	r3, [pc, #244]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003cbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cc4:	60bb      	str	r3, [r7, #8]
 8003cc6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ccc:	4b3a      	ldr	r3, [pc, #232]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a39      	ldr	r2, [pc, #228]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003cd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cd6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003cd8:	f7fe fde4 	bl	80028a4 <HAL_GetTick>
 8003cdc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003cde:	e009      	b.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ce0:	f7fe fde0 	bl	80028a4 <HAL_GetTick>
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	1ad3      	subs	r3, r2, r3
 8003cea:	2b02      	cmp	r3, #2
 8003cec:	d902      	bls.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        ret = HAL_TIMEOUT;
 8003cee:	2303      	movs	r3, #3
 8003cf0:	74fb      	strb	r3, [r7, #19]
        break;
 8003cf2:	e005      	b.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003cf4:	4b30      	ldr	r3, [pc, #192]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d0ef      	beq.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      }
    }

    if(ret == HAL_OK)
 8003d00:	7cfb      	ldrb	r3, [r7, #19]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d15a      	bne.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003d06:	4b2b      	ldr	r3, [pc, #172]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003d08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d10:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d01e      	beq.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d1c:	697a      	ldr	r2, [r7, #20]
 8003d1e:	429a      	cmp	r2, r3
 8003d20:	d019      	beq.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x14a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003d22:	4b24      	ldr	r3, [pc, #144]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003d24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d2c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003d2e:	4b21      	ldr	r3, [pc, #132]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003d30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d34:	4a1f      	ldr	r2, [pc, #124]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003d36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d3a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003d3e:	4b1d      	ldr	r3, [pc, #116]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003d40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d44:	4a1b      	ldr	r2, [pc, #108]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003d46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003d4e:	4a19      	ldr	r2, [pc, #100]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	f003 0301 	and.w	r3, r3, #1
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d016      	beq.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x182>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d60:	f7fe fda0 	bl	80028a4 <HAL_GetTick>
 8003d64:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d66:	e00b      	b.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x174>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d68:	f7fe fd9c 	bl	80028a4 <HAL_GetTick>
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	1ad3      	subs	r3, r2, r3
 8003d72:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d902      	bls.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x174>
          {
            ret = HAL_TIMEOUT;
 8003d7a:	2303      	movs	r3, #3
 8003d7c:	74fb      	strb	r3, [r7, #19]
            break;
 8003d7e:	e006      	b.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x182>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d80:	4b0c      	ldr	r3, [pc, #48]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003d82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d86:	f003 0302 	and.w	r3, r3, #2
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d0ec      	beq.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x15c>
          }
        }
      }

      if(ret == HAL_OK)
 8003d8e:	7cfb      	ldrb	r3, [r7, #19]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d10b      	bne.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d94:	4b07      	ldr	r3, [pc, #28]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003d96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d9a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003da2:	4904      	ldr	r1, [pc, #16]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003da4:	4313      	orrs	r3, r2
 8003da6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003daa:	e009      	b.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003dac:	7cfb      	ldrb	r3, [r7, #19]
 8003dae:	74bb      	strb	r3, [r7, #18]
 8003db0:	e006      	b.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8003db2:	bf00      	nop
 8003db4:	40021000 	.word	0x40021000
 8003db8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dbc:	7cfb      	ldrb	r3, [r7, #19]
 8003dbe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003dc0:	7c7b      	ldrb	r3, [r7, #17]
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	d105      	bne.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dc6:	4b9e      	ldr	r3, [pc, #632]	; (8004040 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003dc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dca:	4a9d      	ldr	r2, [pc, #628]	; (8004040 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003dcc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003dd0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f003 0301 	and.w	r3, r3, #1
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d00a      	beq.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003dde:	4b98      	ldr	r3, [pc, #608]	; (8004040 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003de0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003de4:	f023 0203 	bic.w	r2, r3, #3
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6a1b      	ldr	r3, [r3, #32]
 8003dec:	4994      	ldr	r1, [pc, #592]	; (8004040 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003dee:	4313      	orrs	r3, r2
 8003df0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f003 0302 	and.w	r3, r3, #2
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d00a      	beq.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x20a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003e00:	4b8f      	ldr	r3, [pc, #572]	; (8004040 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003e02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e06:	f023 020c 	bic.w	r2, r3, #12
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e0e:	498c      	ldr	r1, [pc, #560]	; (8004040 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003e10:	4313      	orrs	r3, r2
 8003e12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 0304 	and.w	r3, r3, #4
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d00a      	beq.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003e22:	4b87      	ldr	r3, [pc, #540]	; (8004040 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003e24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e28:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e30:	4983      	ldr	r1, [pc, #524]	; (8004040 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003e32:	4313      	orrs	r3, r2
 8003e34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f003 0308 	and.w	r3, r3, #8
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d00a      	beq.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x24e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003e44:	4b7e      	ldr	r3, [pc, #504]	; (8004040 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003e46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e4a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e52:	497b      	ldr	r1, [pc, #492]	; (8004040 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003e54:	4313      	orrs	r3, r2
 8003e56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f003 0320 	and.w	r3, r3, #32
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d00a      	beq.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x270>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003e66:	4b76      	ldr	r3, [pc, #472]	; (8004040 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003e68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e6c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e74:	4972      	ldr	r1, [pc, #456]	; (8004040 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003e76:	4313      	orrs	r3, r2
 8003e78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d00a      	beq.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003e88:	4b6d      	ldr	r3, [pc, #436]	; (8004040 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003e8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e8e:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e96:	496a      	ldr	r1, [pc, #424]	; (8004040 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d00a      	beq.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003eaa:	4b65      	ldr	r3, [pc, #404]	; (8004040 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003eac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eb0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003eb8:	4961      	ldr	r1, [pc, #388]	; (8004040 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d00a      	beq.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003ecc:	4b5c      	ldr	r3, [pc, #368]	; (8004040 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003ece:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ed2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eda:	4959      	ldr	r1, [pc, #356]	; (8004040 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003edc:	4313      	orrs	r3, r2
 8003ede:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d00a      	beq.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003eee:	4b54      	ldr	r3, [pc, #336]	; (8004040 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003ef0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ef4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003efc:	4950      	ldr	r1, [pc, #320]	; (8004040 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003efe:	4313      	orrs	r3, r2
 8003f00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d00a      	beq.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003f10:	4b4b      	ldr	r3, [pc, #300]	; (8004040 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f16:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f1e:	4948      	ldr	r1, [pc, #288]	; (8004040 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003f20:	4313      	orrs	r3, r2
 8003f22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d00a      	beq.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x33c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003f32:	4b43      	ldr	r3, [pc, #268]	; (8004040 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003f34:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003f38:	f023 0203 	bic.w	r2, r3, #3
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f40:	493f      	ldr	r1, [pc, #252]	; (8004040 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003f42:	4313      	orrs	r3, r2
 8003f44:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d028      	beq.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x39a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003f54:	4b3a      	ldr	r3, [pc, #232]	; (8004040 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f5a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f62:	4937      	ldr	r1, [pc, #220]	; (8004040 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003f64:	4313      	orrs	r3, r2
 8003f66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f6e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f72:	d106      	bne.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x376>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f74:	4b32      	ldr	r3, [pc, #200]	; (8004040 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003f76:	68db      	ldr	r3, [r3, #12]
 8003f78:	4a31      	ldr	r2, [pc, #196]	; (8004040 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003f7a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f7e:	60d3      	str	r3, [r2, #12]
 8003f80:	e011      	b.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x39a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f86:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003f8a:	d10c      	bne.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x39a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	3304      	adds	r3, #4
 8003f90:	2101      	movs	r1, #1
 8003f92:	4618      	mov	r0, r3
 8003f94:	f000 f8a4 	bl	80040e0 <RCCEx_PLLSAI1_Config>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003f9c:	7cfb      	ldrb	r3, [r7, #19]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d001      	beq.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x39a>
        {
          /* set overall return value */
          status = ret;
 8003fa2:	7cfb      	ldrb	r3, [r7, #19]
 8003fa4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d028      	beq.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003fb2:	4b23      	ldr	r3, [pc, #140]	; (8004040 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003fb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fb8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fc0:	491f      	ldr	r1, [pc, #124]	; (8004040 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fcc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003fd0:	d106      	bne.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003fd2:	4b1b      	ldr	r3, [pc, #108]	; (8004040 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003fd4:	68db      	ldr	r3, [r3, #12]
 8003fd6:	4a1a      	ldr	r2, [pc, #104]	; (8004040 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8003fd8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003fdc:	60d3      	str	r3, [r2, #12]
 8003fde:	e011      	b.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fe4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003fe8:	d10c      	bne.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	3304      	adds	r3, #4
 8003fee:	2101      	movs	r1, #1
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	f000 f875 	bl	80040e0 <RCCEx_PLLSAI1_Config>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ffa:	7cfb      	ldrb	r3, [r7, #19]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d001      	beq.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
      {
        /* set overall return value */
        status = ret;
 8004000:	7cfb      	ldrb	r3, [r7, #19]
 8004002:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800400c:	2b00      	cmp	r3, #0
 800400e:	d02b      	beq.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004010:	4b0b      	ldr	r3, [pc, #44]	; (8004040 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8004012:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004016:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800401e:	4908      	ldr	r1, [pc, #32]	; (8004040 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8004020:	4313      	orrs	r3, r2
 8004022:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800402a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800402e:	d109      	bne.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x438>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004030:	4b03      	ldr	r3, [pc, #12]	; (8004040 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8004032:	68db      	ldr	r3, [r3, #12]
 8004034:	4a02      	ldr	r2, [pc, #8]	; (8004040 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8004036:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800403a:	60d3      	str	r3, [r2, #12]
 800403c:	e014      	b.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x45c>
 800403e:	bf00      	nop
 8004040:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004048:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800404c:	d10c      	bne.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	3304      	adds	r3, #4
 8004052:	2101      	movs	r1, #1
 8004054:	4618      	mov	r0, r3
 8004056:	f000 f843 	bl	80040e0 <RCCEx_PLLSAI1_Config>
 800405a:	4603      	mov	r3, r0
 800405c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800405e:	7cfb      	ldrb	r3, [r7, #19]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d001      	beq.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x45c>
      {
        /* set overall return value */
        status = ret;
 8004064:	7cfb      	ldrb	r3, [r7, #19]
 8004066:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004070:	2b00      	cmp	r3, #0
 8004072:	d01c      	beq.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0x4a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004074:	4b19      	ldr	r3, [pc, #100]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 8004076:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800407a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004082:	4916      	ldr	r1, [pc, #88]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 8004084:	4313      	orrs	r3, r2
 8004086:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800408e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004092:	d10c      	bne.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0x4a2>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	3304      	adds	r3, #4
 8004098:	2102      	movs	r1, #2
 800409a:	4618      	mov	r0, r3
 800409c:	f000 f820 	bl	80040e0 <RCCEx_PLLSAI1_Config>
 80040a0:	4603      	mov	r3, r0
 80040a2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80040a4:	7cfb      	ldrb	r3, [r7, #19]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d001      	beq.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0x4a2>
      {
        /* set overall return value */
        status = ret;
 80040aa:	7cfb      	ldrb	r3, [r7, #19]
 80040ac:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d00a      	beq.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80040ba:	4b08      	ldr	r3, [pc, #32]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 80040bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040c0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040c8:	4904      	ldr	r1, [pc, #16]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 80040ca:	4313      	orrs	r3, r2
 80040cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80040d0:	7cbb      	ldrb	r3, [r7, #18]
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	3718      	adds	r7, #24
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}
 80040da:	bf00      	nop
 80040dc:	40021000 	.word	0x40021000

080040e0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b084      	sub	sp, #16
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
 80040e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80040ea:	2300      	movs	r3, #0
 80040ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80040ee:	4b73      	ldr	r3, [pc, #460]	; (80042bc <RCCEx_PLLSAI1_Config+0x1dc>)
 80040f0:	68db      	ldr	r3, [r3, #12]
 80040f2:	f003 0303 	and.w	r3, r3, #3
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d018      	beq.n	800412c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80040fa:	4b70      	ldr	r3, [pc, #448]	; (80042bc <RCCEx_PLLSAI1_Config+0x1dc>)
 80040fc:	68db      	ldr	r3, [r3, #12]
 80040fe:	f003 0203 	and.w	r2, r3, #3
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	429a      	cmp	r2, r3
 8004108:	d10d      	bne.n	8004126 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
       ||
 800410e:	2b00      	cmp	r3, #0
 8004110:	d009      	beq.n	8004126 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004112:	4b6a      	ldr	r3, [pc, #424]	; (80042bc <RCCEx_PLLSAI1_Config+0x1dc>)
 8004114:	68db      	ldr	r3, [r3, #12]
 8004116:	091b      	lsrs	r3, r3, #4
 8004118:	f003 0307 	and.w	r3, r3, #7
 800411c:	1c5a      	adds	r2, r3, #1
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	685b      	ldr	r3, [r3, #4]
       ||
 8004122:	429a      	cmp	r2, r3
 8004124:	d044      	beq.n	80041b0 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	73fb      	strb	r3, [r7, #15]
 800412a:	e041      	b.n	80041b0 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	2b02      	cmp	r3, #2
 8004132:	d00c      	beq.n	800414e <RCCEx_PLLSAI1_Config+0x6e>
 8004134:	2b03      	cmp	r3, #3
 8004136:	d013      	beq.n	8004160 <RCCEx_PLLSAI1_Config+0x80>
 8004138:	2b01      	cmp	r3, #1
 800413a:	d120      	bne.n	800417e <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800413c:	4b5f      	ldr	r3, [pc, #380]	; (80042bc <RCCEx_PLLSAI1_Config+0x1dc>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f003 0302 	and.w	r3, r3, #2
 8004144:	2b00      	cmp	r3, #0
 8004146:	d11d      	bne.n	8004184 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8004148:	2301      	movs	r3, #1
 800414a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800414c:	e01a      	b.n	8004184 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800414e:	4b5b      	ldr	r3, [pc, #364]	; (80042bc <RCCEx_PLLSAI1_Config+0x1dc>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004156:	2b00      	cmp	r3, #0
 8004158:	d116      	bne.n	8004188 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800415e:	e013      	b.n	8004188 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004160:	4b56      	ldr	r3, [pc, #344]	; (80042bc <RCCEx_PLLSAI1_Config+0x1dc>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004168:	2b00      	cmp	r3, #0
 800416a:	d10f      	bne.n	800418c <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800416c:	4b53      	ldr	r3, [pc, #332]	; (80042bc <RCCEx_PLLSAI1_Config+0x1dc>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004174:	2b00      	cmp	r3, #0
 8004176:	d109      	bne.n	800418c <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8004178:	2301      	movs	r3, #1
 800417a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800417c:	e006      	b.n	800418c <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	73fb      	strb	r3, [r7, #15]
      break;
 8004182:	e004      	b.n	800418e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004184:	bf00      	nop
 8004186:	e002      	b.n	800418e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004188:	bf00      	nop
 800418a:	e000      	b.n	800418e <RCCEx_PLLSAI1_Config+0xae>
      break;
 800418c:	bf00      	nop
    }

    if(status == HAL_OK)
 800418e:	7bfb      	ldrb	r3, [r7, #15]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d10d      	bne.n	80041b0 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004194:	4b49      	ldr	r3, [pc, #292]	; (80042bc <RCCEx_PLLSAI1_Config+0x1dc>)
 8004196:	68db      	ldr	r3, [r3, #12]
 8004198:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6819      	ldr	r1, [r3, #0]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	3b01      	subs	r3, #1
 80041a6:	011b      	lsls	r3, r3, #4
 80041a8:	430b      	orrs	r3, r1
 80041aa:	4944      	ldr	r1, [pc, #272]	; (80042bc <RCCEx_PLLSAI1_Config+0x1dc>)
 80041ac:	4313      	orrs	r3, r2
 80041ae:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80041b0:	7bfb      	ldrb	r3, [r7, #15]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d17c      	bne.n	80042b0 <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80041b6:	4b41      	ldr	r3, [pc, #260]	; (80042bc <RCCEx_PLLSAI1_Config+0x1dc>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a40      	ldr	r2, [pc, #256]	; (80042bc <RCCEx_PLLSAI1_Config+0x1dc>)
 80041bc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80041c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041c2:	f7fe fb6f 	bl	80028a4 <HAL_GetTick>
 80041c6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80041c8:	e009      	b.n	80041de <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80041ca:	f7fe fb6b 	bl	80028a4 <HAL_GetTick>
 80041ce:	4602      	mov	r2, r0
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	1ad3      	subs	r3, r2, r3
 80041d4:	2b02      	cmp	r3, #2
 80041d6:	d902      	bls.n	80041de <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80041d8:	2303      	movs	r3, #3
 80041da:	73fb      	strb	r3, [r7, #15]
        break;
 80041dc:	e005      	b.n	80041ea <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80041de:	4b37      	ldr	r3, [pc, #220]	; (80042bc <RCCEx_PLLSAI1_Config+0x1dc>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d1ef      	bne.n	80041ca <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80041ea:	7bfb      	ldrb	r3, [r7, #15]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d15f      	bne.n	80042b0 <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d110      	bne.n	8004218 <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80041f6:	4b31      	ldr	r3, [pc, #196]	; (80042bc <RCCEx_PLLSAI1_Config+0x1dc>)
 80041f8:	691b      	ldr	r3, [r3, #16]
 80041fa:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80041fe:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004202:	687a      	ldr	r2, [r7, #4]
 8004204:	6892      	ldr	r2, [r2, #8]
 8004206:	0211      	lsls	r1, r2, #8
 8004208:	687a      	ldr	r2, [r7, #4]
 800420a:	68d2      	ldr	r2, [r2, #12]
 800420c:	06d2      	lsls	r2, r2, #27
 800420e:	430a      	orrs	r2, r1
 8004210:	492a      	ldr	r1, [pc, #168]	; (80042bc <RCCEx_PLLSAI1_Config+0x1dc>)
 8004212:	4313      	orrs	r3, r2
 8004214:	610b      	str	r3, [r1, #16]
 8004216:	e027      	b.n	8004268 <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	2b01      	cmp	r3, #1
 800421c:	d112      	bne.n	8004244 <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800421e:	4b27      	ldr	r3, [pc, #156]	; (80042bc <RCCEx_PLLSAI1_Config+0x1dc>)
 8004220:	691b      	ldr	r3, [r3, #16]
 8004222:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004226:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800422a:	687a      	ldr	r2, [r7, #4]
 800422c:	6892      	ldr	r2, [r2, #8]
 800422e:	0211      	lsls	r1, r2, #8
 8004230:	687a      	ldr	r2, [r7, #4]
 8004232:	6912      	ldr	r2, [r2, #16]
 8004234:	0852      	lsrs	r2, r2, #1
 8004236:	3a01      	subs	r2, #1
 8004238:	0552      	lsls	r2, r2, #21
 800423a:	430a      	orrs	r2, r1
 800423c:	491f      	ldr	r1, [pc, #124]	; (80042bc <RCCEx_PLLSAI1_Config+0x1dc>)
 800423e:	4313      	orrs	r3, r2
 8004240:	610b      	str	r3, [r1, #16]
 8004242:	e011      	b.n	8004268 <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004244:	4b1d      	ldr	r3, [pc, #116]	; (80042bc <RCCEx_PLLSAI1_Config+0x1dc>)
 8004246:	691b      	ldr	r3, [r3, #16]
 8004248:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800424c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004250:	687a      	ldr	r2, [r7, #4]
 8004252:	6892      	ldr	r2, [r2, #8]
 8004254:	0211      	lsls	r1, r2, #8
 8004256:	687a      	ldr	r2, [r7, #4]
 8004258:	6952      	ldr	r2, [r2, #20]
 800425a:	0852      	lsrs	r2, r2, #1
 800425c:	3a01      	subs	r2, #1
 800425e:	0652      	lsls	r2, r2, #25
 8004260:	430a      	orrs	r2, r1
 8004262:	4916      	ldr	r1, [pc, #88]	; (80042bc <RCCEx_PLLSAI1_Config+0x1dc>)
 8004264:	4313      	orrs	r3, r2
 8004266:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004268:	4b14      	ldr	r3, [pc, #80]	; (80042bc <RCCEx_PLLSAI1_Config+0x1dc>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a13      	ldr	r2, [pc, #76]	; (80042bc <RCCEx_PLLSAI1_Config+0x1dc>)
 800426e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004272:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004274:	f7fe fb16 	bl	80028a4 <HAL_GetTick>
 8004278:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800427a:	e009      	b.n	8004290 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800427c:	f7fe fb12 	bl	80028a4 <HAL_GetTick>
 8004280:	4602      	mov	r2, r0
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	1ad3      	subs	r3, r2, r3
 8004286:	2b02      	cmp	r3, #2
 8004288:	d902      	bls.n	8004290 <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 800428a:	2303      	movs	r3, #3
 800428c:	73fb      	strb	r3, [r7, #15]
          break;
 800428e:	e005      	b.n	800429c <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004290:	4b0a      	ldr	r3, [pc, #40]	; (80042bc <RCCEx_PLLSAI1_Config+0x1dc>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004298:	2b00      	cmp	r3, #0
 800429a:	d0ef      	beq.n	800427c <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 800429c:	7bfb      	ldrb	r3, [r7, #15]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d106      	bne.n	80042b0 <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80042a2:	4b06      	ldr	r3, [pc, #24]	; (80042bc <RCCEx_PLLSAI1_Config+0x1dc>)
 80042a4:	691a      	ldr	r2, [r3, #16]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	699b      	ldr	r3, [r3, #24]
 80042aa:	4904      	ldr	r1, [pc, #16]	; (80042bc <RCCEx_PLLSAI1_Config+0x1dc>)
 80042ac:	4313      	orrs	r3, r2
 80042ae:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80042b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	3710      	adds	r7, #16
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}
 80042ba:	bf00      	nop
 80042bc:	40021000 	.word	0x40021000

080042c0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b084      	sub	sp, #16
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80042c8:	2301      	movs	r3, #1
 80042ca:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d06c      	beq.n	80043ac <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80042d8:	b2db      	uxtb	r3, r3
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d106      	bne.n	80042ec <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2200      	movs	r2, #0
 80042e2:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	f7fd ff8c 	bl	8002204 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2202      	movs	r2, #2
 80042f0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	22ca      	movs	r2, #202	; 0xca
 80042fa:	625a      	str	r2, [r3, #36]	; 0x24
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	2253      	movs	r2, #83	; 0x53
 8004302:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8004304:	6878      	ldr	r0, [r7, #4]
 8004306:	f000 fbcb 	bl	8004aa0 <RTC_EnterInitMode>
 800430a:	4603      	mov	r3, r0
 800430c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800430e:	7bfb      	ldrb	r3, [r7, #15]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d14b      	bne.n	80043ac <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	687a      	ldr	r2, [r7, #4]
 800431c:	6812      	ldr	r2, [r2, #0]
 800431e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004322:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004326:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	6899      	ldr	r1, [r3, #8]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	685a      	ldr	r2, [r3, #4]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	691b      	ldr	r3, [r3, #16]
 8004336:	431a      	orrs	r2, r3
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	699b      	ldr	r3, [r3, #24]
 800433c:	431a      	orrs	r2, r3
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	430a      	orrs	r2, r1
 8004344:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	687a      	ldr	r2, [r7, #4]
 800434c:	68d2      	ldr	r2, [r2, #12]
 800434e:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	6919      	ldr	r1, [r3, #16]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	041a      	lsls	r2, r3, #16
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	430a      	orrs	r2, r1
 8004362:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8004364:	6878      	ldr	r0, [r7, #4]
 8004366:	f000 fbcf 	bl	8004b08 <RTC_ExitInitMode>
 800436a:	4603      	mov	r3, r0
 800436c:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800436e:	7bfb      	ldrb	r3, [r7, #15]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d11b      	bne.n	80043ac <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f022 0203 	bic.w	r2, r2, #3
 8004382:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	69da      	ldr	r2, [r3, #28]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	695b      	ldr	r3, [r3, #20]
 8004392:	431a      	orrs	r2, r3
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	430a      	orrs	r2, r1
 800439a:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	22ff      	movs	r2, #255	; 0xff
 80043a2:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_READY;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2201      	movs	r2, #1
 80043a8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 80043ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3710      	adds	r7, #16
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}

080043b6 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80043b6:	b590      	push	{r4, r7, lr}
 80043b8:	b087      	sub	sp, #28
 80043ba:	af00      	add	r7, sp, #0
 80043bc:	60f8      	str	r0, [r7, #12]
 80043be:	60b9      	str	r1, [r7, #8]
 80043c0:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80043c8:	2b01      	cmp	r3, #1
 80043ca:	d101      	bne.n	80043d0 <HAL_RTC_SetTime+0x1a>
 80043cc:	2302      	movs	r3, #2
 80043ce:	e08b      	b.n	80044e8 <HAL_RTC_SetTime+0x132>
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2201      	movs	r2, #1
 80043d4:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	2202      	movs	r2, #2
 80043dc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	22ca      	movs	r2, #202	; 0xca
 80043e6:	625a      	str	r2, [r3, #36]	; 0x24
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	2253      	movs	r2, #83	; 0x53
 80043ee:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80043f0:	68f8      	ldr	r0, [r7, #12]
 80043f2:	f000 fb55 	bl	8004aa0 <RTC_EnterInitMode>
 80043f6:	4603      	mov	r3, r0
 80043f8:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80043fa:	7cfb      	ldrb	r3, [r7, #19]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d163      	bne.n	80044c8 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d126      	bne.n	8004454 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004410:	2b00      	cmp	r3, #0
 8004412:	d102      	bne.n	800441a <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	2200      	movs	r2, #0
 8004418:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	781b      	ldrb	r3, [r3, #0]
 800441e:	4618      	mov	r0, r3
 8004420:	f000 fbb0 	bl	8004b84 <RTC_ByteToBcd2>
 8004424:	4603      	mov	r3, r0
 8004426:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	785b      	ldrb	r3, [r3, #1]
 800442c:	4618      	mov	r0, r3
 800442e:	f000 fba9 	bl	8004b84 <RTC_ByteToBcd2>
 8004432:	4603      	mov	r3, r0
 8004434:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004436:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	789b      	ldrb	r3, [r3, #2]
 800443c:	4618      	mov	r0, r3
 800443e:	f000 fba1 	bl	8004b84 <RTC_ByteToBcd2>
 8004442:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004444:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	78db      	ldrb	r3, [r3, #3]
 800444c:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800444e:	4313      	orrs	r3, r2
 8004450:	617b      	str	r3, [r7, #20]
 8004452:	e018      	b.n	8004486 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800445e:	2b00      	cmp	r3, #0
 8004460:	d102      	bne.n	8004468 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	2200      	movs	r2, #0
 8004466:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	781b      	ldrb	r3, [r3, #0]
 800446c:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	785b      	ldrb	r3, [r3, #1]
 8004472:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004474:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8004476:	68ba      	ldr	r2, [r7, #8]
 8004478:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800447a:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	78db      	ldrb	r3, [r3, #3]
 8004480:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004482:	4313      	orrs	r3, r2
 8004484:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681a      	ldr	r2, [r3, #0]
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004490:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004494:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	689a      	ldr	r2, [r3, #8]
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80044a4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	6899      	ldr	r1, [r3, #8]
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	68da      	ldr	r2, [r3, #12]
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	691b      	ldr	r3, [r3, #16]
 80044b4:	431a      	orrs	r2, r3
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	430a      	orrs	r2, r1
 80044bc:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80044be:	68f8      	ldr	r0, [r7, #12]
 80044c0:	f000 fb22 	bl	8004b08 <RTC_ExitInitMode>
 80044c4:	4603      	mov	r3, r0
 80044c6:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	22ff      	movs	r2, #255	; 0xff
 80044ce:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80044d0:	7cfb      	ldrb	r3, [r7, #19]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d103      	bne.n	80044de <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	2201      	movs	r2, #1
 80044da:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	2200      	movs	r2, #0
 80044e2:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80044e6:	7cfb      	ldrb	r3, [r7, #19]
}
 80044e8:	4618      	mov	r0, r3
 80044ea:	371c      	adds	r7, #28
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd90      	pop	{r4, r7, pc}

080044f0 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b086      	sub	sp, #24
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	60f8      	str	r0, [r7, #12]
 80044f8:	60b9      	str	r1, [r7, #8]
 80044fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	691b      	ldr	r3, [r3, #16]
 800450c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800451e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004522:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	0c1b      	lsrs	r3, r3, #16
 8004528:	b2db      	uxtb	r3, r3
 800452a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800452e:	b2da      	uxtb	r2, r3
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	0a1b      	lsrs	r3, r3, #8
 8004538:	b2db      	uxtb	r3, r3
 800453a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800453e:	b2da      	uxtb	r2, r3
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	b2db      	uxtb	r3, r3
 8004548:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800454c:	b2da      	uxtb	r2, r3
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	0d9b      	lsrs	r3, r3, #22
 8004556:	b2db      	uxtb	r3, r3
 8004558:	f003 0301 	and.w	r3, r3, #1
 800455c:	b2da      	uxtb	r2, r3
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d11a      	bne.n	800459e <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	781b      	ldrb	r3, [r3, #0]
 800456c:	4618      	mov	r0, r3
 800456e:	f000 fb29 	bl	8004bc4 <RTC_Bcd2ToByte>
 8004572:	4603      	mov	r3, r0
 8004574:	461a      	mov	r2, r3
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	785b      	ldrb	r3, [r3, #1]
 800457e:	4618      	mov	r0, r3
 8004580:	f000 fb20 	bl	8004bc4 <RTC_Bcd2ToByte>
 8004584:	4603      	mov	r3, r0
 8004586:	461a      	mov	r2, r3
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	789b      	ldrb	r3, [r3, #2]
 8004590:	4618      	mov	r0, r3
 8004592:	f000 fb17 	bl	8004bc4 <RTC_Bcd2ToByte>
 8004596:	4603      	mov	r3, r0
 8004598:	461a      	mov	r2, r3
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800459e:	2300      	movs	r3, #0
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	3718      	adds	r7, #24
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bd80      	pop	{r7, pc}

080045a8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80045a8:	b590      	push	{r4, r7, lr}
 80045aa:	b087      	sub	sp, #28
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	60f8      	str	r0, [r7, #12]
 80045b0:	60b9      	str	r1, [r7, #8]
 80045b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80045ba:	2b01      	cmp	r3, #1
 80045bc:	d101      	bne.n	80045c2 <HAL_RTC_SetDate+0x1a>
 80045be:	2302      	movs	r3, #2
 80045c0:	e075      	b.n	80046ae <HAL_RTC_SetDate+0x106>
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	2201      	movs	r2, #1
 80045c6:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2202      	movs	r2, #2
 80045ce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d10e      	bne.n	80045f6 <HAL_RTC_SetDate+0x4e>
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	785b      	ldrb	r3, [r3, #1]
 80045dc:	f003 0310 	and.w	r3, r3, #16
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d008      	beq.n	80045f6 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	785b      	ldrb	r3, [r3, #1]
 80045e8:	f023 0310 	bic.w	r3, r3, #16
 80045ec:	b2db      	uxtb	r3, r3
 80045ee:	330a      	adds	r3, #10
 80045f0:	b2da      	uxtb	r2, r3
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d11c      	bne.n	8004636 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	78db      	ldrb	r3, [r3, #3]
 8004600:	4618      	mov	r0, r3
 8004602:	f000 fabf 	bl	8004b84 <RTC_ByteToBcd2>
 8004606:	4603      	mov	r3, r0
 8004608:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	785b      	ldrb	r3, [r3, #1]
 800460e:	4618      	mov	r0, r3
 8004610:	f000 fab8 	bl	8004b84 <RTC_ByteToBcd2>
 8004614:	4603      	mov	r3, r0
 8004616:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8004618:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	789b      	ldrb	r3, [r3, #2]
 800461e:	4618      	mov	r0, r3
 8004620:	f000 fab0 	bl	8004b84 <RTC_ByteToBcd2>
 8004624:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004626:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	781b      	ldrb	r3, [r3, #0]
 800462e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8004630:	4313      	orrs	r3, r2
 8004632:	617b      	str	r3, [r7, #20]
 8004634:	e00e      	b.n	8004654 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	78db      	ldrb	r3, [r3, #3]
 800463a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	785b      	ldrb	r3, [r3, #1]
 8004640:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004642:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8004644:	68ba      	ldr	r2, [r7, #8]
 8004646:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8004648:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	781b      	ldrb	r3, [r3, #0]
 800464e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004650:	4313      	orrs	r3, r2
 8004652:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	22ca      	movs	r2, #202	; 0xca
 800465a:	625a      	str	r2, [r3, #36]	; 0x24
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	2253      	movs	r2, #83	; 0x53
 8004662:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004664:	68f8      	ldr	r0, [r7, #12]
 8004666:	f000 fa1b 	bl	8004aa0 <RTC_EnterInitMode>
 800466a:	4603      	mov	r3, r0
 800466c:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800466e:	7cfb      	ldrb	r3, [r7, #19]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d10c      	bne.n	800468e <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681a      	ldr	r2, [r3, #0]
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800467e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004682:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004684:	68f8      	ldr	r0, [r7, #12]
 8004686:	f000 fa3f 	bl	8004b08 <RTC_ExitInitMode>
 800468a:	4603      	mov	r3, r0
 800468c:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	22ff      	movs	r2, #255	; 0xff
 8004694:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8004696:	7cfb      	ldrb	r3, [r7, #19]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d103      	bne.n	80046a4 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2201      	movs	r2, #1
 80046a0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	2200      	movs	r2, #0
 80046a8:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80046ac:	7cfb      	ldrb	r3, [r7, #19]
}
 80046ae:	4618      	mov	r0, r3
 80046b0:	371c      	adds	r7, #28
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd90      	pop	{r4, r7, pc}

080046b6 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80046b6:	b580      	push	{r7, lr}
 80046b8:	b086      	sub	sp, #24
 80046ba:	af00      	add	r7, sp, #0
 80046bc:	60f8      	str	r0, [r7, #12]
 80046be:	60b9      	str	r1, [r7, #8]
 80046c0:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80046cc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80046d0:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	0c1b      	lsrs	r3, r3, #16
 80046d6:	b2da      	uxtb	r2, r3
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80046dc:	697b      	ldr	r3, [r7, #20]
 80046de:	0a1b      	lsrs	r3, r3, #8
 80046e0:	b2db      	uxtb	r3, r3
 80046e2:	f003 031f 	and.w	r3, r3, #31
 80046e6:	b2da      	uxtb	r2, r3
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 80046ec:	697b      	ldr	r3, [r7, #20]
 80046ee:	b2db      	uxtb	r3, r3
 80046f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80046f4:	b2da      	uxtb	r2, r3
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	0b5b      	lsrs	r3, r3, #13
 80046fe:	b2db      	uxtb	r3, r3
 8004700:	f003 0307 	and.w	r3, r3, #7
 8004704:	b2da      	uxtb	r2, r3
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d11a      	bne.n	8004746 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	78db      	ldrb	r3, [r3, #3]
 8004714:	4618      	mov	r0, r3
 8004716:	f000 fa55 	bl	8004bc4 <RTC_Bcd2ToByte>
 800471a:	4603      	mov	r3, r0
 800471c:	461a      	mov	r2, r3
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	785b      	ldrb	r3, [r3, #1]
 8004726:	4618      	mov	r0, r3
 8004728:	f000 fa4c 	bl	8004bc4 <RTC_Bcd2ToByte>
 800472c:	4603      	mov	r3, r0
 800472e:	461a      	mov	r2, r3
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	789b      	ldrb	r3, [r3, #2]
 8004738:	4618      	mov	r0, r3
 800473a:	f000 fa43 	bl	8004bc4 <RTC_Bcd2ToByte>
 800473e:	4603      	mov	r3, r0
 8004740:	461a      	mov	r2, r3
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8004746:	2300      	movs	r3, #0
}
 8004748:	4618      	mov	r0, r3
 800474a:	3718      	adds	r7, #24
 800474c:	46bd      	mov	sp, r7
 800474e:	bd80      	pop	{r7, pc}

08004750 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8004750:	b590      	push	{r4, r7, lr}
 8004752:	b089      	sub	sp, #36	; 0x24
 8004754:	af00      	add	r7, sp, #0
 8004756:	60f8      	str	r0, [r7, #12]
 8004758:	60b9      	str	r1, [r7, #8]
 800475a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004762:	2b01      	cmp	r3, #1
 8004764:	d101      	bne.n	800476a <HAL_RTC_SetAlarm_IT+0x1a>
 8004766:	2302      	movs	r3, #2
 8004768:	e127      	b.n	80049ba <HAL_RTC_SetAlarm_IT+0x26a>
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2201      	movs	r2, #1
 800476e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	2202      	movs	r2, #2
 8004776:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if (Format == RTC_FORMAT_BIN)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d137      	bne.n	80047f0 <HAL_RTC_SetAlarm_IT+0xa0>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	689b      	ldr	r3, [r3, #8]
 8004786:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800478a:	2b00      	cmp	r3, #0
 800478c:	d102      	bne.n	8004794 <HAL_RTC_SetAlarm_IT+0x44>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	2200      	movs	r2, #0
 8004792:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	781b      	ldrb	r3, [r3, #0]
 8004798:	4618      	mov	r0, r3
 800479a:	f000 f9f3 	bl	8004b84 <RTC_ByteToBcd2>
 800479e:	4603      	mov	r3, r0
 80047a0:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	785b      	ldrb	r3, [r3, #1]
 80047a6:	4618      	mov	r0, r3
 80047a8:	f000 f9ec 	bl	8004b84 <RTC_ByteToBcd2>
 80047ac:	4603      	mov	r3, r0
 80047ae:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80047b0:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	789b      	ldrb	r3, [r3, #2]
 80047b6:	4618      	mov	r0, r3
 80047b8:	f000 f9e4 	bl	8004b84 <RTC_ByteToBcd2>
 80047bc:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80047be:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	78db      	ldrb	r3, [r3, #3]
 80047c6:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80047c8:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80047d2:	4618      	mov	r0, r3
 80047d4:	f000 f9d6 	bl	8004b84 <RTC_ByteToBcd2>
 80047d8:	4603      	mov	r3, r0
 80047da:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80047dc:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80047e4:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80047ea:	4313      	orrs	r3, r2
 80047ec:	61fb      	str	r3, [r7, #28]
 80047ee:	e023      	b.n	8004838 <HAL_RTC_SetAlarm_IT+0xe8>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d102      	bne.n	8004804 <HAL_RTC_SetAlarm_IT+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	2200      	movs	r2, #0
 8004802:	70da      	strb	r2, [r3, #3]
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

#endif /* USE_FULL_ASSERT */
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	781b      	ldrb	r3, [r3, #0]
 8004808:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	785b      	ldrb	r3, [r3, #1]
 800480e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004810:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004812:	68ba      	ldr	r2, [r7, #8]
 8004814:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004816:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	78db      	ldrb	r3, [r3, #3]
 800481c:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800481e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004826:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004828:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800482e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004834:	4313      	orrs	r3, r2
 8004836:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	685a      	ldr	r2, [r3, #4]
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	69db      	ldr	r3, [r3, #28]
 8004840:	4313      	orrs	r3, r2
 8004842:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	22ca      	movs	r2, #202	; 0xca
 800484a:	625a      	str	r2, [r3, #36]	; 0x24
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	2253      	movs	r2, #83	; 0x53
 8004852:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004858:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800485c:	d14a      	bne.n	80048f4 <HAL_RTC_SetAlarm_IT+0x1a4>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	689a      	ldr	r2, [r3, #8]
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800486c:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	68db      	ldr	r3, [r3, #12]
 8004874:	b2da      	uxtb	r2, r3
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800487e:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRAWF)
    uint32_t tickstart = HAL_GetTick();
 8004880:	f7fe f810 	bl	80028a4 <HAL_GetTick>
 8004884:	6138      	str	r0, [r7, #16]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8004886:	e015      	b.n	80048b4 <HAL_RTC_SetAlarm_IT+0x164>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004888:	f7fe f80c 	bl	80028a4 <HAL_GetTick>
 800488c:	4602      	mov	r2, r0
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	1ad3      	subs	r3, r2, r3
 8004892:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004896:	d90d      	bls.n	80048b4 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	22ff      	movs	r2, #255	; 0xff
 800489e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	2203      	movs	r2, #3
 80048a4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	2200      	movs	r2, #0
 80048ac:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 80048b0:	2303      	movs	r3, #3
 80048b2:	e082      	b.n	80049ba <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	68db      	ldr	r3, [r3, #12]
 80048ba:	f003 0301 	and.w	r3, r3, #1
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d0e2      	beq.n	8004888 <HAL_RTC_SetAlarm_IT+0x138>
      }
    }
#endif

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	69fa      	ldr	r2, [r7, #28]
 80048c8:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	69ba      	ldr	r2, [r7, #24]
 80048d0:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	689a      	ldr	r2, [r3, #8]
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80048e0:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	689a      	ldr	r2, [r3, #8]
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80048f0:	609a      	str	r2, [r3, #8]
 80048f2:	e049      	b.n	8004988 <HAL_RTC_SetAlarm_IT+0x238>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	689a      	ldr	r2, [r3, #8]
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004902:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	68db      	ldr	r3, [r3, #12]
 800490a:	b2da      	uxtb	r2, r3
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f462 7220 	orn	r2, r2, #640	; 0x280
 8004914:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRBWF)
    uint32_t tickstart = HAL_GetTick();
 8004916:	f7fd ffc5 	bl	80028a4 <HAL_GetTick>
 800491a:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800491c:	e015      	b.n	800494a <HAL_RTC_SetAlarm_IT+0x1fa>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800491e:	f7fd ffc1 	bl	80028a4 <HAL_GetTick>
 8004922:	4602      	mov	r2, r0
 8004924:	697b      	ldr	r3, [r7, #20]
 8004926:	1ad3      	subs	r3, r2, r3
 8004928:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800492c:	d90d      	bls.n	800494a <HAL_RTC_SetAlarm_IT+0x1fa>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	22ff      	movs	r2, #255	; 0xff
 8004934:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	2203      	movs	r2, #3
 800493a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	2200      	movs	r2, #0
 8004942:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8004946:	2303      	movs	r3, #3
 8004948:	e037      	b.n	80049ba <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	68db      	ldr	r3, [r3, #12]
 8004950:	f003 0302 	and.w	r3, r3, #2
 8004954:	2b00      	cmp	r3, #0
 8004956:	d0e2      	beq.n	800491e <HAL_RTC_SetAlarm_IT+0x1ce>
      }
    }
#endif

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	69fa      	ldr	r2, [r7, #28]
 800495e:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	69ba      	ldr	r2, [r7, #24]
 8004966:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	689a      	ldr	r2, [r3, #8]
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004976:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	689a      	ldr	r2, [r3, #8]
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004986:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8004988:	4b0e      	ldr	r3, [pc, #56]	; (80049c4 <HAL_RTC_SetAlarm_IT+0x274>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a0d      	ldr	r2, [pc, #52]	; (80049c4 <HAL_RTC_SetAlarm_IT+0x274>)
 800498e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004992:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8004994:	4b0b      	ldr	r3, [pc, #44]	; (80049c4 <HAL_RTC_SetAlarm_IT+0x274>)
 8004996:	689b      	ldr	r3, [r3, #8]
 8004998:	4a0a      	ldr	r2, [pc, #40]	; (80049c4 <HAL_RTC_SetAlarm_IT+0x274>)
 800499a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800499e:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	22ff      	movs	r2, #255	; 0xff
 80049a6:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	2201      	movs	r2, #1
 80049ac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	2200      	movs	r2, #0
 80049b4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80049b8:	2300      	movs	r3, #0
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	3724      	adds	r7, #36	; 0x24
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd90      	pop	{r4, r7, pc}
 80049c2:	bf00      	nop
 80049c4:	40010400 	.word	0x40010400

080049c8 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b082      	sub	sp, #8
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80049d0:	4b1f      	ldr	r3, [pc, #124]	; (8004a50 <HAL_RTC_AlarmIRQHandler+0x88>)
 80049d2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80049d6:	615a      	str	r2, [r3, #20]
  }

#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	689b      	ldr	r3, [r3, #8]
 80049de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d012      	beq.n	8004a0c <HAL_RTC_AlarmIRQHandler+0x44>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	68db      	ldr	r3, [r3, #12]
 80049ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d00b      	beq.n	8004a0c <HAL_RTC_AlarmIRQHandler+0x44>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	68db      	ldr	r3, [r3, #12]
 80049fa:	b2da      	uxtb	r2, r3
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8004a04:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	f7fd feaa 	bl	8002760 <HAL_RTC_AlarmAEventCallback>
#endif
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	689b      	ldr	r3, [r3, #8]
 8004a12:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d012      	beq.n	8004a40 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	68db      	ldr	r3, [r3, #12]
 8004a20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d00b      	beq.n	8004a40 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	68db      	ldr	r3, [r3, #12]
 8004a2e:	b2da      	uxtb	r2, r3
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f462 7220 	orn	r2, r2, #640	; 0x280
 8004a38:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8004a3a:	6878      	ldr	r0, [r7, #4]
 8004a3c:	f000 f8dc 	bl	8004bf8 <HAL_RTCEx_AlarmBEventCallback>
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2201      	movs	r2, #1
 8004a44:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8004a48:	bf00      	nop
 8004a4a:	3708      	adds	r7, #8
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bd80      	pop	{r7, pc}
 8004a50:	40010400 	.word	0x40010400

08004a54 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b084      	sub	sp, #16
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	68da      	ldr	r2, [r3, #12]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004a6a:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8004a6c:	f7fd ff1a 	bl	80028a4 <HAL_GetTick>
 8004a70:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004a72:	e009      	b.n	8004a88 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004a74:	f7fd ff16 	bl	80028a4 <HAL_GetTick>
 8004a78:	4602      	mov	r2, r0
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	1ad3      	subs	r3, r2, r3
 8004a7e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004a82:	d901      	bls.n	8004a88 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8004a84:	2303      	movs	r3, #3
 8004a86:	e007      	b.n	8004a98 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	68db      	ldr	r3, [r3, #12]
 8004a8e:	f003 0320 	and.w	r3, r3, #32
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d0ee      	beq.n	8004a74 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8004a96:	2300      	movs	r3, #0
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	3710      	adds	r7, #16
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bd80      	pop	{r7, pc}

08004aa0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b084      	sub	sp, #16
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	68db      	ldr	r3, [r3, #12]
 8004ab2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d120      	bne.n	8004afc <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f04f 32ff 	mov.w	r2, #4294967295
 8004ac2:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8004ac4:	f7fd feee 	bl	80028a4 <HAL_GetTick>
 8004ac8:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004aca:	e00d      	b.n	8004ae8 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8004acc:	f7fd feea 	bl	80028a4 <HAL_GetTick>
 8004ad0:	4602      	mov	r2, r0
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	1ad3      	subs	r3, r2, r3
 8004ad6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004ada:	d905      	bls.n	8004ae8 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8004adc:	2303      	movs	r3, #3
 8004ade:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2203      	movs	r2, #3
 8004ae4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	68db      	ldr	r3, [r3, #12]
 8004aee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d102      	bne.n	8004afc <RTC_EnterInitMode+0x5c>
 8004af6:	7bfb      	ldrb	r3, [r7, #15]
 8004af8:	2b03      	cmp	r3, #3
 8004afa:	d1e7      	bne.n	8004acc <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8004afc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004afe:	4618      	mov	r0, r3
 8004b00:	3710      	adds	r7, #16
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}
	...

08004b08 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b084      	sub	sp, #16
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b10:	2300      	movs	r3, #0
 8004b12:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8004b14:	4b1a      	ldr	r3, [pc, #104]	; (8004b80 <RTC_ExitInitMode+0x78>)
 8004b16:	68db      	ldr	r3, [r3, #12]
 8004b18:	4a19      	ldr	r2, [pc, #100]	; (8004b80 <RTC_ExitInitMode+0x78>)
 8004b1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b1e:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8004b20:	4b17      	ldr	r3, [pc, #92]	; (8004b80 <RTC_ExitInitMode+0x78>)
 8004b22:	689b      	ldr	r3, [r3, #8]
 8004b24:	f003 0320 	and.w	r3, r3, #32
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d10c      	bne.n	8004b46 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004b2c:	6878      	ldr	r0, [r7, #4]
 8004b2e:	f7ff ff91 	bl	8004a54 <HAL_RTC_WaitForSynchro>
 8004b32:	4603      	mov	r3, r0
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d01e      	beq.n	8004b76 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2203      	movs	r2, #3
 8004b3c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8004b40:	2303      	movs	r3, #3
 8004b42:	73fb      	strb	r3, [r7, #15]
 8004b44:	e017      	b.n	8004b76 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004b46:	4b0e      	ldr	r3, [pc, #56]	; (8004b80 <RTC_ExitInitMode+0x78>)
 8004b48:	689b      	ldr	r3, [r3, #8]
 8004b4a:	4a0d      	ldr	r2, [pc, #52]	; (8004b80 <RTC_ExitInitMode+0x78>)
 8004b4c:	f023 0320 	bic.w	r3, r3, #32
 8004b50:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f7ff ff7e 	bl	8004a54 <HAL_RTC_WaitForSynchro>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d005      	beq.n	8004b6a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2203      	movs	r2, #3
 8004b62:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8004b66:	2303      	movs	r3, #3
 8004b68:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004b6a:	4b05      	ldr	r3, [pc, #20]	; (8004b80 <RTC_ExitInitMode+0x78>)
 8004b6c:	689b      	ldr	r3, [r3, #8]
 8004b6e:	4a04      	ldr	r2, [pc, #16]	; (8004b80 <RTC_ExitInitMode+0x78>)
 8004b70:	f043 0320 	orr.w	r3, r3, #32
 8004b74:	6093      	str	r3, [r2, #8]
  }

  return status;
 8004b76:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	3710      	adds	r7, #16
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd80      	pop	{r7, pc}
 8004b80:	40002800 	.word	0x40002800

08004b84 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8004b84:	b480      	push	{r7}
 8004b86:	b085      	sub	sp, #20
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8004b8e:	2300      	movs	r3, #0
 8004b90:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8004b92:	79fb      	ldrb	r3, [r7, #7]
 8004b94:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8004b96:	e005      	b.n	8004ba4 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	3301      	adds	r3, #1
 8004b9c:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8004b9e:	7afb      	ldrb	r3, [r7, #11]
 8004ba0:	3b0a      	subs	r3, #10
 8004ba2:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8004ba4:	7afb      	ldrb	r3, [r7, #11]
 8004ba6:	2b09      	cmp	r3, #9
 8004ba8:	d8f6      	bhi.n	8004b98 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	b2db      	uxtb	r3, r3
 8004bae:	011b      	lsls	r3, r3, #4
 8004bb0:	b2da      	uxtb	r2, r3
 8004bb2:	7afb      	ldrb	r3, [r7, #11]
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	b2db      	uxtb	r3, r3
}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	3714      	adds	r7, #20
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc2:	4770      	bx	lr

08004bc4 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b085      	sub	sp, #20
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	4603      	mov	r3, r0
 8004bcc:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8004bce:	79fb      	ldrb	r3, [r7, #7]
 8004bd0:	091b      	lsrs	r3, r3, #4
 8004bd2:	b2db      	uxtb	r3, r3
 8004bd4:	461a      	mov	r2, r3
 8004bd6:	0092      	lsls	r2, r2, #2
 8004bd8:	4413      	add	r3, r2
 8004bda:	005b      	lsls	r3, r3, #1
 8004bdc:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8004bde:	79fb      	ldrb	r3, [r7, #7]
 8004be0:	f003 030f 	and.w	r3, r3, #15
 8004be4:	b2da      	uxtb	r2, r3
 8004be6:	7bfb      	ldrb	r3, [r7, #15]
 8004be8:	4413      	add	r3, r2
 8004bea:	b2db      	uxtb	r3, r3
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	3714      	adds	r7, #20
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf6:	4770      	bx	lr

08004bf8 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b083      	sub	sp, #12
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8004c00:	bf00      	nop
 8004c02:	370c      	adds	r7, #12
 8004c04:	46bd      	mov	sp, r7
 8004c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0a:	4770      	bx	lr

08004c0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b082      	sub	sp, #8
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d101      	bne.n	8004c1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	e049      	b.n	8004cb2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c24:	b2db      	uxtb	r3, r3
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d106      	bne.n	8004c38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	f7fd fb08 	bl	8002248 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2202      	movs	r2, #2
 8004c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681a      	ldr	r2, [r3, #0]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	3304      	adds	r3, #4
 8004c48:	4619      	mov	r1, r3
 8004c4a:	4610      	mov	r0, r2
 8004c4c:	f000 fa92 	bl	8005174 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2201      	movs	r2, #1
 8004c54:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2201      	movs	r2, #1
 8004c64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2201      	movs	r2, #1
 8004c74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2201      	movs	r2, #1
 8004c84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2201      	movs	r2, #1
 8004c94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2201      	movs	r2, #1
 8004cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004cb0:	2300      	movs	r3, #0
}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	3708      	adds	r7, #8
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bd80      	pop	{r7, pc}
	...

08004cbc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b085      	sub	sp, #20
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cca:	b2db      	uxtb	r3, r3
 8004ccc:	2b01      	cmp	r3, #1
 8004cce:	d001      	beq.n	8004cd4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	e040      	b.n	8004d56 <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2202      	movs	r2, #2
 8004cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	68da      	ldr	r2, [r3, #12]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f042 0201 	orr.w	r2, r2, #1
 8004cea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a1c      	ldr	r2, [pc, #112]	; (8004d64 <HAL_TIM_Base_Start_IT+0xa8>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d00e      	beq.n	8004d14 <HAL_TIM_Base_Start_IT+0x58>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cfe:	d009      	beq.n	8004d14 <HAL_TIM_Base_Start_IT+0x58>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a18      	ldr	r2, [pc, #96]	; (8004d68 <HAL_TIM_Base_Start_IT+0xac>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d004      	beq.n	8004d14 <HAL_TIM_Base_Start_IT+0x58>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a17      	ldr	r2, [pc, #92]	; (8004d6c <HAL_TIM_Base_Start_IT+0xb0>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d115      	bne.n	8004d40 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	689a      	ldr	r2, [r3, #8]
 8004d1a:	4b15      	ldr	r3, [pc, #84]	; (8004d70 <HAL_TIM_Base_Start_IT+0xb4>)
 8004d1c:	4013      	ands	r3, r2
 8004d1e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	2b06      	cmp	r3, #6
 8004d24:	d015      	beq.n	8004d52 <HAL_TIM_Base_Start_IT+0x96>
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d2c:	d011      	beq.n	8004d52 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	681a      	ldr	r2, [r3, #0]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f042 0201 	orr.w	r2, r2, #1
 8004d3c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d3e:	e008      	b.n	8004d52 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	681a      	ldr	r2, [r3, #0]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f042 0201 	orr.w	r2, r2, #1
 8004d4e:	601a      	str	r2, [r3, #0]
 8004d50:	e000      	b.n	8004d54 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d52:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004d54:	2300      	movs	r3, #0
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	3714      	adds	r7, #20
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d60:	4770      	bx	lr
 8004d62:	bf00      	nop
 8004d64:	40012c00 	.word	0x40012c00
 8004d68:	40000400 	.word	0x40000400
 8004d6c:	40014000 	.word	0x40014000
 8004d70:	00010007 	.word	0x00010007

08004d74 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b082      	sub	sp, #8
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	691b      	ldr	r3, [r3, #16]
 8004d82:	f003 0302 	and.w	r3, r3, #2
 8004d86:	2b02      	cmp	r3, #2
 8004d88:	d122      	bne.n	8004dd0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	68db      	ldr	r3, [r3, #12]
 8004d90:	f003 0302 	and.w	r3, r3, #2
 8004d94:	2b02      	cmp	r3, #2
 8004d96:	d11b      	bne.n	8004dd0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f06f 0202 	mvn.w	r2, #2
 8004da0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2201      	movs	r2, #1
 8004da6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	699b      	ldr	r3, [r3, #24]
 8004dae:	f003 0303 	and.w	r3, r3, #3
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d003      	beq.n	8004dbe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	f000 f9be 	bl	8005138 <HAL_TIM_IC_CaptureCallback>
 8004dbc:	e005      	b.n	8004dca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	f000 f9b0 	bl	8005124 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dc4:	6878      	ldr	r0, [r7, #4]
 8004dc6:	f000 f9c1 	bl	800514c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	691b      	ldr	r3, [r3, #16]
 8004dd6:	f003 0304 	and.w	r3, r3, #4
 8004dda:	2b04      	cmp	r3, #4
 8004ddc:	d122      	bne.n	8004e24 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	68db      	ldr	r3, [r3, #12]
 8004de4:	f003 0304 	and.w	r3, r3, #4
 8004de8:	2b04      	cmp	r3, #4
 8004dea:	d11b      	bne.n	8004e24 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f06f 0204 	mvn.w	r2, #4
 8004df4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2202      	movs	r2, #2
 8004dfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	699b      	ldr	r3, [r3, #24]
 8004e02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d003      	beq.n	8004e12 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	f000 f994 	bl	8005138 <HAL_TIM_IC_CaptureCallback>
 8004e10:	e005      	b.n	8004e1e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	f000 f986 	bl	8005124 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e18:	6878      	ldr	r0, [r7, #4]
 8004e1a:	f000 f997 	bl	800514c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2200      	movs	r2, #0
 8004e22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	691b      	ldr	r3, [r3, #16]
 8004e2a:	f003 0308 	and.w	r3, r3, #8
 8004e2e:	2b08      	cmp	r3, #8
 8004e30:	d122      	bne.n	8004e78 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	68db      	ldr	r3, [r3, #12]
 8004e38:	f003 0308 	and.w	r3, r3, #8
 8004e3c:	2b08      	cmp	r3, #8
 8004e3e:	d11b      	bne.n	8004e78 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f06f 0208 	mvn.w	r2, #8
 8004e48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2204      	movs	r2, #4
 8004e4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	69db      	ldr	r3, [r3, #28]
 8004e56:	f003 0303 	and.w	r3, r3, #3
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d003      	beq.n	8004e66 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e5e:	6878      	ldr	r0, [r7, #4]
 8004e60:	f000 f96a 	bl	8005138 <HAL_TIM_IC_CaptureCallback>
 8004e64:	e005      	b.n	8004e72 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	f000 f95c 	bl	8005124 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e6c:	6878      	ldr	r0, [r7, #4]
 8004e6e:	f000 f96d 	bl	800514c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2200      	movs	r2, #0
 8004e76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	691b      	ldr	r3, [r3, #16]
 8004e7e:	f003 0310 	and.w	r3, r3, #16
 8004e82:	2b10      	cmp	r3, #16
 8004e84:	d122      	bne.n	8004ecc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	68db      	ldr	r3, [r3, #12]
 8004e8c:	f003 0310 	and.w	r3, r3, #16
 8004e90:	2b10      	cmp	r3, #16
 8004e92:	d11b      	bne.n	8004ecc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f06f 0210 	mvn.w	r2, #16
 8004e9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2208      	movs	r2, #8
 8004ea2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	69db      	ldr	r3, [r3, #28]
 8004eaa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d003      	beq.n	8004eba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004eb2:	6878      	ldr	r0, [r7, #4]
 8004eb4:	f000 f940 	bl	8005138 <HAL_TIM_IC_CaptureCallback>
 8004eb8:	e005      	b.n	8004ec6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	f000 f932 	bl	8005124 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ec0:	6878      	ldr	r0, [r7, #4]
 8004ec2:	f000 f943 	bl	800514c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	691b      	ldr	r3, [r3, #16]
 8004ed2:	f003 0301 	and.w	r3, r3, #1
 8004ed6:	2b01      	cmp	r3, #1
 8004ed8:	d10e      	bne.n	8004ef8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	68db      	ldr	r3, [r3, #12]
 8004ee0:	f003 0301 	and.w	r3, r3, #1
 8004ee4:	2b01      	cmp	r3, #1
 8004ee6:	d107      	bne.n	8004ef8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f06f 0201 	mvn.w	r2, #1
 8004ef0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004ef2:	6878      	ldr	r0, [r7, #4]
 8004ef4:	f7fd fb16 	bl	8002524 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	691b      	ldr	r3, [r3, #16]
 8004efe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f02:	2b80      	cmp	r3, #128	; 0x80
 8004f04:	d10e      	bne.n	8004f24 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	68db      	ldr	r3, [r3, #12]
 8004f0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f10:	2b80      	cmp	r3, #128	; 0x80
 8004f12:	d107      	bne.n	8004f24 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004f1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	f000 faa8 	bl	8005474 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	691b      	ldr	r3, [r3, #16]
 8004f2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f32:	d10e      	bne.n	8004f52 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	68db      	ldr	r3, [r3, #12]
 8004f3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f3e:	2b80      	cmp	r3, #128	; 0x80
 8004f40:	d107      	bne.n	8004f52 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004f4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004f4c:	6878      	ldr	r0, [r7, #4]
 8004f4e:	f000 fa9b 	bl	8005488 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	691b      	ldr	r3, [r3, #16]
 8004f58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f5c:	2b40      	cmp	r3, #64	; 0x40
 8004f5e:	d10e      	bne.n	8004f7e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	68db      	ldr	r3, [r3, #12]
 8004f66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f6a:	2b40      	cmp	r3, #64	; 0x40
 8004f6c:	d107      	bne.n	8004f7e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004f76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004f78:	6878      	ldr	r0, [r7, #4]
 8004f7a:	f000 f8f1 	bl	8005160 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	691b      	ldr	r3, [r3, #16]
 8004f84:	f003 0320 	and.w	r3, r3, #32
 8004f88:	2b20      	cmp	r3, #32
 8004f8a:	d10e      	bne.n	8004faa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	68db      	ldr	r3, [r3, #12]
 8004f92:	f003 0320 	and.w	r3, r3, #32
 8004f96:	2b20      	cmp	r3, #32
 8004f98:	d107      	bne.n	8004faa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f06f 0220 	mvn.w	r2, #32
 8004fa2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004fa4:	6878      	ldr	r0, [r7, #4]
 8004fa6:	f000 fa5b 	bl	8005460 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004faa:	bf00      	nop
 8004fac:	3708      	adds	r7, #8
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}

08004fb2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004fb2:	b580      	push	{r7, lr}
 8004fb4:	b084      	sub	sp, #16
 8004fb6:	af00      	add	r7, sp, #0
 8004fb8:	6078      	str	r0, [r7, #4]
 8004fba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fc2:	2b01      	cmp	r3, #1
 8004fc4:	d101      	bne.n	8004fca <HAL_TIM_ConfigClockSource+0x18>
 8004fc6:	2302      	movs	r3, #2
 8004fc8:	e0a8      	b.n	800511c <HAL_TIM_ConfigClockSource+0x16a>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2201      	movs	r2, #1
 8004fce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2202      	movs	r2, #2
 8004fd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	689b      	ldr	r3, [r3, #8]
 8004fe0:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fe8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004fec:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004ff4:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	68fa      	ldr	r2, [r7, #12]
 8004ffc:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	2b40      	cmp	r3, #64	; 0x40
 8005004:	d067      	beq.n	80050d6 <HAL_TIM_ConfigClockSource+0x124>
 8005006:	2b40      	cmp	r3, #64	; 0x40
 8005008:	d80b      	bhi.n	8005022 <HAL_TIM_ConfigClockSource+0x70>
 800500a:	2b10      	cmp	r3, #16
 800500c:	d073      	beq.n	80050f6 <HAL_TIM_ConfigClockSource+0x144>
 800500e:	2b10      	cmp	r3, #16
 8005010:	d802      	bhi.n	8005018 <HAL_TIM_ConfigClockSource+0x66>
 8005012:	2b00      	cmp	r3, #0
 8005014:	d06f      	beq.n	80050f6 <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005016:	e078      	b.n	800510a <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8005018:	2b20      	cmp	r3, #32
 800501a:	d06c      	beq.n	80050f6 <HAL_TIM_ConfigClockSource+0x144>
 800501c:	2b30      	cmp	r3, #48	; 0x30
 800501e:	d06a      	beq.n	80050f6 <HAL_TIM_ConfigClockSource+0x144>
      break;
 8005020:	e073      	b.n	800510a <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8005022:	2b70      	cmp	r3, #112	; 0x70
 8005024:	d00d      	beq.n	8005042 <HAL_TIM_ConfigClockSource+0x90>
 8005026:	2b70      	cmp	r3, #112	; 0x70
 8005028:	d804      	bhi.n	8005034 <HAL_TIM_ConfigClockSource+0x82>
 800502a:	2b50      	cmp	r3, #80	; 0x50
 800502c:	d033      	beq.n	8005096 <HAL_TIM_ConfigClockSource+0xe4>
 800502e:	2b60      	cmp	r3, #96	; 0x60
 8005030:	d041      	beq.n	80050b6 <HAL_TIM_ConfigClockSource+0x104>
      break;
 8005032:	e06a      	b.n	800510a <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8005034:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005038:	d066      	beq.n	8005108 <HAL_TIM_ConfigClockSource+0x156>
 800503a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800503e:	d017      	beq.n	8005070 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8005040:	e063      	b.n	800510a <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6818      	ldr	r0, [r3, #0]
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	6899      	ldr	r1, [r3, #8]
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	685a      	ldr	r2, [r3, #4]
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	68db      	ldr	r3, [r3, #12]
 8005052:	f000 f977 	bl	8005344 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	689b      	ldr	r3, [r3, #8]
 800505c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005064:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	68fa      	ldr	r2, [r7, #12]
 800506c:	609a      	str	r2, [r3, #8]
      break;
 800506e:	e04c      	b.n	800510a <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6818      	ldr	r0, [r3, #0]
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	6899      	ldr	r1, [r3, #8]
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	685a      	ldr	r2, [r3, #4]
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	68db      	ldr	r3, [r3, #12]
 8005080:	f000 f960 	bl	8005344 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	689a      	ldr	r2, [r3, #8]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005092:	609a      	str	r2, [r3, #8]
      break;
 8005094:	e039      	b.n	800510a <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6818      	ldr	r0, [r3, #0]
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	6859      	ldr	r1, [r3, #4]
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	68db      	ldr	r3, [r3, #12]
 80050a2:	461a      	mov	r2, r3
 80050a4:	f000 f8d4 	bl	8005250 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	2150      	movs	r1, #80	; 0x50
 80050ae:	4618      	mov	r0, r3
 80050b0:	f000 f92d 	bl	800530e <TIM_ITRx_SetConfig>
      break;
 80050b4:	e029      	b.n	800510a <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6818      	ldr	r0, [r3, #0]
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	6859      	ldr	r1, [r3, #4]
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	68db      	ldr	r3, [r3, #12]
 80050c2:	461a      	mov	r2, r3
 80050c4:	f000 f8f3 	bl	80052ae <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	2160      	movs	r1, #96	; 0x60
 80050ce:	4618      	mov	r0, r3
 80050d0:	f000 f91d 	bl	800530e <TIM_ITRx_SetConfig>
      break;
 80050d4:	e019      	b.n	800510a <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6818      	ldr	r0, [r3, #0]
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	6859      	ldr	r1, [r3, #4]
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	68db      	ldr	r3, [r3, #12]
 80050e2:	461a      	mov	r2, r3
 80050e4:	f000 f8b4 	bl	8005250 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	2140      	movs	r1, #64	; 0x40
 80050ee:	4618      	mov	r0, r3
 80050f0:	f000 f90d 	bl	800530e <TIM_ITRx_SetConfig>
      break;
 80050f4:	e009      	b.n	800510a <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681a      	ldr	r2, [r3, #0]
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4619      	mov	r1, r3
 8005100:	4610      	mov	r0, r2
 8005102:	f000 f904 	bl	800530e <TIM_ITRx_SetConfig>
        break;
 8005106:	e000      	b.n	800510a <HAL_TIM_ConfigClockSource+0x158>
      break;
 8005108:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2201      	movs	r2, #1
 800510e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2200      	movs	r2, #0
 8005116:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800511a:	2300      	movs	r3, #0
}
 800511c:	4618      	mov	r0, r3
 800511e:	3710      	adds	r7, #16
 8005120:	46bd      	mov	sp, r7
 8005122:	bd80      	pop	{r7, pc}

08005124 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005124:	b480      	push	{r7}
 8005126:	b083      	sub	sp, #12
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800512c:	bf00      	nop
 800512e:	370c      	adds	r7, #12
 8005130:	46bd      	mov	sp, r7
 8005132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005136:	4770      	bx	lr

08005138 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005138:	b480      	push	{r7}
 800513a:	b083      	sub	sp, #12
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005140:	bf00      	nop
 8005142:	370c      	adds	r7, #12
 8005144:	46bd      	mov	sp, r7
 8005146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514a:	4770      	bx	lr

0800514c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800514c:	b480      	push	{r7}
 800514e:	b083      	sub	sp, #12
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005154:	bf00      	nop
 8005156:	370c      	adds	r7, #12
 8005158:	46bd      	mov	sp, r7
 800515a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515e:	4770      	bx	lr

08005160 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005160:	b480      	push	{r7}
 8005162:	b083      	sub	sp, #12
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005168:	bf00      	nop
 800516a:	370c      	adds	r7, #12
 800516c:	46bd      	mov	sp, r7
 800516e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005172:	4770      	bx	lr

08005174 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005174:	b480      	push	{r7}
 8005176:	b085      	sub	sp, #20
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
 800517c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	4a2e      	ldr	r2, [pc, #184]	; (8005240 <TIM_Base_SetConfig+0xcc>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d007      	beq.n	800519c <TIM_Base_SetConfig+0x28>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005192:	d003      	beq.n	800519c <TIM_Base_SetConfig+0x28>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	4a2b      	ldr	r2, [pc, #172]	; (8005244 <TIM_Base_SetConfig+0xd0>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d108      	bne.n	80051ae <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	685b      	ldr	r3, [r3, #4]
 80051a8:	68fa      	ldr	r2, [r7, #12]
 80051aa:	4313      	orrs	r3, r2
 80051ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	4a23      	ldr	r2, [pc, #140]	; (8005240 <TIM_Base_SetConfig+0xcc>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d00f      	beq.n	80051d6 <TIM_Base_SetConfig+0x62>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051bc:	d00b      	beq.n	80051d6 <TIM_Base_SetConfig+0x62>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	4a20      	ldr	r2, [pc, #128]	; (8005244 <TIM_Base_SetConfig+0xd0>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d007      	beq.n	80051d6 <TIM_Base_SetConfig+0x62>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	4a1f      	ldr	r2, [pc, #124]	; (8005248 <TIM_Base_SetConfig+0xd4>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d003      	beq.n	80051d6 <TIM_Base_SetConfig+0x62>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	4a1e      	ldr	r2, [pc, #120]	; (800524c <TIM_Base_SetConfig+0xd8>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d108      	bne.n	80051e8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	68db      	ldr	r3, [r3, #12]
 80051e2:	68fa      	ldr	r2, [r7, #12]
 80051e4:	4313      	orrs	r3, r2
 80051e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	695b      	ldr	r3, [r3, #20]
 80051f2:	4313      	orrs	r3, r2
 80051f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	68fa      	ldr	r2, [r7, #12]
 80051fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	689a      	ldr	r2, [r3, #8]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	681a      	ldr	r2, [r3, #0]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	4a0c      	ldr	r2, [pc, #48]	; (8005240 <TIM_Base_SetConfig+0xcc>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d007      	beq.n	8005224 <TIM_Base_SetConfig+0xb0>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	4a0c      	ldr	r2, [pc, #48]	; (8005248 <TIM_Base_SetConfig+0xd4>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d003      	beq.n	8005224 <TIM_Base_SetConfig+0xb0>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	4a0b      	ldr	r2, [pc, #44]	; (800524c <TIM_Base_SetConfig+0xd8>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d103      	bne.n	800522c <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	691a      	ldr	r2, [r3, #16]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2201      	movs	r2, #1
 8005230:	615a      	str	r2, [r3, #20]
}
 8005232:	bf00      	nop
 8005234:	3714      	adds	r7, #20
 8005236:	46bd      	mov	sp, r7
 8005238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523c:	4770      	bx	lr
 800523e:	bf00      	nop
 8005240:	40012c00 	.word	0x40012c00
 8005244:	40000400 	.word	0x40000400
 8005248:	40014000 	.word	0x40014000
 800524c:	40014400 	.word	0x40014400

08005250 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005250:	b480      	push	{r7}
 8005252:	b087      	sub	sp, #28
 8005254:	af00      	add	r7, sp, #0
 8005256:	60f8      	str	r0, [r7, #12]
 8005258:	60b9      	str	r1, [r7, #8]
 800525a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	6a1b      	ldr	r3, [r3, #32]
 8005260:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	6a1b      	ldr	r3, [r3, #32]
 8005266:	f023 0201 	bic.w	r2, r3, #1
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	699b      	ldr	r3, [r3, #24]
 8005272:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800527a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	011b      	lsls	r3, r3, #4
 8005280:	693a      	ldr	r2, [r7, #16]
 8005282:	4313      	orrs	r3, r2
 8005284:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	f023 030a 	bic.w	r3, r3, #10
 800528c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800528e:	697a      	ldr	r2, [r7, #20]
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	4313      	orrs	r3, r2
 8005294:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	693a      	ldr	r2, [r7, #16]
 800529a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	697a      	ldr	r2, [r7, #20]
 80052a0:	621a      	str	r2, [r3, #32]
}
 80052a2:	bf00      	nop
 80052a4:	371c      	adds	r7, #28
 80052a6:	46bd      	mov	sp, r7
 80052a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ac:	4770      	bx	lr

080052ae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052ae:	b480      	push	{r7}
 80052b0:	b087      	sub	sp, #28
 80052b2:	af00      	add	r7, sp, #0
 80052b4:	60f8      	str	r0, [r7, #12]
 80052b6:	60b9      	str	r1, [r7, #8]
 80052b8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	6a1b      	ldr	r3, [r3, #32]
 80052be:	f023 0210 	bic.w	r2, r3, #16
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	699b      	ldr	r3, [r3, #24]
 80052ca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	6a1b      	ldr	r3, [r3, #32]
 80052d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80052d8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	031b      	lsls	r3, r3, #12
 80052de:	697a      	ldr	r2, [r7, #20]
 80052e0:	4313      	orrs	r3, r2
 80052e2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80052e4:	693b      	ldr	r3, [r7, #16]
 80052e6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80052ea:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	011b      	lsls	r3, r3, #4
 80052f0:	693a      	ldr	r2, [r7, #16]
 80052f2:	4313      	orrs	r3, r2
 80052f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	697a      	ldr	r2, [r7, #20]
 80052fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	693a      	ldr	r2, [r7, #16]
 8005300:	621a      	str	r2, [r3, #32]
}
 8005302:	bf00      	nop
 8005304:	371c      	adds	r7, #28
 8005306:	46bd      	mov	sp, r7
 8005308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530c:	4770      	bx	lr

0800530e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800530e:	b480      	push	{r7}
 8005310:	b085      	sub	sp, #20
 8005312:	af00      	add	r7, sp, #0
 8005314:	6078      	str	r0, [r7, #4]
 8005316:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	689b      	ldr	r3, [r3, #8]
 800531c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005324:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005326:	683a      	ldr	r2, [r7, #0]
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	4313      	orrs	r3, r2
 800532c:	f043 0307 	orr.w	r3, r3, #7
 8005330:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	68fa      	ldr	r2, [r7, #12]
 8005336:	609a      	str	r2, [r3, #8]
}
 8005338:	bf00      	nop
 800533a:	3714      	adds	r7, #20
 800533c:	46bd      	mov	sp, r7
 800533e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005342:	4770      	bx	lr

08005344 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005344:	b480      	push	{r7}
 8005346:	b087      	sub	sp, #28
 8005348:	af00      	add	r7, sp, #0
 800534a:	60f8      	str	r0, [r7, #12]
 800534c:	60b9      	str	r1, [r7, #8]
 800534e:	607a      	str	r2, [r7, #4]
 8005350:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	689b      	ldr	r3, [r3, #8]
 8005356:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800535e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	021a      	lsls	r2, r3, #8
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	431a      	orrs	r2, r3
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	4313      	orrs	r3, r2
 800536c:	697a      	ldr	r2, [r7, #20]
 800536e:	4313      	orrs	r3, r2
 8005370:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	697a      	ldr	r2, [r7, #20]
 8005376:	609a      	str	r2, [r3, #8]
}
 8005378:	bf00      	nop
 800537a:	371c      	adds	r7, #28
 800537c:	46bd      	mov	sp, r7
 800537e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005382:	4770      	bx	lr

08005384 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005384:	b480      	push	{r7}
 8005386:	b085      	sub	sp, #20
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
 800538c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005394:	2b01      	cmp	r3, #1
 8005396:	d101      	bne.n	800539c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005398:	2302      	movs	r3, #2
 800539a:	e054      	b.n	8005446 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2201      	movs	r2, #1
 80053a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2202      	movs	r2, #2
 80053a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	689b      	ldr	r3, [r3, #8]
 80053ba:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a24      	ldr	r2, [pc, #144]	; (8005454 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d108      	bne.n	80053d8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80053cc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	68fa      	ldr	r2, [r7, #12]
 80053d4:	4313      	orrs	r3, r2
 80053d6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	68fa      	ldr	r2, [r7, #12]
 80053e6:	4313      	orrs	r3, r2
 80053e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	68fa      	ldr	r2, [r7, #12]
 80053f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4a17      	ldr	r2, [pc, #92]	; (8005454 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d00e      	beq.n	800541a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005404:	d009      	beq.n	800541a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4a13      	ldr	r2, [pc, #76]	; (8005458 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d004      	beq.n	800541a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4a11      	ldr	r2, [pc, #68]	; (800545c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d10c      	bne.n	8005434 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005420:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	689b      	ldr	r3, [r3, #8]
 8005426:	68ba      	ldr	r2, [r7, #8]
 8005428:	4313      	orrs	r3, r2
 800542a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	68ba      	ldr	r2, [r7, #8]
 8005432:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2201      	movs	r2, #1
 8005438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2200      	movs	r2, #0
 8005440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005444:	2300      	movs	r3, #0
}
 8005446:	4618      	mov	r0, r3
 8005448:	3714      	adds	r7, #20
 800544a:	46bd      	mov	sp, r7
 800544c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005450:	4770      	bx	lr
 8005452:	bf00      	nop
 8005454:	40012c00 	.word	0x40012c00
 8005458:	40000400 	.word	0x40000400
 800545c:	40014000 	.word	0x40014000

08005460 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005460:	b480      	push	{r7}
 8005462:	b083      	sub	sp, #12
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005468:	bf00      	nop
 800546a:	370c      	adds	r7, #12
 800546c:	46bd      	mov	sp, r7
 800546e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005472:	4770      	bx	lr

08005474 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005474:	b480      	push	{r7}
 8005476:	b083      	sub	sp, #12
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800547c:	bf00      	nop
 800547e:	370c      	adds	r7, #12
 8005480:	46bd      	mov	sp, r7
 8005482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005486:	4770      	bx	lr

08005488 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005488:	b480      	push	{r7}
 800548a:	b083      	sub	sp, #12
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005490:	bf00      	nop
 8005492:	370c      	adds	r7, #12
 8005494:	46bd      	mov	sp, r7
 8005496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549a:	4770      	bx	lr

0800549c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b082      	sub	sp, #8
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d101      	bne.n	80054ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80054aa:	2301      	movs	r3, #1
 80054ac:	e040      	b.n	8005530 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d106      	bne.n	80054c4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2200      	movs	r2, #0
 80054ba:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80054be:	6878      	ldr	r0, [r7, #4]
 80054c0:	f7fc fee6 	bl	8002290 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2224      	movs	r2, #36	; 0x24
 80054c8:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	681a      	ldr	r2, [r3, #0]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f022 0201 	bic.w	r2, r2, #1
 80054d8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80054da:	6878      	ldr	r0, [r7, #4]
 80054dc:	f000 fabe 	bl	8005a5c <UART_SetConfig>
 80054e0:	4603      	mov	r3, r0
 80054e2:	2b01      	cmp	r3, #1
 80054e4:	d101      	bne.n	80054ea <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80054e6:	2301      	movs	r3, #1
 80054e8:	e022      	b.n	8005530 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d002      	beq.n	80054f8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80054f2:	6878      	ldr	r0, [r7, #4]
 80054f4:	f000 fd10 	bl	8005f18 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	685a      	ldr	r2, [r3, #4]
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005506:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	689a      	ldr	r2, [r3, #8]
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005516:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	681a      	ldr	r2, [r3, #0]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f042 0201 	orr.w	r2, r2, #1
 8005526:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005528:	6878      	ldr	r0, [r7, #4]
 800552a:	f000 fd97 	bl	800605c <UART_CheckIdleState>
 800552e:	4603      	mov	r3, r0
}
 8005530:	4618      	mov	r0, r3
 8005532:	3708      	adds	r7, #8
 8005534:	46bd      	mov	sp, r7
 8005536:	bd80      	pop	{r7, pc}

08005538 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b08a      	sub	sp, #40	; 0x28
 800553c:	af02      	add	r7, sp, #8
 800553e:	60f8      	str	r0, [r7, #12]
 8005540:	60b9      	str	r1, [r7, #8]
 8005542:	603b      	str	r3, [r7, #0]
 8005544:	4613      	mov	r3, r2
 8005546:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800554c:	2b20      	cmp	r3, #32
 800554e:	f040 8081 	bne.w	8005654 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d002      	beq.n	800555e <HAL_UART_Transmit+0x26>
 8005558:	88fb      	ldrh	r3, [r7, #6]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d101      	bne.n	8005562 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800555e:	2301      	movs	r3, #1
 8005560:	e079      	b.n	8005656 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8005568:	2b01      	cmp	r3, #1
 800556a:	d101      	bne.n	8005570 <HAL_UART_Transmit+0x38>
 800556c:	2302      	movs	r3, #2
 800556e:	e072      	b.n	8005656 <HAL_UART_Transmit+0x11e>
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	2201      	movs	r2, #1
 8005574:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	2200      	movs	r2, #0
 800557c:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	2221      	movs	r2, #33	; 0x21
 8005582:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8005584:	f7fd f98e 	bl	80028a4 <HAL_GetTick>
 8005588:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	88fa      	ldrh	r2, [r7, #6]
 800558e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	88fa      	ldrh	r2, [r7, #6]
 8005596:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	689b      	ldr	r3, [r3, #8]
 800559e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055a2:	d108      	bne.n	80055b6 <HAL_UART_Transmit+0x7e>
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	691b      	ldr	r3, [r3, #16]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d104      	bne.n	80055b6 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 80055ac:	2300      	movs	r3, #0
 80055ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	61bb      	str	r3, [r7, #24]
 80055b4:	e003      	b.n	80055be <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80055ba:	2300      	movs	r3, #0
 80055bc:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	2200      	movs	r2, #0
 80055c2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 80055c6:	e02d      	b.n	8005624 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	9300      	str	r3, [sp, #0]
 80055cc:	697b      	ldr	r3, [r7, #20]
 80055ce:	2200      	movs	r2, #0
 80055d0:	2180      	movs	r1, #128	; 0x80
 80055d2:	68f8      	ldr	r0, [r7, #12]
 80055d4:	f000 fd87 	bl	80060e6 <UART_WaitOnFlagUntilTimeout>
 80055d8:	4603      	mov	r3, r0
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d001      	beq.n	80055e2 <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 80055de:	2303      	movs	r3, #3
 80055e0:	e039      	b.n	8005656 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80055e2:	69fb      	ldr	r3, [r7, #28]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d10b      	bne.n	8005600 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80055e8:	69bb      	ldr	r3, [r7, #24]
 80055ea:	881a      	ldrh	r2, [r3, #0]
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80055f4:	b292      	uxth	r2, r2
 80055f6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80055f8:	69bb      	ldr	r3, [r7, #24]
 80055fa:	3302      	adds	r3, #2
 80055fc:	61bb      	str	r3, [r7, #24]
 80055fe:	e008      	b.n	8005612 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005600:	69fb      	ldr	r3, [r7, #28]
 8005602:	781a      	ldrb	r2, [r3, #0]
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	b292      	uxth	r2, r2
 800560a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800560c:	69fb      	ldr	r3, [r7, #28]
 800560e:	3301      	adds	r3, #1
 8005610:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005618:	b29b      	uxth	r3, r3
 800561a:	3b01      	subs	r3, #1
 800561c:	b29a      	uxth	r2, r3
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800562a:	b29b      	uxth	r3, r3
 800562c:	2b00      	cmp	r3, #0
 800562e:	d1cb      	bne.n	80055c8 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	9300      	str	r3, [sp, #0]
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	2200      	movs	r2, #0
 8005638:	2140      	movs	r1, #64	; 0x40
 800563a:	68f8      	ldr	r0, [r7, #12]
 800563c:	f000 fd53 	bl	80060e6 <UART_WaitOnFlagUntilTimeout>
 8005640:	4603      	mov	r3, r0
 8005642:	2b00      	cmp	r3, #0
 8005644:	d001      	beq.n	800564a <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8005646:	2303      	movs	r3, #3
 8005648:	e005      	b.n	8005656 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	2220      	movs	r2, #32
 800564e:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8005650:	2300      	movs	r3, #0
 8005652:	e000      	b.n	8005656 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8005654:	2302      	movs	r3, #2
  }
}
 8005656:	4618      	mov	r0, r3
 8005658:	3720      	adds	r7, #32
 800565a:	46bd      	mov	sp, r7
 800565c:	bd80      	pop	{r7, pc}
	...

08005660 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005660:	b480      	push	{r7}
 8005662:	b085      	sub	sp, #20
 8005664:	af00      	add	r7, sp, #0
 8005666:	60f8      	str	r0, [r7, #12]
 8005668:	60b9      	str	r1, [r7, #8]
 800566a:	4613      	mov	r3, r2
 800566c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005672:	2b20      	cmp	r3, #32
 8005674:	f040 808a 	bne.w	800578c <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d002      	beq.n	8005684 <HAL_UART_Receive_IT+0x24>
 800567e:	88fb      	ldrh	r3, [r7, #6]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d101      	bne.n	8005688 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005684:	2301      	movs	r3, #1
 8005686:	e082      	b.n	800578e <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800568e:	2b01      	cmp	r3, #1
 8005690:	d101      	bne.n	8005696 <HAL_UART_Receive_IT+0x36>
 8005692:	2302      	movs	r3, #2
 8005694:	e07b      	b.n	800578e <HAL_UART_Receive_IT+0x12e>
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	2201      	movs	r2, #1
 800569a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	68ba      	ldr	r2, [r7, #8]
 80056a2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	88fa      	ldrh	r2, [r7, #6]
 80056a8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	88fa      	ldrh	r2, [r7, #6]
 80056b0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	2200      	movs	r2, #0
 80056b8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	689b      	ldr	r3, [r3, #8]
 80056be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056c2:	d10e      	bne.n	80056e2 <HAL_UART_Receive_IT+0x82>
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	691b      	ldr	r3, [r3, #16]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d105      	bne.n	80056d8 <HAL_UART_Receive_IT+0x78>
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	f240 12ff 	movw	r2, #511	; 0x1ff
 80056d2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80056d6:	e02d      	b.n	8005734 <HAL_UART_Receive_IT+0xd4>
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	22ff      	movs	r2, #255	; 0xff
 80056dc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80056e0:	e028      	b.n	8005734 <HAL_UART_Receive_IT+0xd4>
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	689b      	ldr	r3, [r3, #8]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d10d      	bne.n	8005706 <HAL_UART_Receive_IT+0xa6>
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	691b      	ldr	r3, [r3, #16]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d104      	bne.n	80056fc <HAL_UART_Receive_IT+0x9c>
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	22ff      	movs	r2, #255	; 0xff
 80056f6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80056fa:	e01b      	b.n	8005734 <HAL_UART_Receive_IT+0xd4>
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	227f      	movs	r2, #127	; 0x7f
 8005700:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005704:	e016      	b.n	8005734 <HAL_UART_Receive_IT+0xd4>
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	689b      	ldr	r3, [r3, #8]
 800570a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800570e:	d10d      	bne.n	800572c <HAL_UART_Receive_IT+0xcc>
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	691b      	ldr	r3, [r3, #16]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d104      	bne.n	8005722 <HAL_UART_Receive_IT+0xc2>
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	227f      	movs	r2, #127	; 0x7f
 800571c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005720:	e008      	b.n	8005734 <HAL_UART_Receive_IT+0xd4>
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	223f      	movs	r2, #63	; 0x3f
 8005726:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800572a:	e003      	b.n	8005734 <HAL_UART_Receive_IT+0xd4>
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	2200      	movs	r2, #0
 8005730:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	2200      	movs	r2, #0
 8005738:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	2222      	movs	r2, #34	; 0x22
 800573e:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	689a      	ldr	r2, [r3, #8]
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f042 0201 	orr.w	r2, r2, #1
 800574e:	609a      	str	r2, [r3, #8]
      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
    }
#else
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	689b      	ldr	r3, [r3, #8]
 8005754:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005758:	d107      	bne.n	800576a <HAL_UART_Receive_IT+0x10a>
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	691b      	ldr	r3, [r3, #16]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d103      	bne.n	800576a <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	4a0d      	ldr	r2, [pc, #52]	; (800579c <HAL_UART_Receive_IT+0x13c>)
 8005766:	661a      	str	r2, [r3, #96]	; 0x60
 8005768:	e002      	b.n	8005770 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	4a0c      	ldr	r2, [pc, #48]	; (80057a0 <HAL_UART_Receive_IT+0x140>)
 800576e:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	2200      	movs	r2, #0
 8005774:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	681a      	ldr	r2, [r3, #0]
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8005786:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8005788:	2300      	movs	r3, #0
 800578a:	e000      	b.n	800578e <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 800578c:	2302      	movs	r3, #2
  }
}
 800578e:	4618      	mov	r0, r3
 8005790:	3714      	adds	r7, #20
 8005792:	46bd      	mov	sp, r7
 8005794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005798:	4770      	bx	lr
 800579a:	bf00      	nop
 800579c:	08006325 	.word	0x08006325
 80057a0:	0800627b 	.word	0x0800627b

080057a4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b088      	sub	sp, #32
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	69db      	ldr	r3, [r3, #28]
 80057b2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	689b      	ldr	r3, [r3, #8]
 80057c2:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80057c4:	69fa      	ldr	r2, [r7, #28]
 80057c6:	f640 030f 	movw	r3, #2063	; 0x80f
 80057ca:	4013      	ands	r3, r2
 80057cc:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d113      	bne.n	80057fc <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80057d4:	69fb      	ldr	r3, [r7, #28]
 80057d6:	f003 0320 	and.w	r3, r3, #32
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d00e      	beq.n	80057fc <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80057de:	69bb      	ldr	r3, [r7, #24]
 80057e0:	f003 0320 	and.w	r3, r3, #32
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d009      	beq.n	80057fc <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	f000 8114 	beq.w	8005a1a <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057f6:	6878      	ldr	r0, [r7, #4]
 80057f8:	4798      	blx	r3
      }
      return;
 80057fa:	e10e      	b.n	8005a1a <HAL_UART_IRQHandler+0x276>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	f000 80d6 	beq.w	80059b0 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005804:	697b      	ldr	r3, [r7, #20]
 8005806:	f003 0301 	and.w	r3, r3, #1
 800580a:	2b00      	cmp	r3, #0
 800580c:	d105      	bne.n	800581a <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800580e:	69ba      	ldr	r2, [r7, #24]
 8005810:	4b86      	ldr	r3, [pc, #536]	; (8005a2c <HAL_UART_IRQHandler+0x288>)
 8005812:	4013      	ands	r3, r2
 8005814:	2b00      	cmp	r3, #0
 8005816:	f000 80cb 	beq.w	80059b0 <HAL_UART_IRQHandler+0x20c>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800581a:	69fb      	ldr	r3, [r7, #28]
 800581c:	f003 0301 	and.w	r3, r3, #1
 8005820:	2b00      	cmp	r3, #0
 8005822:	d00e      	beq.n	8005842 <HAL_UART_IRQHandler+0x9e>
 8005824:	69bb      	ldr	r3, [r7, #24]
 8005826:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800582a:	2b00      	cmp	r3, #0
 800582c:	d009      	beq.n	8005842 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	2201      	movs	r2, #1
 8005834:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800583a:	f043 0201 	orr.w	r2, r3, #1
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005842:	69fb      	ldr	r3, [r7, #28]
 8005844:	f003 0302 	and.w	r3, r3, #2
 8005848:	2b00      	cmp	r3, #0
 800584a:	d00e      	beq.n	800586a <HAL_UART_IRQHandler+0xc6>
 800584c:	697b      	ldr	r3, [r7, #20]
 800584e:	f003 0301 	and.w	r3, r3, #1
 8005852:	2b00      	cmp	r3, #0
 8005854:	d009      	beq.n	800586a <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	2202      	movs	r2, #2
 800585c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005862:	f043 0204 	orr.w	r2, r3, #4
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800586a:	69fb      	ldr	r3, [r7, #28]
 800586c:	f003 0304 	and.w	r3, r3, #4
 8005870:	2b00      	cmp	r3, #0
 8005872:	d00e      	beq.n	8005892 <HAL_UART_IRQHandler+0xee>
 8005874:	697b      	ldr	r3, [r7, #20]
 8005876:	f003 0301 	and.w	r3, r3, #1
 800587a:	2b00      	cmp	r3, #0
 800587c:	d009      	beq.n	8005892 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	2204      	movs	r2, #4
 8005884:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800588a:	f043 0202 	orr.w	r2, r3, #2
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	67da      	str	r2, [r3, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005892:	69fb      	ldr	r3, [r7, #28]
 8005894:	f003 0308 	and.w	r3, r3, #8
 8005898:	2b00      	cmp	r3, #0
 800589a:	d013      	beq.n	80058c4 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800589c:	69bb      	ldr	r3, [r7, #24]
 800589e:	f003 0320 	and.w	r3, r3, #32
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d104      	bne.n	80058b0 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80058a6:	697b      	ldr	r3, [r7, #20]
 80058a8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d009      	beq.n	80058c4 <HAL_UART_IRQHandler+0x120>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	2208      	movs	r2, #8
 80058b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80058bc:	f043 0208 	orr.w	r2, r3, #8
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80058c4:	69fb      	ldr	r3, [r7, #28]
 80058c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d00f      	beq.n	80058ee <HAL_UART_IRQHandler+0x14a>
 80058ce:	69bb      	ldr	r3, [r7, #24]
 80058d0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d00a      	beq.n	80058ee <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80058e0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80058e6:	f043 0220 	orr.w	r2, r3, #32
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	f000 8093 	beq.w	8005a1e <HAL_UART_IRQHandler+0x27a>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80058f8:	69fb      	ldr	r3, [r7, #28]
 80058fa:	f003 0320 	and.w	r3, r3, #32
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d00c      	beq.n	800591c <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005902:	69bb      	ldr	r3, [r7, #24]
 8005904:	f003 0320 	and.w	r3, r3, #32
 8005908:	2b00      	cmp	r3, #0
 800590a:	d007      	beq.n	800591c <HAL_UART_IRQHandler+0x178>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005910:	2b00      	cmp	r3, #0
 8005912:	d003      	beq.n	800591c <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005918:	6878      	ldr	r0, [r7, #4]
 800591a:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005920:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	689b      	ldr	r3, [r3, #8]
 8005928:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800592c:	2b40      	cmp	r3, #64	; 0x40
 800592e:	d004      	beq.n	800593a <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005936:	2b00      	cmp	r3, #0
 8005938:	d031      	beq.n	800599e <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	f000 fc4e 	bl	80061dc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	689b      	ldr	r3, [r3, #8]
 8005946:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800594a:	2b40      	cmp	r3, #64	; 0x40
 800594c:	d123      	bne.n	8005996 <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	689a      	ldr	r2, [r3, #8]
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800595c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005962:	2b00      	cmp	r3, #0
 8005964:	d013      	beq.n	800598e <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800596a:	4a31      	ldr	r2, [pc, #196]	; (8005a30 <HAL_UART_IRQHandler+0x28c>)
 800596c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005972:	4618      	mov	r0, r3
 8005974:	f7fd f8d5 	bl	8002b22 <HAL_DMA_Abort_IT>
 8005978:	4603      	mov	r3, r0
 800597a:	2b00      	cmp	r3, #0
 800597c:	d016      	beq.n	80059ac <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005982:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005984:	687a      	ldr	r2, [r7, #4]
 8005986:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8005988:	4610      	mov	r0, r2
 800598a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800598c:	e00e      	b.n	80059ac <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	f000 f85a 	bl	8005a48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005994:	e00a      	b.n	80059ac <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	f000 f856 	bl	8005a48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800599c:	e006      	b.n	80059ac <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800599e:	6878      	ldr	r0, [r7, #4]
 80059a0:	f000 f852 	bl	8005a48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2200      	movs	r2, #0
 80059a8:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 80059aa:	e038      	b.n	8005a1e <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059ac:	bf00      	nop
    return;
 80059ae:	e036      	b.n	8005a1e <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80059b0:	69fb      	ldr	r3, [r7, #28]
 80059b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d00d      	beq.n	80059d6 <HAL_UART_IRQHandler+0x232>
 80059ba:	697b      	ldr	r3, [r7, #20]
 80059bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d008      	beq.n	80059d6 <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80059cc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	f000 fcfd 	bl	80063ce <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80059d4:	e026      	b.n	8005a24 <HAL_UART_IRQHandler+0x280>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80059d6:	69fb      	ldr	r3, [r7, #28]
 80059d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d00d      	beq.n	80059fc <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80059e0:	69bb      	ldr	r3, [r7, #24]
 80059e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d008      	beq.n	80059fc <HAL_UART_IRQHandler+0x258>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d017      	beq.n	8005a22 <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80059f6:	6878      	ldr	r0, [r7, #4]
 80059f8:	4798      	blx	r3
    }
    return;
 80059fa:	e012      	b.n	8005a22 <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80059fc:	69fb      	ldr	r3, [r7, #28]
 80059fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d00e      	beq.n	8005a24 <HAL_UART_IRQHandler+0x280>
 8005a06:	69bb      	ldr	r3, [r7, #24]
 8005a08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d009      	beq.n	8005a24 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 8005a10:	6878      	ldr	r0, [r7, #4]
 8005a12:	f000 fc19 	bl	8006248 <UART_EndTransmit_IT>
    return;
 8005a16:	bf00      	nop
 8005a18:	e004      	b.n	8005a24 <HAL_UART_IRQHandler+0x280>
      return;
 8005a1a:	bf00      	nop
 8005a1c:	e002      	b.n	8005a24 <HAL_UART_IRQHandler+0x280>
    return;
 8005a1e:	bf00      	nop
 8005a20:	e000      	b.n	8005a24 <HAL_UART_IRQHandler+0x280>
    return;
 8005a22:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8005a24:	3720      	adds	r7, #32
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bd80      	pop	{r7, pc}
 8005a2a:	bf00      	nop
 8005a2c:	04000120 	.word	0x04000120
 8005a30:	0800621d 	.word	0x0800621d

08005a34 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005a34:	b480      	push	{r7}
 8005a36:	b083      	sub	sp, #12
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005a3c:	bf00      	nop
 8005a3e:	370c      	adds	r7, #12
 8005a40:	46bd      	mov	sp, r7
 8005a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a46:	4770      	bx	lr

08005a48 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005a48:	b480      	push	{r7}
 8005a4a:	b083      	sub	sp, #12
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005a50:	bf00      	nop
 8005a52:	370c      	adds	r7, #12
 8005a54:	46bd      	mov	sp, r7
 8005a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5a:	4770      	bx	lr

08005a5c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a5c:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8005a60:	b088      	sub	sp, #32
 8005a62:	af00      	add	r7, sp, #0
 8005a64:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005a66:	2300      	movs	r3, #0
 8005a68:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	689a      	ldr	r2, [r3, #8]
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	691b      	ldr	r3, [r3, #16]
 8005a72:	431a      	orrs	r2, r3
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	695b      	ldr	r3, [r3, #20]
 8005a78:	431a      	orrs	r2, r3
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	69db      	ldr	r3, [r3, #28]
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	681a      	ldr	r2, [r3, #0]
 8005a88:	4ba4      	ldr	r3, [pc, #656]	; (8005d1c <UART_SetConfig+0x2c0>)
 8005a8a:	4013      	ands	r3, r2
 8005a8c:	687a      	ldr	r2, [r7, #4]
 8005a8e:	6812      	ldr	r2, [r2, #0]
 8005a90:	69f9      	ldr	r1, [r7, #28]
 8005a92:	430b      	orrs	r3, r1
 8005a94:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	685b      	ldr	r3, [r3, #4]
 8005a9c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	68da      	ldr	r2, [r3, #12]
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	430a      	orrs	r2, r1
 8005aaa:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	699b      	ldr	r3, [r3, #24]
 8005ab0:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4a9a      	ldr	r2, [pc, #616]	; (8005d20 <UART_SetConfig+0x2c4>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d004      	beq.n	8005ac6 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6a1b      	ldr	r3, [r3, #32]
 8005ac0:	69fa      	ldr	r2, [r7, #28]
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	689b      	ldr	r3, [r3, #8]
 8005acc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	69fa      	ldr	r2, [r7, #28]
 8005ad6:	430a      	orrs	r2, r1
 8005ad8:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4a91      	ldr	r2, [pc, #580]	; (8005d24 <UART_SetConfig+0x2c8>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d121      	bne.n	8005b28 <UART_SetConfig+0xcc>
 8005ae4:	4b90      	ldr	r3, [pc, #576]	; (8005d28 <UART_SetConfig+0x2cc>)
 8005ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005aea:	f003 0303 	and.w	r3, r3, #3
 8005aee:	2b03      	cmp	r3, #3
 8005af0:	d816      	bhi.n	8005b20 <UART_SetConfig+0xc4>
 8005af2:	a201      	add	r2, pc, #4	; (adr r2, 8005af8 <UART_SetConfig+0x9c>)
 8005af4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005af8:	08005b09 	.word	0x08005b09
 8005afc:	08005b15 	.word	0x08005b15
 8005b00:	08005b0f 	.word	0x08005b0f
 8005b04:	08005b1b 	.word	0x08005b1b
 8005b08:	2301      	movs	r3, #1
 8005b0a:	76fb      	strb	r3, [r7, #27]
 8005b0c:	e0be      	b.n	8005c8c <UART_SetConfig+0x230>
 8005b0e:	2302      	movs	r3, #2
 8005b10:	76fb      	strb	r3, [r7, #27]
 8005b12:	e0bb      	b.n	8005c8c <UART_SetConfig+0x230>
 8005b14:	2304      	movs	r3, #4
 8005b16:	76fb      	strb	r3, [r7, #27]
 8005b18:	e0b8      	b.n	8005c8c <UART_SetConfig+0x230>
 8005b1a:	2308      	movs	r3, #8
 8005b1c:	76fb      	strb	r3, [r7, #27]
 8005b1e:	e0b5      	b.n	8005c8c <UART_SetConfig+0x230>
 8005b20:	2310      	movs	r3, #16
 8005b22:	76fb      	strb	r3, [r7, #27]
 8005b24:	bf00      	nop
 8005b26:	e0b1      	b.n	8005c8c <UART_SetConfig+0x230>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	4a7f      	ldr	r2, [pc, #508]	; (8005d2c <UART_SetConfig+0x2d0>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d134      	bne.n	8005b9c <UART_SetConfig+0x140>
 8005b32:	4b7d      	ldr	r3, [pc, #500]	; (8005d28 <UART_SetConfig+0x2cc>)
 8005b34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b38:	f003 030c 	and.w	r3, r3, #12
 8005b3c:	2b0c      	cmp	r3, #12
 8005b3e:	d829      	bhi.n	8005b94 <UART_SetConfig+0x138>
 8005b40:	a201      	add	r2, pc, #4	; (adr r2, 8005b48 <UART_SetConfig+0xec>)
 8005b42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b46:	bf00      	nop
 8005b48:	08005b7d 	.word	0x08005b7d
 8005b4c:	08005b95 	.word	0x08005b95
 8005b50:	08005b95 	.word	0x08005b95
 8005b54:	08005b95 	.word	0x08005b95
 8005b58:	08005b89 	.word	0x08005b89
 8005b5c:	08005b95 	.word	0x08005b95
 8005b60:	08005b95 	.word	0x08005b95
 8005b64:	08005b95 	.word	0x08005b95
 8005b68:	08005b83 	.word	0x08005b83
 8005b6c:	08005b95 	.word	0x08005b95
 8005b70:	08005b95 	.word	0x08005b95
 8005b74:	08005b95 	.word	0x08005b95
 8005b78:	08005b8f 	.word	0x08005b8f
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	76fb      	strb	r3, [r7, #27]
 8005b80:	e084      	b.n	8005c8c <UART_SetConfig+0x230>
 8005b82:	2302      	movs	r3, #2
 8005b84:	76fb      	strb	r3, [r7, #27]
 8005b86:	e081      	b.n	8005c8c <UART_SetConfig+0x230>
 8005b88:	2304      	movs	r3, #4
 8005b8a:	76fb      	strb	r3, [r7, #27]
 8005b8c:	e07e      	b.n	8005c8c <UART_SetConfig+0x230>
 8005b8e:	2308      	movs	r3, #8
 8005b90:	76fb      	strb	r3, [r7, #27]
 8005b92:	e07b      	b.n	8005c8c <UART_SetConfig+0x230>
 8005b94:	2310      	movs	r3, #16
 8005b96:	76fb      	strb	r3, [r7, #27]
 8005b98:	bf00      	nop
 8005b9a:	e077      	b.n	8005c8c <UART_SetConfig+0x230>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4a63      	ldr	r2, [pc, #396]	; (8005d30 <UART_SetConfig+0x2d4>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d120      	bne.n	8005be8 <UART_SetConfig+0x18c>
 8005ba6:	4b60      	ldr	r3, [pc, #384]	; (8005d28 <UART_SetConfig+0x2cc>)
 8005ba8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bac:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005bb0:	2b10      	cmp	r3, #16
 8005bb2:	d00f      	beq.n	8005bd4 <UART_SetConfig+0x178>
 8005bb4:	2b10      	cmp	r3, #16
 8005bb6:	d802      	bhi.n	8005bbe <UART_SetConfig+0x162>
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d005      	beq.n	8005bc8 <UART_SetConfig+0x16c>
 8005bbc:	e010      	b.n	8005be0 <UART_SetConfig+0x184>
 8005bbe:	2b20      	cmp	r3, #32
 8005bc0:	d005      	beq.n	8005bce <UART_SetConfig+0x172>
 8005bc2:	2b30      	cmp	r3, #48	; 0x30
 8005bc4:	d009      	beq.n	8005bda <UART_SetConfig+0x17e>
 8005bc6:	e00b      	b.n	8005be0 <UART_SetConfig+0x184>
 8005bc8:	2300      	movs	r3, #0
 8005bca:	76fb      	strb	r3, [r7, #27]
 8005bcc:	e05e      	b.n	8005c8c <UART_SetConfig+0x230>
 8005bce:	2302      	movs	r3, #2
 8005bd0:	76fb      	strb	r3, [r7, #27]
 8005bd2:	e05b      	b.n	8005c8c <UART_SetConfig+0x230>
 8005bd4:	2304      	movs	r3, #4
 8005bd6:	76fb      	strb	r3, [r7, #27]
 8005bd8:	e058      	b.n	8005c8c <UART_SetConfig+0x230>
 8005bda:	2308      	movs	r3, #8
 8005bdc:	76fb      	strb	r3, [r7, #27]
 8005bde:	e055      	b.n	8005c8c <UART_SetConfig+0x230>
 8005be0:	2310      	movs	r3, #16
 8005be2:	76fb      	strb	r3, [r7, #27]
 8005be4:	bf00      	nop
 8005be6:	e051      	b.n	8005c8c <UART_SetConfig+0x230>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	4a51      	ldr	r2, [pc, #324]	; (8005d34 <UART_SetConfig+0x2d8>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d120      	bne.n	8005c34 <UART_SetConfig+0x1d8>
 8005bf2:	4b4d      	ldr	r3, [pc, #308]	; (8005d28 <UART_SetConfig+0x2cc>)
 8005bf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bf8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005bfc:	2b40      	cmp	r3, #64	; 0x40
 8005bfe:	d00f      	beq.n	8005c20 <UART_SetConfig+0x1c4>
 8005c00:	2b40      	cmp	r3, #64	; 0x40
 8005c02:	d802      	bhi.n	8005c0a <UART_SetConfig+0x1ae>
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d005      	beq.n	8005c14 <UART_SetConfig+0x1b8>
 8005c08:	e010      	b.n	8005c2c <UART_SetConfig+0x1d0>
 8005c0a:	2b80      	cmp	r3, #128	; 0x80
 8005c0c:	d005      	beq.n	8005c1a <UART_SetConfig+0x1be>
 8005c0e:	2bc0      	cmp	r3, #192	; 0xc0
 8005c10:	d009      	beq.n	8005c26 <UART_SetConfig+0x1ca>
 8005c12:	e00b      	b.n	8005c2c <UART_SetConfig+0x1d0>
 8005c14:	2300      	movs	r3, #0
 8005c16:	76fb      	strb	r3, [r7, #27]
 8005c18:	e038      	b.n	8005c8c <UART_SetConfig+0x230>
 8005c1a:	2302      	movs	r3, #2
 8005c1c:	76fb      	strb	r3, [r7, #27]
 8005c1e:	e035      	b.n	8005c8c <UART_SetConfig+0x230>
 8005c20:	2304      	movs	r3, #4
 8005c22:	76fb      	strb	r3, [r7, #27]
 8005c24:	e032      	b.n	8005c8c <UART_SetConfig+0x230>
 8005c26:	2308      	movs	r3, #8
 8005c28:	76fb      	strb	r3, [r7, #27]
 8005c2a:	e02f      	b.n	8005c8c <UART_SetConfig+0x230>
 8005c2c:	2310      	movs	r3, #16
 8005c2e:	76fb      	strb	r3, [r7, #27]
 8005c30:	bf00      	nop
 8005c32:	e02b      	b.n	8005c8c <UART_SetConfig+0x230>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4a39      	ldr	r2, [pc, #228]	; (8005d20 <UART_SetConfig+0x2c4>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d124      	bne.n	8005c88 <UART_SetConfig+0x22c>
 8005c3e:	4b3a      	ldr	r3, [pc, #232]	; (8005d28 <UART_SetConfig+0x2cc>)
 8005c40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c44:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005c48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c4c:	d012      	beq.n	8005c74 <UART_SetConfig+0x218>
 8005c4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c52:	d802      	bhi.n	8005c5a <UART_SetConfig+0x1fe>
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d007      	beq.n	8005c68 <UART_SetConfig+0x20c>
 8005c58:	e012      	b.n	8005c80 <UART_SetConfig+0x224>
 8005c5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c5e:	d006      	beq.n	8005c6e <UART_SetConfig+0x212>
 8005c60:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005c64:	d009      	beq.n	8005c7a <UART_SetConfig+0x21e>
 8005c66:	e00b      	b.n	8005c80 <UART_SetConfig+0x224>
 8005c68:	2300      	movs	r3, #0
 8005c6a:	76fb      	strb	r3, [r7, #27]
 8005c6c:	e00e      	b.n	8005c8c <UART_SetConfig+0x230>
 8005c6e:	2302      	movs	r3, #2
 8005c70:	76fb      	strb	r3, [r7, #27]
 8005c72:	e00b      	b.n	8005c8c <UART_SetConfig+0x230>
 8005c74:	2304      	movs	r3, #4
 8005c76:	76fb      	strb	r3, [r7, #27]
 8005c78:	e008      	b.n	8005c8c <UART_SetConfig+0x230>
 8005c7a:	2308      	movs	r3, #8
 8005c7c:	76fb      	strb	r3, [r7, #27]
 8005c7e:	e005      	b.n	8005c8c <UART_SetConfig+0x230>
 8005c80:	2310      	movs	r3, #16
 8005c82:	76fb      	strb	r3, [r7, #27]
 8005c84:	bf00      	nop
 8005c86:	e001      	b.n	8005c8c <UART_SetConfig+0x230>
 8005c88:	2310      	movs	r3, #16
 8005c8a:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4a23      	ldr	r2, [pc, #140]	; (8005d20 <UART_SetConfig+0x2c4>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	f040 8085 	bne.w	8005da2 <UART_SetConfig+0x346>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005c98:	7efb      	ldrb	r3, [r7, #27]
 8005c9a:	2b08      	cmp	r3, #8
 8005c9c:	d823      	bhi.n	8005ce6 <UART_SetConfig+0x28a>
 8005c9e:	a201      	add	r2, pc, #4	; (adr r2, 8005ca4 <UART_SetConfig+0x248>)
 8005ca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ca4:	08005cc9 	.word	0x08005cc9
 8005ca8:	08005ce7 	.word	0x08005ce7
 8005cac:	08005cd1 	.word	0x08005cd1
 8005cb0:	08005ce7 	.word	0x08005ce7
 8005cb4:	08005cd7 	.word	0x08005cd7
 8005cb8:	08005ce7 	.word	0x08005ce7
 8005cbc:	08005ce7 	.word	0x08005ce7
 8005cc0:	08005ce7 	.word	0x08005ce7
 8005cc4:	08005cdf 	.word	0x08005cdf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005cc8:	f7fd ff14 	bl	8003af4 <HAL_RCC_GetPCLK1Freq>
 8005ccc:	6178      	str	r0, [r7, #20]
        break;
 8005cce:	e00f      	b.n	8005cf0 <UART_SetConfig+0x294>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005cd0:	4b19      	ldr	r3, [pc, #100]	; (8005d38 <UART_SetConfig+0x2dc>)
 8005cd2:	617b      	str	r3, [r7, #20]
        break;
 8005cd4:	e00c      	b.n	8005cf0 <UART_SetConfig+0x294>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005cd6:	f7fd fe77 	bl	80039c8 <HAL_RCC_GetSysClockFreq>
 8005cda:	6178      	str	r0, [r7, #20]
        break;
 8005cdc:	e008      	b.n	8005cf0 <UART_SetConfig+0x294>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005cde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ce2:	617b      	str	r3, [r7, #20]
        break;
 8005ce4:	e004      	b.n	8005cf0 <UART_SetConfig+0x294>
      default:
        pclk = 0U;
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005cea:	2301      	movs	r3, #1
 8005cec:	76bb      	strb	r3, [r7, #26]
        break;
 8005cee:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005cf0:	697b      	ldr	r3, [r7, #20]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	f000 8102 	beq.w	8005efc <UART_SetConfig+0x4a0>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	685a      	ldr	r2, [r3, #4]
 8005cfc:	4613      	mov	r3, r2
 8005cfe:	005b      	lsls	r3, r3, #1
 8005d00:	4413      	add	r3, r2
 8005d02:	697a      	ldr	r2, [r7, #20]
 8005d04:	429a      	cmp	r2, r3
 8005d06:	d305      	bcc.n	8005d14 <UART_SetConfig+0x2b8>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	685b      	ldr	r3, [r3, #4]
 8005d0c:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005d0e:	697a      	ldr	r2, [r7, #20]
 8005d10:	429a      	cmp	r2, r3
 8005d12:	d913      	bls.n	8005d3c <UART_SetConfig+0x2e0>
      {
        ret = HAL_ERROR;
 8005d14:	2301      	movs	r3, #1
 8005d16:	76bb      	strb	r3, [r7, #26]
 8005d18:	e0f0      	b.n	8005efc <UART_SetConfig+0x4a0>
 8005d1a:	bf00      	nop
 8005d1c:	efff69f3 	.word	0xefff69f3
 8005d20:	40008000 	.word	0x40008000
 8005d24:	40013800 	.word	0x40013800
 8005d28:	40021000 	.word	0x40021000
 8005d2c:	40004400 	.word	0x40004400
 8005d30:	40004800 	.word	0x40004800
 8005d34:	40004c00 	.word	0x40004c00
 8005d38:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8005d3c:	697b      	ldr	r3, [r7, #20]
 8005d3e:	4619      	mov	r1, r3
 8005d40:	f04f 0200 	mov.w	r2, #0
 8005d44:	f04f 0300 	mov.w	r3, #0
 8005d48:	f04f 0400 	mov.w	r4, #0
 8005d4c:	0214      	lsls	r4, r2, #8
 8005d4e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8005d52:	020b      	lsls	r3, r1, #8
 8005d54:	687a      	ldr	r2, [r7, #4]
 8005d56:	6852      	ldr	r2, [r2, #4]
 8005d58:	0852      	lsrs	r2, r2, #1
 8005d5a:	4611      	mov	r1, r2
 8005d5c:	f04f 0200 	mov.w	r2, #0
 8005d60:	eb13 0b01 	adds.w	fp, r3, r1
 8005d64:	eb44 0c02 	adc.w	ip, r4, r2
 8005d68:	4658      	mov	r0, fp
 8005d6a:	4661      	mov	r1, ip
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	685b      	ldr	r3, [r3, #4]
 8005d70:	f04f 0400 	mov.w	r4, #0
 8005d74:	461a      	mov	r2, r3
 8005d76:	4623      	mov	r3, r4
 8005d78:	f7fa ff1e 	bl	8000bb8 <__aeabi_uldivmod>
 8005d7c:	4603      	mov	r3, r0
 8005d7e:	460c      	mov	r4, r1
 8005d80:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005d82:	693b      	ldr	r3, [r7, #16]
 8005d84:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d88:	d308      	bcc.n	8005d9c <UART_SetConfig+0x340>
 8005d8a:	693b      	ldr	r3, [r7, #16]
 8005d8c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d90:	d204      	bcs.n	8005d9c <UART_SetConfig+0x340>
        {
          huart->Instance->BRR = usartdiv;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	693a      	ldr	r2, [r7, #16]
 8005d98:	60da      	str	r2, [r3, #12]
 8005d9a:	e0af      	b.n	8005efc <UART_SetConfig+0x4a0>
        }
        else
        {
          ret = HAL_ERROR;
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	76bb      	strb	r3, [r7, #26]
 8005da0:	e0ac      	b.n	8005efc <UART_SetConfig+0x4a0>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	69db      	ldr	r3, [r3, #28]
 8005da6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005daa:	d15b      	bne.n	8005e64 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8005dac:	7efb      	ldrb	r3, [r7, #27]
 8005dae:	2b08      	cmp	r3, #8
 8005db0:	d827      	bhi.n	8005e02 <UART_SetConfig+0x3a6>
 8005db2:	a201      	add	r2, pc, #4	; (adr r2, 8005db8 <UART_SetConfig+0x35c>)
 8005db4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005db8:	08005ddd 	.word	0x08005ddd
 8005dbc:	08005de5 	.word	0x08005de5
 8005dc0:	08005ded 	.word	0x08005ded
 8005dc4:	08005e03 	.word	0x08005e03
 8005dc8:	08005df3 	.word	0x08005df3
 8005dcc:	08005e03 	.word	0x08005e03
 8005dd0:	08005e03 	.word	0x08005e03
 8005dd4:	08005e03 	.word	0x08005e03
 8005dd8:	08005dfb 	.word	0x08005dfb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ddc:	f7fd fe8a 	bl	8003af4 <HAL_RCC_GetPCLK1Freq>
 8005de0:	6178      	str	r0, [r7, #20]
        break;
 8005de2:	e013      	b.n	8005e0c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005de4:	f7fd fe9c 	bl	8003b20 <HAL_RCC_GetPCLK2Freq>
 8005de8:	6178      	str	r0, [r7, #20]
        break;
 8005dea:	e00f      	b.n	8005e0c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005dec:	4b49      	ldr	r3, [pc, #292]	; (8005f14 <UART_SetConfig+0x4b8>)
 8005dee:	617b      	str	r3, [r7, #20]
        break;
 8005df0:	e00c      	b.n	8005e0c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005df2:	f7fd fde9 	bl	80039c8 <HAL_RCC_GetSysClockFreq>
 8005df6:	6178      	str	r0, [r7, #20]
        break;
 8005df8:	e008      	b.n	8005e0c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005dfa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005dfe:	617b      	str	r3, [r7, #20]
        break;
 8005e00:	e004      	b.n	8005e0c <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8005e02:	2300      	movs	r3, #0
 8005e04:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005e06:	2301      	movs	r3, #1
 8005e08:	76bb      	strb	r3, [r7, #26]
        break;
 8005e0a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005e0c:	697b      	ldr	r3, [r7, #20]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d074      	beq.n	8005efc <UART_SetConfig+0x4a0>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005e12:	697b      	ldr	r3, [r7, #20]
 8005e14:	005a      	lsls	r2, r3, #1
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	685b      	ldr	r3, [r3, #4]
 8005e1a:	085b      	lsrs	r3, r3, #1
 8005e1c:	441a      	add	r2, r3
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	685b      	ldr	r3, [r3, #4]
 8005e22:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e26:	b29b      	uxth	r3, r3
 8005e28:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e2a:	693b      	ldr	r3, [r7, #16]
 8005e2c:	2b0f      	cmp	r3, #15
 8005e2e:	d916      	bls.n	8005e5e <UART_SetConfig+0x402>
 8005e30:	693b      	ldr	r3, [r7, #16]
 8005e32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e36:	d212      	bcs.n	8005e5e <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005e38:	693b      	ldr	r3, [r7, #16]
 8005e3a:	b29b      	uxth	r3, r3
 8005e3c:	f023 030f 	bic.w	r3, r3, #15
 8005e40:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005e42:	693b      	ldr	r3, [r7, #16]
 8005e44:	085b      	lsrs	r3, r3, #1
 8005e46:	b29b      	uxth	r3, r3
 8005e48:	f003 0307 	and.w	r3, r3, #7
 8005e4c:	b29a      	uxth	r2, r3
 8005e4e:	89fb      	ldrh	r3, [r7, #14]
 8005e50:	4313      	orrs	r3, r2
 8005e52:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	89fa      	ldrh	r2, [r7, #14]
 8005e5a:	60da      	str	r2, [r3, #12]
 8005e5c:	e04e      	b.n	8005efc <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8005e5e:	2301      	movs	r3, #1
 8005e60:	76bb      	strb	r3, [r7, #26]
 8005e62:	e04b      	b.n	8005efc <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005e64:	7efb      	ldrb	r3, [r7, #27]
 8005e66:	2b08      	cmp	r3, #8
 8005e68:	d827      	bhi.n	8005eba <UART_SetConfig+0x45e>
 8005e6a:	a201      	add	r2, pc, #4	; (adr r2, 8005e70 <UART_SetConfig+0x414>)
 8005e6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e70:	08005e95 	.word	0x08005e95
 8005e74:	08005e9d 	.word	0x08005e9d
 8005e78:	08005ea5 	.word	0x08005ea5
 8005e7c:	08005ebb 	.word	0x08005ebb
 8005e80:	08005eab 	.word	0x08005eab
 8005e84:	08005ebb 	.word	0x08005ebb
 8005e88:	08005ebb 	.word	0x08005ebb
 8005e8c:	08005ebb 	.word	0x08005ebb
 8005e90:	08005eb3 	.word	0x08005eb3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e94:	f7fd fe2e 	bl	8003af4 <HAL_RCC_GetPCLK1Freq>
 8005e98:	6178      	str	r0, [r7, #20]
        break;
 8005e9a:	e013      	b.n	8005ec4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e9c:	f7fd fe40 	bl	8003b20 <HAL_RCC_GetPCLK2Freq>
 8005ea0:	6178      	str	r0, [r7, #20]
        break;
 8005ea2:	e00f      	b.n	8005ec4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ea4:	4b1b      	ldr	r3, [pc, #108]	; (8005f14 <UART_SetConfig+0x4b8>)
 8005ea6:	617b      	str	r3, [r7, #20]
        break;
 8005ea8:	e00c      	b.n	8005ec4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005eaa:	f7fd fd8d 	bl	80039c8 <HAL_RCC_GetSysClockFreq>
 8005eae:	6178      	str	r0, [r7, #20]
        break;
 8005eb0:	e008      	b.n	8005ec4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005eb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005eb6:	617b      	str	r3, [r7, #20]
        break;
 8005eb8:	e004      	b.n	8005ec4 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8005eba:	2300      	movs	r3, #0
 8005ebc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	76bb      	strb	r3, [r7, #26]
        break;
 8005ec2:	bf00      	nop
    }

    if (pclk != 0U)
 8005ec4:	697b      	ldr	r3, [r7, #20]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d018      	beq.n	8005efc <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	085a      	lsrs	r2, r3, #1
 8005ed0:	697b      	ldr	r3, [r7, #20]
 8005ed2:	441a      	add	r2, r3
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	685b      	ldr	r3, [r3, #4]
 8005ed8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005edc:	b29b      	uxth	r3, r3
 8005ede:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ee0:	693b      	ldr	r3, [r7, #16]
 8005ee2:	2b0f      	cmp	r3, #15
 8005ee4:	d908      	bls.n	8005ef8 <UART_SetConfig+0x49c>
 8005ee6:	693b      	ldr	r3, [r7, #16]
 8005ee8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005eec:	d204      	bcs.n	8005ef8 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	693a      	ldr	r2, [r7, #16]
 8005ef4:	60da      	str	r2, [r3, #12]
 8005ef6:	e001      	b.n	8005efc <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8005ef8:	2301      	movs	r3, #1
 8005efa:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2200      	movs	r2, #0
 8005f00:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2200      	movs	r2, #0
 8005f06:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8005f08:	7ebb      	ldrb	r3, [r7, #26]
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	3720      	adds	r7, #32
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8005f14:	00f42400 	.word	0x00f42400

08005f18 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005f18:	b480      	push	{r7}
 8005f1a:	b083      	sub	sp, #12
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f24:	f003 0301 	and.w	r3, r3, #1
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d00a      	beq.n	8005f42 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	685b      	ldr	r3, [r3, #4]
 8005f32:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	430a      	orrs	r2, r1
 8005f40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f46:	f003 0302 	and.w	r3, r3, #2
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d00a      	beq.n	8005f64 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	685b      	ldr	r3, [r3, #4]
 8005f54:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	430a      	orrs	r2, r1
 8005f62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f68:	f003 0304 	and.w	r3, r3, #4
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d00a      	beq.n	8005f86 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	685b      	ldr	r3, [r3, #4]
 8005f76:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	430a      	orrs	r2, r1
 8005f84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f8a:	f003 0308 	and.w	r3, r3, #8
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d00a      	beq.n	8005fa8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	685b      	ldr	r3, [r3, #4]
 8005f98:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	430a      	orrs	r2, r1
 8005fa6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fac:	f003 0310 	and.w	r3, r3, #16
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d00a      	beq.n	8005fca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	689b      	ldr	r3, [r3, #8]
 8005fba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	430a      	orrs	r2, r1
 8005fc8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fce:	f003 0320 	and.w	r3, r3, #32
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d00a      	beq.n	8005fec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	689b      	ldr	r3, [r3, #8]
 8005fdc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	430a      	orrs	r2, r1
 8005fea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ff0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d01a      	beq.n	800602e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	685b      	ldr	r3, [r3, #4]
 8005ffe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	430a      	orrs	r2, r1
 800600c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006012:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006016:	d10a      	bne.n	800602e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	685b      	ldr	r3, [r3, #4]
 800601e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	430a      	orrs	r2, r1
 800602c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006032:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006036:	2b00      	cmp	r3, #0
 8006038:	d00a      	beq.n	8006050 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	685b      	ldr	r3, [r3, #4]
 8006040:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	430a      	orrs	r2, r1
 800604e:	605a      	str	r2, [r3, #4]
  }
}
 8006050:	bf00      	nop
 8006052:	370c      	adds	r7, #12
 8006054:	46bd      	mov	sp, r7
 8006056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605a:	4770      	bx	lr

0800605c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b086      	sub	sp, #24
 8006060:	af02      	add	r7, sp, #8
 8006062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2200      	movs	r2, #0
 8006068:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800606a:	f7fc fc1b 	bl	80028a4 <HAL_GetTick>
 800606e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f003 0308 	and.w	r3, r3, #8
 800607a:	2b08      	cmp	r3, #8
 800607c:	d10e      	bne.n	800609c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800607e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006082:	9300      	str	r3, [sp, #0]
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	2200      	movs	r2, #0
 8006088:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	f000 f82a 	bl	80060e6 <UART_WaitOnFlagUntilTimeout>
 8006092:	4603      	mov	r3, r0
 8006094:	2b00      	cmp	r3, #0
 8006096:	d001      	beq.n	800609c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006098:	2303      	movs	r3, #3
 800609a:	e020      	b.n	80060de <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f003 0304 	and.w	r3, r3, #4
 80060a6:	2b04      	cmp	r3, #4
 80060a8:	d10e      	bne.n	80060c8 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80060aa:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80060ae:	9300      	str	r3, [sp, #0]
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	2200      	movs	r2, #0
 80060b4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80060b8:	6878      	ldr	r0, [r7, #4]
 80060ba:	f000 f814 	bl	80060e6 <UART_WaitOnFlagUntilTimeout>
 80060be:	4603      	mov	r3, r0
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d001      	beq.n	80060c8 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80060c4:	2303      	movs	r3, #3
 80060c6:	e00a      	b.n	80060de <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2220      	movs	r2, #32
 80060cc:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2220      	movs	r2, #32
 80060d2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2200      	movs	r2, #0
 80060d8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80060dc:	2300      	movs	r3, #0
}
 80060de:	4618      	mov	r0, r3
 80060e0:	3710      	adds	r7, #16
 80060e2:	46bd      	mov	sp, r7
 80060e4:	bd80      	pop	{r7, pc}

080060e6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80060e6:	b580      	push	{r7, lr}
 80060e8:	b084      	sub	sp, #16
 80060ea:	af00      	add	r7, sp, #0
 80060ec:	60f8      	str	r0, [r7, #12]
 80060ee:	60b9      	str	r1, [r7, #8]
 80060f0:	603b      	str	r3, [r7, #0]
 80060f2:	4613      	mov	r3, r2
 80060f4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060f6:	e05d      	b.n	80061b4 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060f8:	69bb      	ldr	r3, [r7, #24]
 80060fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060fe:	d059      	beq.n	80061b4 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006100:	f7fc fbd0 	bl	80028a4 <HAL_GetTick>
 8006104:	4602      	mov	r2, r0
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	1ad3      	subs	r3, r2, r3
 800610a:	69ba      	ldr	r2, [r7, #24]
 800610c:	429a      	cmp	r2, r3
 800610e:	d302      	bcc.n	8006116 <UART_WaitOnFlagUntilTimeout+0x30>
 8006110:	69bb      	ldr	r3, [r7, #24]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d11b      	bne.n	800614e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	681a      	ldr	r2, [r3, #0]
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006124:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	689a      	ldr	r2, [r3, #8]
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f022 0201 	bic.w	r2, r2, #1
 8006134:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	2220      	movs	r2, #32
 800613a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	2220      	movs	r2, #32
 8006140:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	2200      	movs	r2, #0
 8006146:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800614a:	2303      	movs	r3, #3
 800614c:	e042      	b.n	80061d4 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f003 0304 	and.w	r3, r3, #4
 8006158:	2b00      	cmp	r3, #0
 800615a:	d02b      	beq.n	80061b4 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	69db      	ldr	r3, [r3, #28]
 8006162:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006166:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800616a:	d123      	bne.n	80061b4 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006174:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	681a      	ldr	r2, [r3, #0]
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006184:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	689a      	ldr	r2, [r3, #8]
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f022 0201 	bic.w	r2, r2, #1
 8006194:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	2220      	movs	r2, #32
 800619a:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	2220      	movs	r2, #32
 80061a0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	2220      	movs	r2, #32
 80061a6:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	2200      	movs	r2, #0
 80061ac:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 80061b0:	2303      	movs	r3, #3
 80061b2:	e00f      	b.n	80061d4 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	69da      	ldr	r2, [r3, #28]
 80061ba:	68bb      	ldr	r3, [r7, #8]
 80061bc:	4013      	ands	r3, r2
 80061be:	68ba      	ldr	r2, [r7, #8]
 80061c0:	429a      	cmp	r2, r3
 80061c2:	bf0c      	ite	eq
 80061c4:	2301      	moveq	r3, #1
 80061c6:	2300      	movne	r3, #0
 80061c8:	b2db      	uxtb	r3, r3
 80061ca:	461a      	mov	r2, r3
 80061cc:	79fb      	ldrb	r3, [r7, #7]
 80061ce:	429a      	cmp	r2, r3
 80061d0:	d092      	beq.n	80060f8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80061d2:	2300      	movs	r3, #0
}
 80061d4:	4618      	mov	r0, r3
 80061d6:	3710      	adds	r7, #16
 80061d8:	46bd      	mov	sp, r7
 80061da:	bd80      	pop	{r7, pc}

080061dc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80061dc:	b480      	push	{r7}
 80061de:	b083      	sub	sp, #12
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	681a      	ldr	r2, [r3, #0]
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80061f2:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	689a      	ldr	r2, [r3, #8]
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f022 0201 	bic.w	r2, r2, #1
 8006202:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2220      	movs	r2, #32
 8006208:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2200      	movs	r2, #0
 800620e:	661a      	str	r2, [r3, #96]	; 0x60
}
 8006210:	bf00      	nop
 8006212:	370c      	adds	r7, #12
 8006214:	46bd      	mov	sp, r7
 8006216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621a:	4770      	bx	lr

0800621c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b084      	sub	sp, #16
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006228:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	2200      	movs	r2, #0
 800622e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	2200      	movs	r2, #0
 8006236:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800623a:	68f8      	ldr	r0, [r7, #12]
 800623c:	f7ff fc04 	bl	8005a48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006240:	bf00      	nop
 8006242:	3710      	adds	r7, #16
 8006244:	46bd      	mov	sp, r7
 8006246:	bd80      	pop	{r7, pc}

08006248 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b082      	sub	sp, #8
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	681a      	ldr	r2, [r3, #0]
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800625e:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2220      	movs	r2, #32
 8006264:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2200      	movs	r2, #0
 800626a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800626c:	6878      	ldr	r0, [r7, #4]
 800626e:	f7ff fbe1 	bl	8005a34 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006272:	bf00      	nop
 8006274:	3708      	adds	r7, #8
 8006276:	46bd      	mov	sp, r7
 8006278:	bd80      	pop	{r7, pc}

0800627a <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800627a:	b580      	push	{r7, lr}
 800627c:	b084      	sub	sp, #16
 800627e:	af00      	add	r7, sp, #0
 8006280:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006288:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800628e:	2b22      	cmp	r3, #34	; 0x22
 8006290:	d13a      	bne.n	8006308 <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006298:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800629a:	89bb      	ldrh	r3, [r7, #12]
 800629c:	b2d9      	uxtb	r1, r3
 800629e:	89fb      	ldrh	r3, [r7, #14]
 80062a0:	b2da      	uxtb	r2, r3
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062a6:	400a      	ands	r2, r1
 80062a8:	b2d2      	uxtb	r2, r2
 80062aa:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062b0:	1c5a      	adds	r2, r3, #1
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80062bc:	b29b      	uxth	r3, r3
 80062be:	3b01      	subs	r3, #1
 80062c0:	b29a      	uxth	r2, r3
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80062ce:	b29b      	uxth	r3, r3
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d123      	bne.n	800631c <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	681a      	ldr	r2, [r3, #0]
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80062e2:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	689a      	ldr	r2, [r3, #8]
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f022 0201 	bic.w	r2, r2, #1
 80062f2:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2220      	movs	r2, #32
 80062f8:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2200      	movs	r2, #0
 80062fe:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006300:	6878      	ldr	r0, [r7, #4]
 8006302:	f7fb fef7 	bl	80020f4 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006306:	e009      	b.n	800631c <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	8b1b      	ldrh	r3, [r3, #24]
 800630e:	b29a      	uxth	r2, r3
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f042 0208 	orr.w	r2, r2, #8
 8006318:	b292      	uxth	r2, r2
 800631a:	831a      	strh	r2, [r3, #24]
}
 800631c:	bf00      	nop
 800631e:	3710      	adds	r7, #16
 8006320:	46bd      	mov	sp, r7
 8006322:	bd80      	pop	{r7, pc}

08006324 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b084      	sub	sp, #16
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006332:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006338:	2b22      	cmp	r3, #34	; 0x22
 800633a:	d13a      	bne.n	80063b2 <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006342:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006348:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800634a:	89ba      	ldrh	r2, [r7, #12]
 800634c:	89fb      	ldrh	r3, [r7, #14]
 800634e:	4013      	ands	r3, r2
 8006350:	b29a      	uxth	r2, r3
 8006352:	68bb      	ldr	r3, [r7, #8]
 8006354:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800635a:	1c9a      	adds	r2, r3, #2
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006366:	b29b      	uxth	r3, r3
 8006368:	3b01      	subs	r3, #1
 800636a:	b29a      	uxth	r2, r3
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006378:	b29b      	uxth	r3, r3
 800637a:	2b00      	cmp	r3, #0
 800637c:	d123      	bne.n	80063c6 <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	681a      	ldr	r2, [r3, #0]
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800638c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	689a      	ldr	r2, [r3, #8]
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f022 0201 	bic.w	r2, r2, #1
 800639c:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2220      	movs	r2, #32
 80063a2:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2200      	movs	r2, #0
 80063a8:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80063aa:	6878      	ldr	r0, [r7, #4]
 80063ac:	f7fb fea2 	bl	80020f4 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80063b0:	e009      	b.n	80063c6 <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	8b1b      	ldrh	r3, [r3, #24]
 80063b8:	b29a      	uxth	r2, r3
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f042 0208 	orr.w	r2, r2, #8
 80063c2:	b292      	uxth	r2, r2
 80063c4:	831a      	strh	r2, [r3, #24]
}
 80063c6:	bf00      	nop
 80063c8:	3710      	adds	r7, #16
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bd80      	pop	{r7, pc}

080063ce <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80063ce:	b480      	push	{r7}
 80063d0:	b083      	sub	sp, #12
 80063d2:	af00      	add	r7, sp, #0
 80063d4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80063d6:	bf00      	nop
 80063d8:	370c      	adds	r7, #12
 80063da:	46bd      	mov	sp, r7
 80063dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e0:	4770      	bx	lr
	...

080063e4 <__errno>:
 80063e4:	4b01      	ldr	r3, [pc, #4]	; (80063ec <__errno+0x8>)
 80063e6:	6818      	ldr	r0, [r3, #0]
 80063e8:	4770      	bx	lr
 80063ea:	bf00      	nop
 80063ec:	200000e8 	.word	0x200000e8

080063f0 <__libc_init_array>:
 80063f0:	b570      	push	{r4, r5, r6, lr}
 80063f2:	4e0d      	ldr	r6, [pc, #52]	; (8006428 <__libc_init_array+0x38>)
 80063f4:	4c0d      	ldr	r4, [pc, #52]	; (800642c <__libc_init_array+0x3c>)
 80063f6:	1ba4      	subs	r4, r4, r6
 80063f8:	10a4      	asrs	r4, r4, #2
 80063fa:	2500      	movs	r5, #0
 80063fc:	42a5      	cmp	r5, r4
 80063fe:	d109      	bne.n	8006414 <__libc_init_array+0x24>
 8006400:	4e0b      	ldr	r6, [pc, #44]	; (8006430 <__libc_init_array+0x40>)
 8006402:	4c0c      	ldr	r4, [pc, #48]	; (8006434 <__libc_init_array+0x44>)
 8006404:	f002 f8f6 	bl	80085f4 <_init>
 8006408:	1ba4      	subs	r4, r4, r6
 800640a:	10a4      	asrs	r4, r4, #2
 800640c:	2500      	movs	r5, #0
 800640e:	42a5      	cmp	r5, r4
 8006410:	d105      	bne.n	800641e <__libc_init_array+0x2e>
 8006412:	bd70      	pop	{r4, r5, r6, pc}
 8006414:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006418:	4798      	blx	r3
 800641a:	3501      	adds	r5, #1
 800641c:	e7ee      	b.n	80063fc <__libc_init_array+0xc>
 800641e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006422:	4798      	blx	r3
 8006424:	3501      	adds	r5, #1
 8006426:	e7f2      	b.n	800640e <__libc_init_array+0x1e>
 8006428:	08008aa8 	.word	0x08008aa8
 800642c:	08008aa8 	.word	0x08008aa8
 8006430:	08008aa8 	.word	0x08008aa8
 8006434:	08008aac 	.word	0x08008aac

08006438 <__itoa>:
 8006438:	1e93      	subs	r3, r2, #2
 800643a:	2b22      	cmp	r3, #34	; 0x22
 800643c:	b510      	push	{r4, lr}
 800643e:	460c      	mov	r4, r1
 8006440:	d904      	bls.n	800644c <__itoa+0x14>
 8006442:	2300      	movs	r3, #0
 8006444:	700b      	strb	r3, [r1, #0]
 8006446:	461c      	mov	r4, r3
 8006448:	4620      	mov	r0, r4
 800644a:	bd10      	pop	{r4, pc}
 800644c:	2a0a      	cmp	r2, #10
 800644e:	d109      	bne.n	8006464 <__itoa+0x2c>
 8006450:	2800      	cmp	r0, #0
 8006452:	da07      	bge.n	8006464 <__itoa+0x2c>
 8006454:	232d      	movs	r3, #45	; 0x2d
 8006456:	700b      	strb	r3, [r1, #0]
 8006458:	4240      	negs	r0, r0
 800645a:	2101      	movs	r1, #1
 800645c:	4421      	add	r1, r4
 800645e:	f000 fcd5 	bl	8006e0c <__utoa>
 8006462:	e7f1      	b.n	8006448 <__itoa+0x10>
 8006464:	2100      	movs	r1, #0
 8006466:	e7f9      	b.n	800645c <__itoa+0x24>

08006468 <itoa>:
 8006468:	f7ff bfe6 	b.w	8006438 <__itoa>

0800646c <memcmp>:
 800646c:	b530      	push	{r4, r5, lr}
 800646e:	2400      	movs	r4, #0
 8006470:	42a2      	cmp	r2, r4
 8006472:	d101      	bne.n	8006478 <memcmp+0xc>
 8006474:	2000      	movs	r0, #0
 8006476:	e007      	b.n	8006488 <memcmp+0x1c>
 8006478:	5d03      	ldrb	r3, [r0, r4]
 800647a:	3401      	adds	r4, #1
 800647c:	190d      	adds	r5, r1, r4
 800647e:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8006482:	42ab      	cmp	r3, r5
 8006484:	d0f4      	beq.n	8006470 <memcmp+0x4>
 8006486:	1b58      	subs	r0, r3, r5
 8006488:	bd30      	pop	{r4, r5, pc}

0800648a <memcpy>:
 800648a:	b510      	push	{r4, lr}
 800648c:	1e43      	subs	r3, r0, #1
 800648e:	440a      	add	r2, r1
 8006490:	4291      	cmp	r1, r2
 8006492:	d100      	bne.n	8006496 <memcpy+0xc>
 8006494:	bd10      	pop	{r4, pc}
 8006496:	f811 4b01 	ldrb.w	r4, [r1], #1
 800649a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800649e:	e7f7      	b.n	8006490 <memcpy+0x6>

080064a0 <memset>:
 80064a0:	4402      	add	r2, r0
 80064a2:	4603      	mov	r3, r0
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d100      	bne.n	80064aa <memset+0xa>
 80064a8:	4770      	bx	lr
 80064aa:	f803 1b01 	strb.w	r1, [r3], #1
 80064ae:	e7f9      	b.n	80064a4 <memset+0x4>

080064b0 <__cvt>:
 80064b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80064b4:	ec55 4b10 	vmov	r4, r5, d0
 80064b8:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80064ba:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80064be:	2d00      	cmp	r5, #0
 80064c0:	460e      	mov	r6, r1
 80064c2:	4691      	mov	r9, r2
 80064c4:	4619      	mov	r1, r3
 80064c6:	bfb8      	it	lt
 80064c8:	4622      	movlt	r2, r4
 80064ca:	462b      	mov	r3, r5
 80064cc:	f027 0720 	bic.w	r7, r7, #32
 80064d0:	bfbb      	ittet	lt
 80064d2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80064d6:	461d      	movlt	r5, r3
 80064d8:	2300      	movge	r3, #0
 80064da:	232d      	movlt	r3, #45	; 0x2d
 80064dc:	bfb8      	it	lt
 80064de:	4614      	movlt	r4, r2
 80064e0:	2f46      	cmp	r7, #70	; 0x46
 80064e2:	700b      	strb	r3, [r1, #0]
 80064e4:	d004      	beq.n	80064f0 <__cvt+0x40>
 80064e6:	2f45      	cmp	r7, #69	; 0x45
 80064e8:	d100      	bne.n	80064ec <__cvt+0x3c>
 80064ea:	3601      	adds	r6, #1
 80064ec:	2102      	movs	r1, #2
 80064ee:	e000      	b.n	80064f2 <__cvt+0x42>
 80064f0:	2103      	movs	r1, #3
 80064f2:	ab03      	add	r3, sp, #12
 80064f4:	9301      	str	r3, [sp, #4]
 80064f6:	ab02      	add	r3, sp, #8
 80064f8:	9300      	str	r3, [sp, #0]
 80064fa:	4632      	mov	r2, r6
 80064fc:	4653      	mov	r3, sl
 80064fe:	ec45 4b10 	vmov	d0, r4, r5
 8006502:	f000 fd4d 	bl	8006fa0 <_dtoa_r>
 8006506:	2f47      	cmp	r7, #71	; 0x47
 8006508:	4680      	mov	r8, r0
 800650a:	d102      	bne.n	8006512 <__cvt+0x62>
 800650c:	f019 0f01 	tst.w	r9, #1
 8006510:	d026      	beq.n	8006560 <__cvt+0xb0>
 8006512:	2f46      	cmp	r7, #70	; 0x46
 8006514:	eb08 0906 	add.w	r9, r8, r6
 8006518:	d111      	bne.n	800653e <__cvt+0x8e>
 800651a:	f898 3000 	ldrb.w	r3, [r8]
 800651e:	2b30      	cmp	r3, #48	; 0x30
 8006520:	d10a      	bne.n	8006538 <__cvt+0x88>
 8006522:	2200      	movs	r2, #0
 8006524:	2300      	movs	r3, #0
 8006526:	4620      	mov	r0, r4
 8006528:	4629      	mov	r1, r5
 800652a:	f7fa fad5 	bl	8000ad8 <__aeabi_dcmpeq>
 800652e:	b918      	cbnz	r0, 8006538 <__cvt+0x88>
 8006530:	f1c6 0601 	rsb	r6, r6, #1
 8006534:	f8ca 6000 	str.w	r6, [sl]
 8006538:	f8da 3000 	ldr.w	r3, [sl]
 800653c:	4499      	add	r9, r3
 800653e:	2200      	movs	r2, #0
 8006540:	2300      	movs	r3, #0
 8006542:	4620      	mov	r0, r4
 8006544:	4629      	mov	r1, r5
 8006546:	f7fa fac7 	bl	8000ad8 <__aeabi_dcmpeq>
 800654a:	b938      	cbnz	r0, 800655c <__cvt+0xac>
 800654c:	2230      	movs	r2, #48	; 0x30
 800654e:	9b03      	ldr	r3, [sp, #12]
 8006550:	454b      	cmp	r3, r9
 8006552:	d205      	bcs.n	8006560 <__cvt+0xb0>
 8006554:	1c59      	adds	r1, r3, #1
 8006556:	9103      	str	r1, [sp, #12]
 8006558:	701a      	strb	r2, [r3, #0]
 800655a:	e7f8      	b.n	800654e <__cvt+0x9e>
 800655c:	f8cd 900c 	str.w	r9, [sp, #12]
 8006560:	9b03      	ldr	r3, [sp, #12]
 8006562:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006564:	eba3 0308 	sub.w	r3, r3, r8
 8006568:	4640      	mov	r0, r8
 800656a:	6013      	str	r3, [r2, #0]
 800656c:	b004      	add	sp, #16
 800656e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08006572 <__exponent>:
 8006572:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006574:	2900      	cmp	r1, #0
 8006576:	4604      	mov	r4, r0
 8006578:	bfba      	itte	lt
 800657a:	4249      	neglt	r1, r1
 800657c:	232d      	movlt	r3, #45	; 0x2d
 800657e:	232b      	movge	r3, #43	; 0x2b
 8006580:	2909      	cmp	r1, #9
 8006582:	f804 2b02 	strb.w	r2, [r4], #2
 8006586:	7043      	strb	r3, [r0, #1]
 8006588:	dd20      	ble.n	80065cc <__exponent+0x5a>
 800658a:	f10d 0307 	add.w	r3, sp, #7
 800658e:	461f      	mov	r7, r3
 8006590:	260a      	movs	r6, #10
 8006592:	fb91 f5f6 	sdiv	r5, r1, r6
 8006596:	fb06 1115 	mls	r1, r6, r5, r1
 800659a:	3130      	adds	r1, #48	; 0x30
 800659c:	2d09      	cmp	r5, #9
 800659e:	f803 1c01 	strb.w	r1, [r3, #-1]
 80065a2:	f103 32ff 	add.w	r2, r3, #4294967295
 80065a6:	4629      	mov	r1, r5
 80065a8:	dc09      	bgt.n	80065be <__exponent+0x4c>
 80065aa:	3130      	adds	r1, #48	; 0x30
 80065ac:	3b02      	subs	r3, #2
 80065ae:	f802 1c01 	strb.w	r1, [r2, #-1]
 80065b2:	42bb      	cmp	r3, r7
 80065b4:	4622      	mov	r2, r4
 80065b6:	d304      	bcc.n	80065c2 <__exponent+0x50>
 80065b8:	1a10      	subs	r0, r2, r0
 80065ba:	b003      	add	sp, #12
 80065bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80065be:	4613      	mov	r3, r2
 80065c0:	e7e7      	b.n	8006592 <__exponent+0x20>
 80065c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80065c6:	f804 2b01 	strb.w	r2, [r4], #1
 80065ca:	e7f2      	b.n	80065b2 <__exponent+0x40>
 80065cc:	2330      	movs	r3, #48	; 0x30
 80065ce:	4419      	add	r1, r3
 80065d0:	7083      	strb	r3, [r0, #2]
 80065d2:	1d02      	adds	r2, r0, #4
 80065d4:	70c1      	strb	r1, [r0, #3]
 80065d6:	e7ef      	b.n	80065b8 <__exponent+0x46>

080065d8 <_printf_float>:
 80065d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065dc:	b08d      	sub	sp, #52	; 0x34
 80065de:	460c      	mov	r4, r1
 80065e0:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80065e4:	4616      	mov	r6, r2
 80065e6:	461f      	mov	r7, r3
 80065e8:	4605      	mov	r5, r0
 80065ea:	f001 fa91 	bl	8007b10 <_localeconv_r>
 80065ee:	6803      	ldr	r3, [r0, #0]
 80065f0:	9304      	str	r3, [sp, #16]
 80065f2:	4618      	mov	r0, r3
 80065f4:	f7f9 fdf4 	bl	80001e0 <strlen>
 80065f8:	2300      	movs	r3, #0
 80065fa:	930a      	str	r3, [sp, #40]	; 0x28
 80065fc:	f8d8 3000 	ldr.w	r3, [r8]
 8006600:	9005      	str	r0, [sp, #20]
 8006602:	3307      	adds	r3, #7
 8006604:	f023 0307 	bic.w	r3, r3, #7
 8006608:	f103 0208 	add.w	r2, r3, #8
 800660c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006610:	f8d4 b000 	ldr.w	fp, [r4]
 8006614:	f8c8 2000 	str.w	r2, [r8]
 8006618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800661c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006620:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006624:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006628:	9307      	str	r3, [sp, #28]
 800662a:	f8cd 8018 	str.w	r8, [sp, #24]
 800662e:	f04f 32ff 	mov.w	r2, #4294967295
 8006632:	4ba7      	ldr	r3, [pc, #668]	; (80068d0 <_printf_float+0x2f8>)
 8006634:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006638:	f7fa fa80 	bl	8000b3c <__aeabi_dcmpun>
 800663c:	bb70      	cbnz	r0, 800669c <_printf_float+0xc4>
 800663e:	f04f 32ff 	mov.w	r2, #4294967295
 8006642:	4ba3      	ldr	r3, [pc, #652]	; (80068d0 <_printf_float+0x2f8>)
 8006644:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006648:	f7fa fa5a 	bl	8000b00 <__aeabi_dcmple>
 800664c:	bb30      	cbnz	r0, 800669c <_printf_float+0xc4>
 800664e:	2200      	movs	r2, #0
 8006650:	2300      	movs	r3, #0
 8006652:	4640      	mov	r0, r8
 8006654:	4649      	mov	r1, r9
 8006656:	f7fa fa49 	bl	8000aec <__aeabi_dcmplt>
 800665a:	b110      	cbz	r0, 8006662 <_printf_float+0x8a>
 800665c:	232d      	movs	r3, #45	; 0x2d
 800665e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006662:	4a9c      	ldr	r2, [pc, #624]	; (80068d4 <_printf_float+0x2fc>)
 8006664:	4b9c      	ldr	r3, [pc, #624]	; (80068d8 <_printf_float+0x300>)
 8006666:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800666a:	bf8c      	ite	hi
 800666c:	4690      	movhi	r8, r2
 800666e:	4698      	movls	r8, r3
 8006670:	2303      	movs	r3, #3
 8006672:	f02b 0204 	bic.w	r2, fp, #4
 8006676:	6123      	str	r3, [r4, #16]
 8006678:	6022      	str	r2, [r4, #0]
 800667a:	f04f 0900 	mov.w	r9, #0
 800667e:	9700      	str	r7, [sp, #0]
 8006680:	4633      	mov	r3, r6
 8006682:	aa0b      	add	r2, sp, #44	; 0x2c
 8006684:	4621      	mov	r1, r4
 8006686:	4628      	mov	r0, r5
 8006688:	f000 f9e6 	bl	8006a58 <_printf_common>
 800668c:	3001      	adds	r0, #1
 800668e:	f040 808d 	bne.w	80067ac <_printf_float+0x1d4>
 8006692:	f04f 30ff 	mov.w	r0, #4294967295
 8006696:	b00d      	add	sp, #52	; 0x34
 8006698:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800669c:	4642      	mov	r2, r8
 800669e:	464b      	mov	r3, r9
 80066a0:	4640      	mov	r0, r8
 80066a2:	4649      	mov	r1, r9
 80066a4:	f7fa fa4a 	bl	8000b3c <__aeabi_dcmpun>
 80066a8:	b110      	cbz	r0, 80066b0 <_printf_float+0xd8>
 80066aa:	4a8c      	ldr	r2, [pc, #560]	; (80068dc <_printf_float+0x304>)
 80066ac:	4b8c      	ldr	r3, [pc, #560]	; (80068e0 <_printf_float+0x308>)
 80066ae:	e7da      	b.n	8006666 <_printf_float+0x8e>
 80066b0:	6861      	ldr	r1, [r4, #4]
 80066b2:	1c4b      	adds	r3, r1, #1
 80066b4:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80066b8:	a80a      	add	r0, sp, #40	; 0x28
 80066ba:	d13e      	bne.n	800673a <_printf_float+0x162>
 80066bc:	2306      	movs	r3, #6
 80066be:	6063      	str	r3, [r4, #4]
 80066c0:	2300      	movs	r3, #0
 80066c2:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80066c6:	ab09      	add	r3, sp, #36	; 0x24
 80066c8:	9300      	str	r3, [sp, #0]
 80066ca:	ec49 8b10 	vmov	d0, r8, r9
 80066ce:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80066d2:	6022      	str	r2, [r4, #0]
 80066d4:	f8cd a004 	str.w	sl, [sp, #4]
 80066d8:	6861      	ldr	r1, [r4, #4]
 80066da:	4628      	mov	r0, r5
 80066dc:	f7ff fee8 	bl	80064b0 <__cvt>
 80066e0:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80066e4:	2b47      	cmp	r3, #71	; 0x47
 80066e6:	4680      	mov	r8, r0
 80066e8:	d109      	bne.n	80066fe <_printf_float+0x126>
 80066ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066ec:	1cd8      	adds	r0, r3, #3
 80066ee:	db02      	blt.n	80066f6 <_printf_float+0x11e>
 80066f0:	6862      	ldr	r2, [r4, #4]
 80066f2:	4293      	cmp	r3, r2
 80066f4:	dd47      	ble.n	8006786 <_printf_float+0x1ae>
 80066f6:	f1aa 0a02 	sub.w	sl, sl, #2
 80066fa:	fa5f fa8a 	uxtb.w	sl, sl
 80066fe:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8006702:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006704:	d824      	bhi.n	8006750 <_printf_float+0x178>
 8006706:	3901      	subs	r1, #1
 8006708:	4652      	mov	r2, sl
 800670a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800670e:	9109      	str	r1, [sp, #36]	; 0x24
 8006710:	f7ff ff2f 	bl	8006572 <__exponent>
 8006714:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006716:	1813      	adds	r3, r2, r0
 8006718:	2a01      	cmp	r2, #1
 800671a:	4681      	mov	r9, r0
 800671c:	6123      	str	r3, [r4, #16]
 800671e:	dc02      	bgt.n	8006726 <_printf_float+0x14e>
 8006720:	6822      	ldr	r2, [r4, #0]
 8006722:	07d1      	lsls	r1, r2, #31
 8006724:	d501      	bpl.n	800672a <_printf_float+0x152>
 8006726:	3301      	adds	r3, #1
 8006728:	6123      	str	r3, [r4, #16]
 800672a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800672e:	2b00      	cmp	r3, #0
 8006730:	d0a5      	beq.n	800667e <_printf_float+0xa6>
 8006732:	232d      	movs	r3, #45	; 0x2d
 8006734:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006738:	e7a1      	b.n	800667e <_printf_float+0xa6>
 800673a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800673e:	f000 8177 	beq.w	8006a30 <_printf_float+0x458>
 8006742:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8006746:	d1bb      	bne.n	80066c0 <_printf_float+0xe8>
 8006748:	2900      	cmp	r1, #0
 800674a:	d1b9      	bne.n	80066c0 <_printf_float+0xe8>
 800674c:	2301      	movs	r3, #1
 800674e:	e7b6      	b.n	80066be <_printf_float+0xe6>
 8006750:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8006754:	d119      	bne.n	800678a <_printf_float+0x1b2>
 8006756:	2900      	cmp	r1, #0
 8006758:	6863      	ldr	r3, [r4, #4]
 800675a:	dd0c      	ble.n	8006776 <_printf_float+0x19e>
 800675c:	6121      	str	r1, [r4, #16]
 800675e:	b913      	cbnz	r3, 8006766 <_printf_float+0x18e>
 8006760:	6822      	ldr	r2, [r4, #0]
 8006762:	07d2      	lsls	r2, r2, #31
 8006764:	d502      	bpl.n	800676c <_printf_float+0x194>
 8006766:	3301      	adds	r3, #1
 8006768:	440b      	add	r3, r1
 800676a:	6123      	str	r3, [r4, #16]
 800676c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800676e:	65a3      	str	r3, [r4, #88]	; 0x58
 8006770:	f04f 0900 	mov.w	r9, #0
 8006774:	e7d9      	b.n	800672a <_printf_float+0x152>
 8006776:	b913      	cbnz	r3, 800677e <_printf_float+0x1a6>
 8006778:	6822      	ldr	r2, [r4, #0]
 800677a:	07d0      	lsls	r0, r2, #31
 800677c:	d501      	bpl.n	8006782 <_printf_float+0x1aa>
 800677e:	3302      	adds	r3, #2
 8006780:	e7f3      	b.n	800676a <_printf_float+0x192>
 8006782:	2301      	movs	r3, #1
 8006784:	e7f1      	b.n	800676a <_printf_float+0x192>
 8006786:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800678a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800678e:	4293      	cmp	r3, r2
 8006790:	db05      	blt.n	800679e <_printf_float+0x1c6>
 8006792:	6822      	ldr	r2, [r4, #0]
 8006794:	6123      	str	r3, [r4, #16]
 8006796:	07d1      	lsls	r1, r2, #31
 8006798:	d5e8      	bpl.n	800676c <_printf_float+0x194>
 800679a:	3301      	adds	r3, #1
 800679c:	e7e5      	b.n	800676a <_printf_float+0x192>
 800679e:	2b00      	cmp	r3, #0
 80067a0:	bfd4      	ite	le
 80067a2:	f1c3 0302 	rsble	r3, r3, #2
 80067a6:	2301      	movgt	r3, #1
 80067a8:	4413      	add	r3, r2
 80067aa:	e7de      	b.n	800676a <_printf_float+0x192>
 80067ac:	6823      	ldr	r3, [r4, #0]
 80067ae:	055a      	lsls	r2, r3, #21
 80067b0:	d407      	bmi.n	80067c2 <_printf_float+0x1ea>
 80067b2:	6923      	ldr	r3, [r4, #16]
 80067b4:	4642      	mov	r2, r8
 80067b6:	4631      	mov	r1, r6
 80067b8:	4628      	mov	r0, r5
 80067ba:	47b8      	blx	r7
 80067bc:	3001      	adds	r0, #1
 80067be:	d12b      	bne.n	8006818 <_printf_float+0x240>
 80067c0:	e767      	b.n	8006692 <_printf_float+0xba>
 80067c2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80067c6:	f240 80dc 	bls.w	8006982 <_printf_float+0x3aa>
 80067ca:	2200      	movs	r2, #0
 80067cc:	2300      	movs	r3, #0
 80067ce:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80067d2:	f7fa f981 	bl	8000ad8 <__aeabi_dcmpeq>
 80067d6:	2800      	cmp	r0, #0
 80067d8:	d033      	beq.n	8006842 <_printf_float+0x26a>
 80067da:	2301      	movs	r3, #1
 80067dc:	4a41      	ldr	r2, [pc, #260]	; (80068e4 <_printf_float+0x30c>)
 80067de:	4631      	mov	r1, r6
 80067e0:	4628      	mov	r0, r5
 80067e2:	47b8      	blx	r7
 80067e4:	3001      	adds	r0, #1
 80067e6:	f43f af54 	beq.w	8006692 <_printf_float+0xba>
 80067ea:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80067ee:	429a      	cmp	r2, r3
 80067f0:	db02      	blt.n	80067f8 <_printf_float+0x220>
 80067f2:	6823      	ldr	r3, [r4, #0]
 80067f4:	07d8      	lsls	r0, r3, #31
 80067f6:	d50f      	bpl.n	8006818 <_printf_float+0x240>
 80067f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80067fc:	4631      	mov	r1, r6
 80067fe:	4628      	mov	r0, r5
 8006800:	47b8      	blx	r7
 8006802:	3001      	adds	r0, #1
 8006804:	f43f af45 	beq.w	8006692 <_printf_float+0xba>
 8006808:	f04f 0800 	mov.w	r8, #0
 800680c:	f104 091a 	add.w	r9, r4, #26
 8006810:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006812:	3b01      	subs	r3, #1
 8006814:	4543      	cmp	r3, r8
 8006816:	dc09      	bgt.n	800682c <_printf_float+0x254>
 8006818:	6823      	ldr	r3, [r4, #0]
 800681a:	079b      	lsls	r3, r3, #30
 800681c:	f100 8103 	bmi.w	8006a26 <_printf_float+0x44e>
 8006820:	68e0      	ldr	r0, [r4, #12]
 8006822:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006824:	4298      	cmp	r0, r3
 8006826:	bfb8      	it	lt
 8006828:	4618      	movlt	r0, r3
 800682a:	e734      	b.n	8006696 <_printf_float+0xbe>
 800682c:	2301      	movs	r3, #1
 800682e:	464a      	mov	r2, r9
 8006830:	4631      	mov	r1, r6
 8006832:	4628      	mov	r0, r5
 8006834:	47b8      	blx	r7
 8006836:	3001      	adds	r0, #1
 8006838:	f43f af2b 	beq.w	8006692 <_printf_float+0xba>
 800683c:	f108 0801 	add.w	r8, r8, #1
 8006840:	e7e6      	b.n	8006810 <_printf_float+0x238>
 8006842:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006844:	2b00      	cmp	r3, #0
 8006846:	dc2b      	bgt.n	80068a0 <_printf_float+0x2c8>
 8006848:	2301      	movs	r3, #1
 800684a:	4a26      	ldr	r2, [pc, #152]	; (80068e4 <_printf_float+0x30c>)
 800684c:	4631      	mov	r1, r6
 800684e:	4628      	mov	r0, r5
 8006850:	47b8      	blx	r7
 8006852:	3001      	adds	r0, #1
 8006854:	f43f af1d 	beq.w	8006692 <_printf_float+0xba>
 8006858:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800685a:	b923      	cbnz	r3, 8006866 <_printf_float+0x28e>
 800685c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800685e:	b913      	cbnz	r3, 8006866 <_printf_float+0x28e>
 8006860:	6823      	ldr	r3, [r4, #0]
 8006862:	07d9      	lsls	r1, r3, #31
 8006864:	d5d8      	bpl.n	8006818 <_printf_float+0x240>
 8006866:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800686a:	4631      	mov	r1, r6
 800686c:	4628      	mov	r0, r5
 800686e:	47b8      	blx	r7
 8006870:	3001      	adds	r0, #1
 8006872:	f43f af0e 	beq.w	8006692 <_printf_float+0xba>
 8006876:	f04f 0900 	mov.w	r9, #0
 800687a:	f104 0a1a 	add.w	sl, r4, #26
 800687e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006880:	425b      	negs	r3, r3
 8006882:	454b      	cmp	r3, r9
 8006884:	dc01      	bgt.n	800688a <_printf_float+0x2b2>
 8006886:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006888:	e794      	b.n	80067b4 <_printf_float+0x1dc>
 800688a:	2301      	movs	r3, #1
 800688c:	4652      	mov	r2, sl
 800688e:	4631      	mov	r1, r6
 8006890:	4628      	mov	r0, r5
 8006892:	47b8      	blx	r7
 8006894:	3001      	adds	r0, #1
 8006896:	f43f aefc 	beq.w	8006692 <_printf_float+0xba>
 800689a:	f109 0901 	add.w	r9, r9, #1
 800689e:	e7ee      	b.n	800687e <_printf_float+0x2a6>
 80068a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80068a2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80068a4:	429a      	cmp	r2, r3
 80068a6:	bfa8      	it	ge
 80068a8:	461a      	movge	r2, r3
 80068aa:	2a00      	cmp	r2, #0
 80068ac:	4691      	mov	r9, r2
 80068ae:	dd07      	ble.n	80068c0 <_printf_float+0x2e8>
 80068b0:	4613      	mov	r3, r2
 80068b2:	4631      	mov	r1, r6
 80068b4:	4642      	mov	r2, r8
 80068b6:	4628      	mov	r0, r5
 80068b8:	47b8      	blx	r7
 80068ba:	3001      	adds	r0, #1
 80068bc:	f43f aee9 	beq.w	8006692 <_printf_float+0xba>
 80068c0:	f104 031a 	add.w	r3, r4, #26
 80068c4:	f04f 0b00 	mov.w	fp, #0
 80068c8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80068cc:	9306      	str	r3, [sp, #24]
 80068ce:	e015      	b.n	80068fc <_printf_float+0x324>
 80068d0:	7fefffff 	.word	0x7fefffff
 80068d4:	08008824 	.word	0x08008824
 80068d8:	08008820 	.word	0x08008820
 80068dc:	0800882c 	.word	0x0800882c
 80068e0:	08008828 	.word	0x08008828
 80068e4:	08008830 	.word	0x08008830
 80068e8:	2301      	movs	r3, #1
 80068ea:	9a06      	ldr	r2, [sp, #24]
 80068ec:	4631      	mov	r1, r6
 80068ee:	4628      	mov	r0, r5
 80068f0:	47b8      	blx	r7
 80068f2:	3001      	adds	r0, #1
 80068f4:	f43f aecd 	beq.w	8006692 <_printf_float+0xba>
 80068f8:	f10b 0b01 	add.w	fp, fp, #1
 80068fc:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8006900:	ebaa 0309 	sub.w	r3, sl, r9
 8006904:	455b      	cmp	r3, fp
 8006906:	dcef      	bgt.n	80068e8 <_printf_float+0x310>
 8006908:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800690c:	429a      	cmp	r2, r3
 800690e:	44d0      	add	r8, sl
 8006910:	db15      	blt.n	800693e <_printf_float+0x366>
 8006912:	6823      	ldr	r3, [r4, #0]
 8006914:	07da      	lsls	r2, r3, #31
 8006916:	d412      	bmi.n	800693e <_printf_float+0x366>
 8006918:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800691a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800691c:	eba3 020a 	sub.w	r2, r3, sl
 8006920:	eba3 0a01 	sub.w	sl, r3, r1
 8006924:	4592      	cmp	sl, r2
 8006926:	bfa8      	it	ge
 8006928:	4692      	movge	sl, r2
 800692a:	f1ba 0f00 	cmp.w	sl, #0
 800692e:	dc0e      	bgt.n	800694e <_printf_float+0x376>
 8006930:	f04f 0800 	mov.w	r8, #0
 8006934:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006938:	f104 091a 	add.w	r9, r4, #26
 800693c:	e019      	b.n	8006972 <_printf_float+0x39a>
 800693e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006942:	4631      	mov	r1, r6
 8006944:	4628      	mov	r0, r5
 8006946:	47b8      	blx	r7
 8006948:	3001      	adds	r0, #1
 800694a:	d1e5      	bne.n	8006918 <_printf_float+0x340>
 800694c:	e6a1      	b.n	8006692 <_printf_float+0xba>
 800694e:	4653      	mov	r3, sl
 8006950:	4642      	mov	r2, r8
 8006952:	4631      	mov	r1, r6
 8006954:	4628      	mov	r0, r5
 8006956:	47b8      	blx	r7
 8006958:	3001      	adds	r0, #1
 800695a:	d1e9      	bne.n	8006930 <_printf_float+0x358>
 800695c:	e699      	b.n	8006692 <_printf_float+0xba>
 800695e:	2301      	movs	r3, #1
 8006960:	464a      	mov	r2, r9
 8006962:	4631      	mov	r1, r6
 8006964:	4628      	mov	r0, r5
 8006966:	47b8      	blx	r7
 8006968:	3001      	adds	r0, #1
 800696a:	f43f ae92 	beq.w	8006692 <_printf_float+0xba>
 800696e:	f108 0801 	add.w	r8, r8, #1
 8006972:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006976:	1a9b      	subs	r3, r3, r2
 8006978:	eba3 030a 	sub.w	r3, r3, sl
 800697c:	4543      	cmp	r3, r8
 800697e:	dcee      	bgt.n	800695e <_printf_float+0x386>
 8006980:	e74a      	b.n	8006818 <_printf_float+0x240>
 8006982:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006984:	2a01      	cmp	r2, #1
 8006986:	dc01      	bgt.n	800698c <_printf_float+0x3b4>
 8006988:	07db      	lsls	r3, r3, #31
 800698a:	d53a      	bpl.n	8006a02 <_printf_float+0x42a>
 800698c:	2301      	movs	r3, #1
 800698e:	4642      	mov	r2, r8
 8006990:	4631      	mov	r1, r6
 8006992:	4628      	mov	r0, r5
 8006994:	47b8      	blx	r7
 8006996:	3001      	adds	r0, #1
 8006998:	f43f ae7b 	beq.w	8006692 <_printf_float+0xba>
 800699c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80069a0:	4631      	mov	r1, r6
 80069a2:	4628      	mov	r0, r5
 80069a4:	47b8      	blx	r7
 80069a6:	3001      	adds	r0, #1
 80069a8:	f108 0801 	add.w	r8, r8, #1
 80069ac:	f43f ae71 	beq.w	8006692 <_printf_float+0xba>
 80069b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069b2:	2200      	movs	r2, #0
 80069b4:	f103 3aff 	add.w	sl, r3, #4294967295
 80069b8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80069bc:	2300      	movs	r3, #0
 80069be:	f7fa f88b 	bl	8000ad8 <__aeabi_dcmpeq>
 80069c2:	b9c8      	cbnz	r0, 80069f8 <_printf_float+0x420>
 80069c4:	4653      	mov	r3, sl
 80069c6:	4642      	mov	r2, r8
 80069c8:	4631      	mov	r1, r6
 80069ca:	4628      	mov	r0, r5
 80069cc:	47b8      	blx	r7
 80069ce:	3001      	adds	r0, #1
 80069d0:	d10e      	bne.n	80069f0 <_printf_float+0x418>
 80069d2:	e65e      	b.n	8006692 <_printf_float+0xba>
 80069d4:	2301      	movs	r3, #1
 80069d6:	4652      	mov	r2, sl
 80069d8:	4631      	mov	r1, r6
 80069da:	4628      	mov	r0, r5
 80069dc:	47b8      	blx	r7
 80069de:	3001      	adds	r0, #1
 80069e0:	f43f ae57 	beq.w	8006692 <_printf_float+0xba>
 80069e4:	f108 0801 	add.w	r8, r8, #1
 80069e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069ea:	3b01      	subs	r3, #1
 80069ec:	4543      	cmp	r3, r8
 80069ee:	dcf1      	bgt.n	80069d4 <_printf_float+0x3fc>
 80069f0:	464b      	mov	r3, r9
 80069f2:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80069f6:	e6de      	b.n	80067b6 <_printf_float+0x1de>
 80069f8:	f04f 0800 	mov.w	r8, #0
 80069fc:	f104 0a1a 	add.w	sl, r4, #26
 8006a00:	e7f2      	b.n	80069e8 <_printf_float+0x410>
 8006a02:	2301      	movs	r3, #1
 8006a04:	e7df      	b.n	80069c6 <_printf_float+0x3ee>
 8006a06:	2301      	movs	r3, #1
 8006a08:	464a      	mov	r2, r9
 8006a0a:	4631      	mov	r1, r6
 8006a0c:	4628      	mov	r0, r5
 8006a0e:	47b8      	blx	r7
 8006a10:	3001      	adds	r0, #1
 8006a12:	f43f ae3e 	beq.w	8006692 <_printf_float+0xba>
 8006a16:	f108 0801 	add.w	r8, r8, #1
 8006a1a:	68e3      	ldr	r3, [r4, #12]
 8006a1c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006a1e:	1a9b      	subs	r3, r3, r2
 8006a20:	4543      	cmp	r3, r8
 8006a22:	dcf0      	bgt.n	8006a06 <_printf_float+0x42e>
 8006a24:	e6fc      	b.n	8006820 <_printf_float+0x248>
 8006a26:	f04f 0800 	mov.w	r8, #0
 8006a2a:	f104 0919 	add.w	r9, r4, #25
 8006a2e:	e7f4      	b.n	8006a1a <_printf_float+0x442>
 8006a30:	2900      	cmp	r1, #0
 8006a32:	f43f ae8b 	beq.w	800674c <_printf_float+0x174>
 8006a36:	2300      	movs	r3, #0
 8006a38:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8006a3c:	ab09      	add	r3, sp, #36	; 0x24
 8006a3e:	9300      	str	r3, [sp, #0]
 8006a40:	ec49 8b10 	vmov	d0, r8, r9
 8006a44:	6022      	str	r2, [r4, #0]
 8006a46:	f8cd a004 	str.w	sl, [sp, #4]
 8006a4a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006a4e:	4628      	mov	r0, r5
 8006a50:	f7ff fd2e 	bl	80064b0 <__cvt>
 8006a54:	4680      	mov	r8, r0
 8006a56:	e648      	b.n	80066ea <_printf_float+0x112>

08006a58 <_printf_common>:
 8006a58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a5c:	4691      	mov	r9, r2
 8006a5e:	461f      	mov	r7, r3
 8006a60:	688a      	ldr	r2, [r1, #8]
 8006a62:	690b      	ldr	r3, [r1, #16]
 8006a64:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	bfb8      	it	lt
 8006a6c:	4613      	movlt	r3, r2
 8006a6e:	f8c9 3000 	str.w	r3, [r9]
 8006a72:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006a76:	4606      	mov	r6, r0
 8006a78:	460c      	mov	r4, r1
 8006a7a:	b112      	cbz	r2, 8006a82 <_printf_common+0x2a>
 8006a7c:	3301      	adds	r3, #1
 8006a7e:	f8c9 3000 	str.w	r3, [r9]
 8006a82:	6823      	ldr	r3, [r4, #0]
 8006a84:	0699      	lsls	r1, r3, #26
 8006a86:	bf42      	ittt	mi
 8006a88:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006a8c:	3302      	addmi	r3, #2
 8006a8e:	f8c9 3000 	strmi.w	r3, [r9]
 8006a92:	6825      	ldr	r5, [r4, #0]
 8006a94:	f015 0506 	ands.w	r5, r5, #6
 8006a98:	d107      	bne.n	8006aaa <_printf_common+0x52>
 8006a9a:	f104 0a19 	add.w	sl, r4, #25
 8006a9e:	68e3      	ldr	r3, [r4, #12]
 8006aa0:	f8d9 2000 	ldr.w	r2, [r9]
 8006aa4:	1a9b      	subs	r3, r3, r2
 8006aa6:	42ab      	cmp	r3, r5
 8006aa8:	dc28      	bgt.n	8006afc <_printf_common+0xa4>
 8006aaa:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006aae:	6822      	ldr	r2, [r4, #0]
 8006ab0:	3300      	adds	r3, #0
 8006ab2:	bf18      	it	ne
 8006ab4:	2301      	movne	r3, #1
 8006ab6:	0692      	lsls	r2, r2, #26
 8006ab8:	d42d      	bmi.n	8006b16 <_printf_common+0xbe>
 8006aba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006abe:	4639      	mov	r1, r7
 8006ac0:	4630      	mov	r0, r6
 8006ac2:	47c0      	blx	r8
 8006ac4:	3001      	adds	r0, #1
 8006ac6:	d020      	beq.n	8006b0a <_printf_common+0xb2>
 8006ac8:	6823      	ldr	r3, [r4, #0]
 8006aca:	68e5      	ldr	r5, [r4, #12]
 8006acc:	f8d9 2000 	ldr.w	r2, [r9]
 8006ad0:	f003 0306 	and.w	r3, r3, #6
 8006ad4:	2b04      	cmp	r3, #4
 8006ad6:	bf08      	it	eq
 8006ad8:	1aad      	subeq	r5, r5, r2
 8006ada:	68a3      	ldr	r3, [r4, #8]
 8006adc:	6922      	ldr	r2, [r4, #16]
 8006ade:	bf0c      	ite	eq
 8006ae0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006ae4:	2500      	movne	r5, #0
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	bfc4      	itt	gt
 8006aea:	1a9b      	subgt	r3, r3, r2
 8006aec:	18ed      	addgt	r5, r5, r3
 8006aee:	f04f 0900 	mov.w	r9, #0
 8006af2:	341a      	adds	r4, #26
 8006af4:	454d      	cmp	r5, r9
 8006af6:	d11a      	bne.n	8006b2e <_printf_common+0xd6>
 8006af8:	2000      	movs	r0, #0
 8006afa:	e008      	b.n	8006b0e <_printf_common+0xb6>
 8006afc:	2301      	movs	r3, #1
 8006afe:	4652      	mov	r2, sl
 8006b00:	4639      	mov	r1, r7
 8006b02:	4630      	mov	r0, r6
 8006b04:	47c0      	blx	r8
 8006b06:	3001      	adds	r0, #1
 8006b08:	d103      	bne.n	8006b12 <_printf_common+0xba>
 8006b0a:	f04f 30ff 	mov.w	r0, #4294967295
 8006b0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b12:	3501      	adds	r5, #1
 8006b14:	e7c3      	b.n	8006a9e <_printf_common+0x46>
 8006b16:	18e1      	adds	r1, r4, r3
 8006b18:	1c5a      	adds	r2, r3, #1
 8006b1a:	2030      	movs	r0, #48	; 0x30
 8006b1c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006b20:	4422      	add	r2, r4
 8006b22:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006b26:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006b2a:	3302      	adds	r3, #2
 8006b2c:	e7c5      	b.n	8006aba <_printf_common+0x62>
 8006b2e:	2301      	movs	r3, #1
 8006b30:	4622      	mov	r2, r4
 8006b32:	4639      	mov	r1, r7
 8006b34:	4630      	mov	r0, r6
 8006b36:	47c0      	blx	r8
 8006b38:	3001      	adds	r0, #1
 8006b3a:	d0e6      	beq.n	8006b0a <_printf_common+0xb2>
 8006b3c:	f109 0901 	add.w	r9, r9, #1
 8006b40:	e7d8      	b.n	8006af4 <_printf_common+0x9c>
	...

08006b44 <_printf_i>:
 8006b44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006b48:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006b4c:	460c      	mov	r4, r1
 8006b4e:	7e09      	ldrb	r1, [r1, #24]
 8006b50:	b085      	sub	sp, #20
 8006b52:	296e      	cmp	r1, #110	; 0x6e
 8006b54:	4617      	mov	r7, r2
 8006b56:	4606      	mov	r6, r0
 8006b58:	4698      	mov	r8, r3
 8006b5a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006b5c:	f000 80b3 	beq.w	8006cc6 <_printf_i+0x182>
 8006b60:	d822      	bhi.n	8006ba8 <_printf_i+0x64>
 8006b62:	2963      	cmp	r1, #99	; 0x63
 8006b64:	d036      	beq.n	8006bd4 <_printf_i+0x90>
 8006b66:	d80a      	bhi.n	8006b7e <_printf_i+0x3a>
 8006b68:	2900      	cmp	r1, #0
 8006b6a:	f000 80b9 	beq.w	8006ce0 <_printf_i+0x19c>
 8006b6e:	2958      	cmp	r1, #88	; 0x58
 8006b70:	f000 8083 	beq.w	8006c7a <_printf_i+0x136>
 8006b74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006b78:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006b7c:	e032      	b.n	8006be4 <_printf_i+0xa0>
 8006b7e:	2964      	cmp	r1, #100	; 0x64
 8006b80:	d001      	beq.n	8006b86 <_printf_i+0x42>
 8006b82:	2969      	cmp	r1, #105	; 0x69
 8006b84:	d1f6      	bne.n	8006b74 <_printf_i+0x30>
 8006b86:	6820      	ldr	r0, [r4, #0]
 8006b88:	6813      	ldr	r3, [r2, #0]
 8006b8a:	0605      	lsls	r5, r0, #24
 8006b8c:	f103 0104 	add.w	r1, r3, #4
 8006b90:	d52a      	bpl.n	8006be8 <_printf_i+0xa4>
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	6011      	str	r1, [r2, #0]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	da03      	bge.n	8006ba2 <_printf_i+0x5e>
 8006b9a:	222d      	movs	r2, #45	; 0x2d
 8006b9c:	425b      	negs	r3, r3
 8006b9e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006ba2:	486f      	ldr	r0, [pc, #444]	; (8006d60 <_printf_i+0x21c>)
 8006ba4:	220a      	movs	r2, #10
 8006ba6:	e039      	b.n	8006c1c <_printf_i+0xd8>
 8006ba8:	2973      	cmp	r1, #115	; 0x73
 8006baa:	f000 809d 	beq.w	8006ce8 <_printf_i+0x1a4>
 8006bae:	d808      	bhi.n	8006bc2 <_printf_i+0x7e>
 8006bb0:	296f      	cmp	r1, #111	; 0x6f
 8006bb2:	d020      	beq.n	8006bf6 <_printf_i+0xb2>
 8006bb4:	2970      	cmp	r1, #112	; 0x70
 8006bb6:	d1dd      	bne.n	8006b74 <_printf_i+0x30>
 8006bb8:	6823      	ldr	r3, [r4, #0]
 8006bba:	f043 0320 	orr.w	r3, r3, #32
 8006bbe:	6023      	str	r3, [r4, #0]
 8006bc0:	e003      	b.n	8006bca <_printf_i+0x86>
 8006bc2:	2975      	cmp	r1, #117	; 0x75
 8006bc4:	d017      	beq.n	8006bf6 <_printf_i+0xb2>
 8006bc6:	2978      	cmp	r1, #120	; 0x78
 8006bc8:	d1d4      	bne.n	8006b74 <_printf_i+0x30>
 8006bca:	2378      	movs	r3, #120	; 0x78
 8006bcc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006bd0:	4864      	ldr	r0, [pc, #400]	; (8006d64 <_printf_i+0x220>)
 8006bd2:	e055      	b.n	8006c80 <_printf_i+0x13c>
 8006bd4:	6813      	ldr	r3, [r2, #0]
 8006bd6:	1d19      	adds	r1, r3, #4
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	6011      	str	r1, [r2, #0]
 8006bdc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006be0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006be4:	2301      	movs	r3, #1
 8006be6:	e08c      	b.n	8006d02 <_printf_i+0x1be>
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	6011      	str	r1, [r2, #0]
 8006bec:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006bf0:	bf18      	it	ne
 8006bf2:	b21b      	sxthne	r3, r3
 8006bf4:	e7cf      	b.n	8006b96 <_printf_i+0x52>
 8006bf6:	6813      	ldr	r3, [r2, #0]
 8006bf8:	6825      	ldr	r5, [r4, #0]
 8006bfa:	1d18      	adds	r0, r3, #4
 8006bfc:	6010      	str	r0, [r2, #0]
 8006bfe:	0628      	lsls	r0, r5, #24
 8006c00:	d501      	bpl.n	8006c06 <_printf_i+0xc2>
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	e002      	b.n	8006c0c <_printf_i+0xc8>
 8006c06:	0668      	lsls	r0, r5, #25
 8006c08:	d5fb      	bpl.n	8006c02 <_printf_i+0xbe>
 8006c0a:	881b      	ldrh	r3, [r3, #0]
 8006c0c:	4854      	ldr	r0, [pc, #336]	; (8006d60 <_printf_i+0x21c>)
 8006c0e:	296f      	cmp	r1, #111	; 0x6f
 8006c10:	bf14      	ite	ne
 8006c12:	220a      	movne	r2, #10
 8006c14:	2208      	moveq	r2, #8
 8006c16:	2100      	movs	r1, #0
 8006c18:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006c1c:	6865      	ldr	r5, [r4, #4]
 8006c1e:	60a5      	str	r5, [r4, #8]
 8006c20:	2d00      	cmp	r5, #0
 8006c22:	f2c0 8095 	blt.w	8006d50 <_printf_i+0x20c>
 8006c26:	6821      	ldr	r1, [r4, #0]
 8006c28:	f021 0104 	bic.w	r1, r1, #4
 8006c2c:	6021      	str	r1, [r4, #0]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d13d      	bne.n	8006cae <_printf_i+0x16a>
 8006c32:	2d00      	cmp	r5, #0
 8006c34:	f040 808e 	bne.w	8006d54 <_printf_i+0x210>
 8006c38:	4665      	mov	r5, ip
 8006c3a:	2a08      	cmp	r2, #8
 8006c3c:	d10b      	bne.n	8006c56 <_printf_i+0x112>
 8006c3e:	6823      	ldr	r3, [r4, #0]
 8006c40:	07db      	lsls	r3, r3, #31
 8006c42:	d508      	bpl.n	8006c56 <_printf_i+0x112>
 8006c44:	6923      	ldr	r3, [r4, #16]
 8006c46:	6862      	ldr	r2, [r4, #4]
 8006c48:	429a      	cmp	r2, r3
 8006c4a:	bfde      	ittt	le
 8006c4c:	2330      	movle	r3, #48	; 0x30
 8006c4e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006c52:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006c56:	ebac 0305 	sub.w	r3, ip, r5
 8006c5a:	6123      	str	r3, [r4, #16]
 8006c5c:	f8cd 8000 	str.w	r8, [sp]
 8006c60:	463b      	mov	r3, r7
 8006c62:	aa03      	add	r2, sp, #12
 8006c64:	4621      	mov	r1, r4
 8006c66:	4630      	mov	r0, r6
 8006c68:	f7ff fef6 	bl	8006a58 <_printf_common>
 8006c6c:	3001      	adds	r0, #1
 8006c6e:	d14d      	bne.n	8006d0c <_printf_i+0x1c8>
 8006c70:	f04f 30ff 	mov.w	r0, #4294967295
 8006c74:	b005      	add	sp, #20
 8006c76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006c7a:	4839      	ldr	r0, [pc, #228]	; (8006d60 <_printf_i+0x21c>)
 8006c7c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006c80:	6813      	ldr	r3, [r2, #0]
 8006c82:	6821      	ldr	r1, [r4, #0]
 8006c84:	1d1d      	adds	r5, r3, #4
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	6015      	str	r5, [r2, #0]
 8006c8a:	060a      	lsls	r2, r1, #24
 8006c8c:	d50b      	bpl.n	8006ca6 <_printf_i+0x162>
 8006c8e:	07ca      	lsls	r2, r1, #31
 8006c90:	bf44      	itt	mi
 8006c92:	f041 0120 	orrmi.w	r1, r1, #32
 8006c96:	6021      	strmi	r1, [r4, #0]
 8006c98:	b91b      	cbnz	r3, 8006ca2 <_printf_i+0x15e>
 8006c9a:	6822      	ldr	r2, [r4, #0]
 8006c9c:	f022 0220 	bic.w	r2, r2, #32
 8006ca0:	6022      	str	r2, [r4, #0]
 8006ca2:	2210      	movs	r2, #16
 8006ca4:	e7b7      	b.n	8006c16 <_printf_i+0xd2>
 8006ca6:	064d      	lsls	r5, r1, #25
 8006ca8:	bf48      	it	mi
 8006caa:	b29b      	uxthmi	r3, r3
 8006cac:	e7ef      	b.n	8006c8e <_printf_i+0x14a>
 8006cae:	4665      	mov	r5, ip
 8006cb0:	fbb3 f1f2 	udiv	r1, r3, r2
 8006cb4:	fb02 3311 	mls	r3, r2, r1, r3
 8006cb8:	5cc3      	ldrb	r3, [r0, r3]
 8006cba:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006cbe:	460b      	mov	r3, r1
 8006cc0:	2900      	cmp	r1, #0
 8006cc2:	d1f5      	bne.n	8006cb0 <_printf_i+0x16c>
 8006cc4:	e7b9      	b.n	8006c3a <_printf_i+0xf6>
 8006cc6:	6813      	ldr	r3, [r2, #0]
 8006cc8:	6825      	ldr	r5, [r4, #0]
 8006cca:	6961      	ldr	r1, [r4, #20]
 8006ccc:	1d18      	adds	r0, r3, #4
 8006cce:	6010      	str	r0, [r2, #0]
 8006cd0:	0628      	lsls	r0, r5, #24
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	d501      	bpl.n	8006cda <_printf_i+0x196>
 8006cd6:	6019      	str	r1, [r3, #0]
 8006cd8:	e002      	b.n	8006ce0 <_printf_i+0x19c>
 8006cda:	066a      	lsls	r2, r5, #25
 8006cdc:	d5fb      	bpl.n	8006cd6 <_printf_i+0x192>
 8006cde:	8019      	strh	r1, [r3, #0]
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	6123      	str	r3, [r4, #16]
 8006ce4:	4665      	mov	r5, ip
 8006ce6:	e7b9      	b.n	8006c5c <_printf_i+0x118>
 8006ce8:	6813      	ldr	r3, [r2, #0]
 8006cea:	1d19      	adds	r1, r3, #4
 8006cec:	6011      	str	r1, [r2, #0]
 8006cee:	681d      	ldr	r5, [r3, #0]
 8006cf0:	6862      	ldr	r2, [r4, #4]
 8006cf2:	2100      	movs	r1, #0
 8006cf4:	4628      	mov	r0, r5
 8006cf6:	f7f9 fa7b 	bl	80001f0 <memchr>
 8006cfa:	b108      	cbz	r0, 8006d00 <_printf_i+0x1bc>
 8006cfc:	1b40      	subs	r0, r0, r5
 8006cfe:	6060      	str	r0, [r4, #4]
 8006d00:	6863      	ldr	r3, [r4, #4]
 8006d02:	6123      	str	r3, [r4, #16]
 8006d04:	2300      	movs	r3, #0
 8006d06:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d0a:	e7a7      	b.n	8006c5c <_printf_i+0x118>
 8006d0c:	6923      	ldr	r3, [r4, #16]
 8006d0e:	462a      	mov	r2, r5
 8006d10:	4639      	mov	r1, r7
 8006d12:	4630      	mov	r0, r6
 8006d14:	47c0      	blx	r8
 8006d16:	3001      	adds	r0, #1
 8006d18:	d0aa      	beq.n	8006c70 <_printf_i+0x12c>
 8006d1a:	6823      	ldr	r3, [r4, #0]
 8006d1c:	079b      	lsls	r3, r3, #30
 8006d1e:	d413      	bmi.n	8006d48 <_printf_i+0x204>
 8006d20:	68e0      	ldr	r0, [r4, #12]
 8006d22:	9b03      	ldr	r3, [sp, #12]
 8006d24:	4298      	cmp	r0, r3
 8006d26:	bfb8      	it	lt
 8006d28:	4618      	movlt	r0, r3
 8006d2a:	e7a3      	b.n	8006c74 <_printf_i+0x130>
 8006d2c:	2301      	movs	r3, #1
 8006d2e:	464a      	mov	r2, r9
 8006d30:	4639      	mov	r1, r7
 8006d32:	4630      	mov	r0, r6
 8006d34:	47c0      	blx	r8
 8006d36:	3001      	adds	r0, #1
 8006d38:	d09a      	beq.n	8006c70 <_printf_i+0x12c>
 8006d3a:	3501      	adds	r5, #1
 8006d3c:	68e3      	ldr	r3, [r4, #12]
 8006d3e:	9a03      	ldr	r2, [sp, #12]
 8006d40:	1a9b      	subs	r3, r3, r2
 8006d42:	42ab      	cmp	r3, r5
 8006d44:	dcf2      	bgt.n	8006d2c <_printf_i+0x1e8>
 8006d46:	e7eb      	b.n	8006d20 <_printf_i+0x1dc>
 8006d48:	2500      	movs	r5, #0
 8006d4a:	f104 0919 	add.w	r9, r4, #25
 8006d4e:	e7f5      	b.n	8006d3c <_printf_i+0x1f8>
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d1ac      	bne.n	8006cae <_printf_i+0x16a>
 8006d54:	7803      	ldrb	r3, [r0, #0]
 8006d56:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006d5a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006d5e:	e76c      	b.n	8006c3a <_printf_i+0xf6>
 8006d60:	08008832 	.word	0x08008832
 8006d64:	08008843 	.word	0x08008843

08006d68 <siprintf>:
 8006d68:	b40e      	push	{r1, r2, r3}
 8006d6a:	b500      	push	{lr}
 8006d6c:	b09c      	sub	sp, #112	; 0x70
 8006d6e:	ab1d      	add	r3, sp, #116	; 0x74
 8006d70:	9002      	str	r0, [sp, #8]
 8006d72:	9006      	str	r0, [sp, #24]
 8006d74:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006d78:	4809      	ldr	r0, [pc, #36]	; (8006da0 <siprintf+0x38>)
 8006d7a:	9107      	str	r1, [sp, #28]
 8006d7c:	9104      	str	r1, [sp, #16]
 8006d7e:	4909      	ldr	r1, [pc, #36]	; (8006da4 <siprintf+0x3c>)
 8006d80:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d84:	9105      	str	r1, [sp, #20]
 8006d86:	6800      	ldr	r0, [r0, #0]
 8006d88:	9301      	str	r3, [sp, #4]
 8006d8a:	a902      	add	r1, sp, #8
 8006d8c:	f001 fac2 	bl	8008314 <_svfiprintf_r>
 8006d90:	9b02      	ldr	r3, [sp, #8]
 8006d92:	2200      	movs	r2, #0
 8006d94:	701a      	strb	r2, [r3, #0]
 8006d96:	b01c      	add	sp, #112	; 0x70
 8006d98:	f85d eb04 	ldr.w	lr, [sp], #4
 8006d9c:	b003      	add	sp, #12
 8006d9e:	4770      	bx	lr
 8006da0:	200000e8 	.word	0x200000e8
 8006da4:	ffff0208 	.word	0xffff0208

08006da8 <strcat>:
 8006da8:	b510      	push	{r4, lr}
 8006daa:	4603      	mov	r3, r0
 8006dac:	781a      	ldrb	r2, [r3, #0]
 8006dae:	1c5c      	adds	r4, r3, #1
 8006db0:	b93a      	cbnz	r2, 8006dc2 <strcat+0x1a>
 8006db2:	3b01      	subs	r3, #1
 8006db4:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006db8:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006dbc:	2a00      	cmp	r2, #0
 8006dbe:	d1f9      	bne.n	8006db4 <strcat+0xc>
 8006dc0:	bd10      	pop	{r4, pc}
 8006dc2:	4623      	mov	r3, r4
 8006dc4:	e7f2      	b.n	8006dac <strcat+0x4>

08006dc6 <strcpy>:
 8006dc6:	4603      	mov	r3, r0
 8006dc8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006dcc:	f803 2b01 	strb.w	r2, [r3], #1
 8006dd0:	2a00      	cmp	r2, #0
 8006dd2:	d1f9      	bne.n	8006dc8 <strcpy+0x2>
 8006dd4:	4770      	bx	lr

08006dd6 <strstr>:
 8006dd6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006dd8:	7803      	ldrb	r3, [r0, #0]
 8006dda:	b17b      	cbz	r3, 8006dfc <strstr+0x26>
 8006ddc:	4604      	mov	r4, r0
 8006dde:	7823      	ldrb	r3, [r4, #0]
 8006de0:	4620      	mov	r0, r4
 8006de2:	1c66      	adds	r6, r4, #1
 8006de4:	b17b      	cbz	r3, 8006e06 <strstr+0x30>
 8006de6:	1e4a      	subs	r2, r1, #1
 8006de8:	1e63      	subs	r3, r4, #1
 8006dea:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8006dee:	b14d      	cbz	r5, 8006e04 <strstr+0x2e>
 8006df0:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8006df4:	42af      	cmp	r7, r5
 8006df6:	4634      	mov	r4, r6
 8006df8:	d0f7      	beq.n	8006dea <strstr+0x14>
 8006dfa:	e7f0      	b.n	8006dde <strstr+0x8>
 8006dfc:	780b      	ldrb	r3, [r1, #0]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	bf18      	it	ne
 8006e02:	2000      	movne	r0, #0
 8006e04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e06:	4618      	mov	r0, r3
 8006e08:	e7fc      	b.n	8006e04 <strstr+0x2e>
	...

08006e0c <__utoa>:
 8006e0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e0e:	4b1d      	ldr	r3, [pc, #116]	; (8006e84 <__utoa+0x78>)
 8006e10:	b08b      	sub	sp, #44	; 0x2c
 8006e12:	4605      	mov	r5, r0
 8006e14:	460c      	mov	r4, r1
 8006e16:	466e      	mov	r6, sp
 8006e18:	f103 0c20 	add.w	ip, r3, #32
 8006e1c:	6818      	ldr	r0, [r3, #0]
 8006e1e:	6859      	ldr	r1, [r3, #4]
 8006e20:	4637      	mov	r7, r6
 8006e22:	c703      	stmia	r7!, {r0, r1}
 8006e24:	3308      	adds	r3, #8
 8006e26:	4563      	cmp	r3, ip
 8006e28:	463e      	mov	r6, r7
 8006e2a:	d1f7      	bne.n	8006e1c <__utoa+0x10>
 8006e2c:	6818      	ldr	r0, [r3, #0]
 8006e2e:	791b      	ldrb	r3, [r3, #4]
 8006e30:	713b      	strb	r3, [r7, #4]
 8006e32:	1e93      	subs	r3, r2, #2
 8006e34:	2b22      	cmp	r3, #34	; 0x22
 8006e36:	6038      	str	r0, [r7, #0]
 8006e38:	f04f 0300 	mov.w	r3, #0
 8006e3c:	d904      	bls.n	8006e48 <__utoa+0x3c>
 8006e3e:	7023      	strb	r3, [r4, #0]
 8006e40:	461c      	mov	r4, r3
 8006e42:	4620      	mov	r0, r4
 8006e44:	b00b      	add	sp, #44	; 0x2c
 8006e46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e48:	1e66      	subs	r6, r4, #1
 8006e4a:	fbb5 f0f2 	udiv	r0, r5, r2
 8006e4e:	af0a      	add	r7, sp, #40	; 0x28
 8006e50:	fb02 5510 	mls	r5, r2, r0, r5
 8006e54:	443d      	add	r5, r7
 8006e56:	1c59      	adds	r1, r3, #1
 8006e58:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 8006e5c:	f806 5f01 	strb.w	r5, [r6, #1]!
 8006e60:	4605      	mov	r5, r0
 8006e62:	b968      	cbnz	r0, 8006e80 <__utoa+0x74>
 8006e64:	5460      	strb	r0, [r4, r1]
 8006e66:	4423      	add	r3, r4
 8006e68:	4622      	mov	r2, r4
 8006e6a:	1b19      	subs	r1, r3, r4
 8006e6c:	1b10      	subs	r0, r2, r4
 8006e6e:	4281      	cmp	r1, r0
 8006e70:	dde7      	ble.n	8006e42 <__utoa+0x36>
 8006e72:	7811      	ldrb	r1, [r2, #0]
 8006e74:	7818      	ldrb	r0, [r3, #0]
 8006e76:	f802 0b01 	strb.w	r0, [r2], #1
 8006e7a:	f803 1901 	strb.w	r1, [r3], #-1
 8006e7e:	e7f4      	b.n	8006e6a <__utoa+0x5e>
 8006e80:	460b      	mov	r3, r1
 8006e82:	e7e2      	b.n	8006e4a <__utoa+0x3e>
 8006e84:	08008854 	.word	0x08008854

08006e88 <quorem>:
 8006e88:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e8c:	6903      	ldr	r3, [r0, #16]
 8006e8e:	690c      	ldr	r4, [r1, #16]
 8006e90:	42a3      	cmp	r3, r4
 8006e92:	4680      	mov	r8, r0
 8006e94:	f2c0 8082 	blt.w	8006f9c <quorem+0x114>
 8006e98:	3c01      	subs	r4, #1
 8006e9a:	f101 0714 	add.w	r7, r1, #20
 8006e9e:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8006ea2:	f100 0614 	add.w	r6, r0, #20
 8006ea6:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8006eaa:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8006eae:	eb06 030c 	add.w	r3, r6, ip
 8006eb2:	3501      	adds	r5, #1
 8006eb4:	eb07 090c 	add.w	r9, r7, ip
 8006eb8:	9301      	str	r3, [sp, #4]
 8006eba:	fbb0 f5f5 	udiv	r5, r0, r5
 8006ebe:	b395      	cbz	r5, 8006f26 <quorem+0x9e>
 8006ec0:	f04f 0a00 	mov.w	sl, #0
 8006ec4:	4638      	mov	r0, r7
 8006ec6:	46b6      	mov	lr, r6
 8006ec8:	46d3      	mov	fp, sl
 8006eca:	f850 2b04 	ldr.w	r2, [r0], #4
 8006ece:	b293      	uxth	r3, r2
 8006ed0:	fb05 a303 	mla	r3, r5, r3, sl
 8006ed4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006ed8:	b29b      	uxth	r3, r3
 8006eda:	ebab 0303 	sub.w	r3, fp, r3
 8006ede:	0c12      	lsrs	r2, r2, #16
 8006ee0:	f8de b000 	ldr.w	fp, [lr]
 8006ee4:	fb05 a202 	mla	r2, r5, r2, sl
 8006ee8:	fa13 f38b 	uxtah	r3, r3, fp
 8006eec:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8006ef0:	fa1f fb82 	uxth.w	fp, r2
 8006ef4:	f8de 2000 	ldr.w	r2, [lr]
 8006ef8:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8006efc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006f00:	b29b      	uxth	r3, r3
 8006f02:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006f06:	4581      	cmp	r9, r0
 8006f08:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8006f0c:	f84e 3b04 	str.w	r3, [lr], #4
 8006f10:	d2db      	bcs.n	8006eca <quorem+0x42>
 8006f12:	f856 300c 	ldr.w	r3, [r6, ip]
 8006f16:	b933      	cbnz	r3, 8006f26 <quorem+0x9e>
 8006f18:	9b01      	ldr	r3, [sp, #4]
 8006f1a:	3b04      	subs	r3, #4
 8006f1c:	429e      	cmp	r6, r3
 8006f1e:	461a      	mov	r2, r3
 8006f20:	d330      	bcc.n	8006f84 <quorem+0xfc>
 8006f22:	f8c8 4010 	str.w	r4, [r8, #16]
 8006f26:	4640      	mov	r0, r8
 8006f28:	f001 f81e 	bl	8007f68 <__mcmp>
 8006f2c:	2800      	cmp	r0, #0
 8006f2e:	db25      	blt.n	8006f7c <quorem+0xf4>
 8006f30:	3501      	adds	r5, #1
 8006f32:	4630      	mov	r0, r6
 8006f34:	f04f 0c00 	mov.w	ip, #0
 8006f38:	f857 2b04 	ldr.w	r2, [r7], #4
 8006f3c:	f8d0 e000 	ldr.w	lr, [r0]
 8006f40:	b293      	uxth	r3, r2
 8006f42:	ebac 0303 	sub.w	r3, ip, r3
 8006f46:	0c12      	lsrs	r2, r2, #16
 8006f48:	fa13 f38e 	uxtah	r3, r3, lr
 8006f4c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006f50:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006f54:	b29b      	uxth	r3, r3
 8006f56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006f5a:	45b9      	cmp	r9, r7
 8006f5c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006f60:	f840 3b04 	str.w	r3, [r0], #4
 8006f64:	d2e8      	bcs.n	8006f38 <quorem+0xb0>
 8006f66:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8006f6a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8006f6e:	b92a      	cbnz	r2, 8006f7c <quorem+0xf4>
 8006f70:	3b04      	subs	r3, #4
 8006f72:	429e      	cmp	r6, r3
 8006f74:	461a      	mov	r2, r3
 8006f76:	d30b      	bcc.n	8006f90 <quorem+0x108>
 8006f78:	f8c8 4010 	str.w	r4, [r8, #16]
 8006f7c:	4628      	mov	r0, r5
 8006f7e:	b003      	add	sp, #12
 8006f80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f84:	6812      	ldr	r2, [r2, #0]
 8006f86:	3b04      	subs	r3, #4
 8006f88:	2a00      	cmp	r2, #0
 8006f8a:	d1ca      	bne.n	8006f22 <quorem+0x9a>
 8006f8c:	3c01      	subs	r4, #1
 8006f8e:	e7c5      	b.n	8006f1c <quorem+0x94>
 8006f90:	6812      	ldr	r2, [r2, #0]
 8006f92:	3b04      	subs	r3, #4
 8006f94:	2a00      	cmp	r2, #0
 8006f96:	d1ef      	bne.n	8006f78 <quorem+0xf0>
 8006f98:	3c01      	subs	r4, #1
 8006f9a:	e7ea      	b.n	8006f72 <quorem+0xea>
 8006f9c:	2000      	movs	r0, #0
 8006f9e:	e7ee      	b.n	8006f7e <quorem+0xf6>

08006fa0 <_dtoa_r>:
 8006fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fa4:	ec57 6b10 	vmov	r6, r7, d0
 8006fa8:	b097      	sub	sp, #92	; 0x5c
 8006faa:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006fac:	9106      	str	r1, [sp, #24]
 8006fae:	4604      	mov	r4, r0
 8006fb0:	920b      	str	r2, [sp, #44]	; 0x2c
 8006fb2:	9312      	str	r3, [sp, #72]	; 0x48
 8006fb4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006fb8:	e9cd 6700 	strd	r6, r7, [sp]
 8006fbc:	b93d      	cbnz	r5, 8006fce <_dtoa_r+0x2e>
 8006fbe:	2010      	movs	r0, #16
 8006fc0:	f000 fdb4 	bl	8007b2c <malloc>
 8006fc4:	6260      	str	r0, [r4, #36]	; 0x24
 8006fc6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006fca:	6005      	str	r5, [r0, #0]
 8006fcc:	60c5      	str	r5, [r0, #12]
 8006fce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006fd0:	6819      	ldr	r1, [r3, #0]
 8006fd2:	b151      	cbz	r1, 8006fea <_dtoa_r+0x4a>
 8006fd4:	685a      	ldr	r2, [r3, #4]
 8006fd6:	604a      	str	r2, [r1, #4]
 8006fd8:	2301      	movs	r3, #1
 8006fda:	4093      	lsls	r3, r2
 8006fdc:	608b      	str	r3, [r1, #8]
 8006fde:	4620      	mov	r0, r4
 8006fe0:	f000 fde0 	bl	8007ba4 <_Bfree>
 8006fe4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	601a      	str	r2, [r3, #0]
 8006fea:	1e3b      	subs	r3, r7, #0
 8006fec:	bfbb      	ittet	lt
 8006fee:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006ff2:	9301      	strlt	r3, [sp, #4]
 8006ff4:	2300      	movge	r3, #0
 8006ff6:	2201      	movlt	r2, #1
 8006ff8:	bfac      	ite	ge
 8006ffa:	f8c8 3000 	strge.w	r3, [r8]
 8006ffe:	f8c8 2000 	strlt.w	r2, [r8]
 8007002:	4baf      	ldr	r3, [pc, #700]	; (80072c0 <_dtoa_r+0x320>)
 8007004:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007008:	ea33 0308 	bics.w	r3, r3, r8
 800700c:	d114      	bne.n	8007038 <_dtoa_r+0x98>
 800700e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007010:	f242 730f 	movw	r3, #9999	; 0x270f
 8007014:	6013      	str	r3, [r2, #0]
 8007016:	9b00      	ldr	r3, [sp, #0]
 8007018:	b923      	cbnz	r3, 8007024 <_dtoa_r+0x84>
 800701a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800701e:	2800      	cmp	r0, #0
 8007020:	f000 8542 	beq.w	8007aa8 <_dtoa_r+0xb08>
 8007024:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007026:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80072d4 <_dtoa_r+0x334>
 800702a:	2b00      	cmp	r3, #0
 800702c:	f000 8544 	beq.w	8007ab8 <_dtoa_r+0xb18>
 8007030:	f10b 0303 	add.w	r3, fp, #3
 8007034:	f000 bd3e 	b.w	8007ab4 <_dtoa_r+0xb14>
 8007038:	e9dd 6700 	ldrd	r6, r7, [sp]
 800703c:	2200      	movs	r2, #0
 800703e:	2300      	movs	r3, #0
 8007040:	4630      	mov	r0, r6
 8007042:	4639      	mov	r1, r7
 8007044:	f7f9 fd48 	bl	8000ad8 <__aeabi_dcmpeq>
 8007048:	4681      	mov	r9, r0
 800704a:	b168      	cbz	r0, 8007068 <_dtoa_r+0xc8>
 800704c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800704e:	2301      	movs	r3, #1
 8007050:	6013      	str	r3, [r2, #0]
 8007052:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007054:	2b00      	cmp	r3, #0
 8007056:	f000 8524 	beq.w	8007aa2 <_dtoa_r+0xb02>
 800705a:	4b9a      	ldr	r3, [pc, #616]	; (80072c4 <_dtoa_r+0x324>)
 800705c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800705e:	f103 3bff 	add.w	fp, r3, #4294967295
 8007062:	6013      	str	r3, [r2, #0]
 8007064:	f000 bd28 	b.w	8007ab8 <_dtoa_r+0xb18>
 8007068:	aa14      	add	r2, sp, #80	; 0x50
 800706a:	a915      	add	r1, sp, #84	; 0x54
 800706c:	ec47 6b10 	vmov	d0, r6, r7
 8007070:	4620      	mov	r0, r4
 8007072:	f000 fff0 	bl	8008056 <__d2b>
 8007076:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800707a:	9004      	str	r0, [sp, #16]
 800707c:	2d00      	cmp	r5, #0
 800707e:	d07c      	beq.n	800717a <_dtoa_r+0x1da>
 8007080:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007084:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8007088:	46b2      	mov	sl, r6
 800708a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800708e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007092:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8007096:	2200      	movs	r2, #0
 8007098:	4b8b      	ldr	r3, [pc, #556]	; (80072c8 <_dtoa_r+0x328>)
 800709a:	4650      	mov	r0, sl
 800709c:	4659      	mov	r1, fp
 800709e:	f7f9 f8fb 	bl	8000298 <__aeabi_dsub>
 80070a2:	a381      	add	r3, pc, #516	; (adr r3, 80072a8 <_dtoa_r+0x308>)
 80070a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070a8:	f7f9 faae 	bl	8000608 <__aeabi_dmul>
 80070ac:	a380      	add	r3, pc, #512	; (adr r3, 80072b0 <_dtoa_r+0x310>)
 80070ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070b2:	f7f9 f8f3 	bl	800029c <__adddf3>
 80070b6:	4606      	mov	r6, r0
 80070b8:	4628      	mov	r0, r5
 80070ba:	460f      	mov	r7, r1
 80070bc:	f7f9 fa3a 	bl	8000534 <__aeabi_i2d>
 80070c0:	a37d      	add	r3, pc, #500	; (adr r3, 80072b8 <_dtoa_r+0x318>)
 80070c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070c6:	f7f9 fa9f 	bl	8000608 <__aeabi_dmul>
 80070ca:	4602      	mov	r2, r0
 80070cc:	460b      	mov	r3, r1
 80070ce:	4630      	mov	r0, r6
 80070d0:	4639      	mov	r1, r7
 80070d2:	f7f9 f8e3 	bl	800029c <__adddf3>
 80070d6:	4606      	mov	r6, r0
 80070d8:	460f      	mov	r7, r1
 80070da:	f7f9 fd45 	bl	8000b68 <__aeabi_d2iz>
 80070de:	2200      	movs	r2, #0
 80070e0:	4682      	mov	sl, r0
 80070e2:	2300      	movs	r3, #0
 80070e4:	4630      	mov	r0, r6
 80070e6:	4639      	mov	r1, r7
 80070e8:	f7f9 fd00 	bl	8000aec <__aeabi_dcmplt>
 80070ec:	b148      	cbz	r0, 8007102 <_dtoa_r+0x162>
 80070ee:	4650      	mov	r0, sl
 80070f0:	f7f9 fa20 	bl	8000534 <__aeabi_i2d>
 80070f4:	4632      	mov	r2, r6
 80070f6:	463b      	mov	r3, r7
 80070f8:	f7f9 fcee 	bl	8000ad8 <__aeabi_dcmpeq>
 80070fc:	b908      	cbnz	r0, 8007102 <_dtoa_r+0x162>
 80070fe:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007102:	f1ba 0f16 	cmp.w	sl, #22
 8007106:	d859      	bhi.n	80071bc <_dtoa_r+0x21c>
 8007108:	4970      	ldr	r1, [pc, #448]	; (80072cc <_dtoa_r+0x32c>)
 800710a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800710e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007112:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007116:	f7f9 fd07 	bl	8000b28 <__aeabi_dcmpgt>
 800711a:	2800      	cmp	r0, #0
 800711c:	d050      	beq.n	80071c0 <_dtoa_r+0x220>
 800711e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007122:	2300      	movs	r3, #0
 8007124:	930f      	str	r3, [sp, #60]	; 0x3c
 8007126:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007128:	1b5d      	subs	r5, r3, r5
 800712a:	f1b5 0801 	subs.w	r8, r5, #1
 800712e:	bf49      	itett	mi
 8007130:	f1c5 0301 	rsbmi	r3, r5, #1
 8007134:	2300      	movpl	r3, #0
 8007136:	9305      	strmi	r3, [sp, #20]
 8007138:	f04f 0800 	movmi.w	r8, #0
 800713c:	bf58      	it	pl
 800713e:	9305      	strpl	r3, [sp, #20]
 8007140:	f1ba 0f00 	cmp.w	sl, #0
 8007144:	db3e      	blt.n	80071c4 <_dtoa_r+0x224>
 8007146:	2300      	movs	r3, #0
 8007148:	44d0      	add	r8, sl
 800714a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800714e:	9307      	str	r3, [sp, #28]
 8007150:	9b06      	ldr	r3, [sp, #24]
 8007152:	2b09      	cmp	r3, #9
 8007154:	f200 8090 	bhi.w	8007278 <_dtoa_r+0x2d8>
 8007158:	2b05      	cmp	r3, #5
 800715a:	bfc4      	itt	gt
 800715c:	3b04      	subgt	r3, #4
 800715e:	9306      	strgt	r3, [sp, #24]
 8007160:	9b06      	ldr	r3, [sp, #24]
 8007162:	f1a3 0302 	sub.w	r3, r3, #2
 8007166:	bfcc      	ite	gt
 8007168:	2500      	movgt	r5, #0
 800716a:	2501      	movle	r5, #1
 800716c:	2b03      	cmp	r3, #3
 800716e:	f200 808f 	bhi.w	8007290 <_dtoa_r+0x2f0>
 8007172:	e8df f003 	tbb	[pc, r3]
 8007176:	7f7d      	.short	0x7f7d
 8007178:	7131      	.short	0x7131
 800717a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800717e:	441d      	add	r5, r3
 8007180:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8007184:	2820      	cmp	r0, #32
 8007186:	dd13      	ble.n	80071b0 <_dtoa_r+0x210>
 8007188:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800718c:	9b00      	ldr	r3, [sp, #0]
 800718e:	fa08 f800 	lsl.w	r8, r8, r0
 8007192:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8007196:	fa23 f000 	lsr.w	r0, r3, r0
 800719a:	ea48 0000 	orr.w	r0, r8, r0
 800719e:	f7f9 f9b9 	bl	8000514 <__aeabi_ui2d>
 80071a2:	2301      	movs	r3, #1
 80071a4:	4682      	mov	sl, r0
 80071a6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80071aa:	3d01      	subs	r5, #1
 80071ac:	9313      	str	r3, [sp, #76]	; 0x4c
 80071ae:	e772      	b.n	8007096 <_dtoa_r+0xf6>
 80071b0:	9b00      	ldr	r3, [sp, #0]
 80071b2:	f1c0 0020 	rsb	r0, r0, #32
 80071b6:	fa03 f000 	lsl.w	r0, r3, r0
 80071ba:	e7f0      	b.n	800719e <_dtoa_r+0x1fe>
 80071bc:	2301      	movs	r3, #1
 80071be:	e7b1      	b.n	8007124 <_dtoa_r+0x184>
 80071c0:	900f      	str	r0, [sp, #60]	; 0x3c
 80071c2:	e7b0      	b.n	8007126 <_dtoa_r+0x186>
 80071c4:	9b05      	ldr	r3, [sp, #20]
 80071c6:	eba3 030a 	sub.w	r3, r3, sl
 80071ca:	9305      	str	r3, [sp, #20]
 80071cc:	f1ca 0300 	rsb	r3, sl, #0
 80071d0:	9307      	str	r3, [sp, #28]
 80071d2:	2300      	movs	r3, #0
 80071d4:	930e      	str	r3, [sp, #56]	; 0x38
 80071d6:	e7bb      	b.n	8007150 <_dtoa_r+0x1b0>
 80071d8:	2301      	movs	r3, #1
 80071da:	930a      	str	r3, [sp, #40]	; 0x28
 80071dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80071de:	2b00      	cmp	r3, #0
 80071e0:	dd59      	ble.n	8007296 <_dtoa_r+0x2f6>
 80071e2:	9302      	str	r3, [sp, #8]
 80071e4:	4699      	mov	r9, r3
 80071e6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80071e8:	2200      	movs	r2, #0
 80071ea:	6072      	str	r2, [r6, #4]
 80071ec:	2204      	movs	r2, #4
 80071ee:	f102 0014 	add.w	r0, r2, #20
 80071f2:	4298      	cmp	r0, r3
 80071f4:	6871      	ldr	r1, [r6, #4]
 80071f6:	d953      	bls.n	80072a0 <_dtoa_r+0x300>
 80071f8:	4620      	mov	r0, r4
 80071fa:	f000 fc9f 	bl	8007b3c <_Balloc>
 80071fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007200:	6030      	str	r0, [r6, #0]
 8007202:	f1b9 0f0e 	cmp.w	r9, #14
 8007206:	f8d3 b000 	ldr.w	fp, [r3]
 800720a:	f200 80e6 	bhi.w	80073da <_dtoa_r+0x43a>
 800720e:	2d00      	cmp	r5, #0
 8007210:	f000 80e3 	beq.w	80073da <_dtoa_r+0x43a>
 8007214:	ed9d 7b00 	vldr	d7, [sp]
 8007218:	f1ba 0f00 	cmp.w	sl, #0
 800721c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8007220:	dd74      	ble.n	800730c <_dtoa_r+0x36c>
 8007222:	4a2a      	ldr	r2, [pc, #168]	; (80072cc <_dtoa_r+0x32c>)
 8007224:	f00a 030f 	and.w	r3, sl, #15
 8007228:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800722c:	ed93 7b00 	vldr	d7, [r3]
 8007230:	ea4f 162a 	mov.w	r6, sl, asr #4
 8007234:	06f0      	lsls	r0, r6, #27
 8007236:	ed8d 7b08 	vstr	d7, [sp, #32]
 800723a:	d565      	bpl.n	8007308 <_dtoa_r+0x368>
 800723c:	4b24      	ldr	r3, [pc, #144]	; (80072d0 <_dtoa_r+0x330>)
 800723e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007242:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007246:	f7f9 fb09 	bl	800085c <__aeabi_ddiv>
 800724a:	e9cd 0100 	strd	r0, r1, [sp]
 800724e:	f006 060f 	and.w	r6, r6, #15
 8007252:	2503      	movs	r5, #3
 8007254:	4f1e      	ldr	r7, [pc, #120]	; (80072d0 <_dtoa_r+0x330>)
 8007256:	e04c      	b.n	80072f2 <_dtoa_r+0x352>
 8007258:	2301      	movs	r3, #1
 800725a:	930a      	str	r3, [sp, #40]	; 0x28
 800725c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800725e:	4453      	add	r3, sl
 8007260:	f103 0901 	add.w	r9, r3, #1
 8007264:	9302      	str	r3, [sp, #8]
 8007266:	464b      	mov	r3, r9
 8007268:	2b01      	cmp	r3, #1
 800726a:	bfb8      	it	lt
 800726c:	2301      	movlt	r3, #1
 800726e:	e7ba      	b.n	80071e6 <_dtoa_r+0x246>
 8007270:	2300      	movs	r3, #0
 8007272:	e7b2      	b.n	80071da <_dtoa_r+0x23a>
 8007274:	2300      	movs	r3, #0
 8007276:	e7f0      	b.n	800725a <_dtoa_r+0x2ba>
 8007278:	2501      	movs	r5, #1
 800727a:	2300      	movs	r3, #0
 800727c:	9306      	str	r3, [sp, #24]
 800727e:	950a      	str	r5, [sp, #40]	; 0x28
 8007280:	f04f 33ff 	mov.w	r3, #4294967295
 8007284:	9302      	str	r3, [sp, #8]
 8007286:	4699      	mov	r9, r3
 8007288:	2200      	movs	r2, #0
 800728a:	2312      	movs	r3, #18
 800728c:	920b      	str	r2, [sp, #44]	; 0x2c
 800728e:	e7aa      	b.n	80071e6 <_dtoa_r+0x246>
 8007290:	2301      	movs	r3, #1
 8007292:	930a      	str	r3, [sp, #40]	; 0x28
 8007294:	e7f4      	b.n	8007280 <_dtoa_r+0x2e0>
 8007296:	2301      	movs	r3, #1
 8007298:	9302      	str	r3, [sp, #8]
 800729a:	4699      	mov	r9, r3
 800729c:	461a      	mov	r2, r3
 800729e:	e7f5      	b.n	800728c <_dtoa_r+0x2ec>
 80072a0:	3101      	adds	r1, #1
 80072a2:	6071      	str	r1, [r6, #4]
 80072a4:	0052      	lsls	r2, r2, #1
 80072a6:	e7a2      	b.n	80071ee <_dtoa_r+0x24e>
 80072a8:	636f4361 	.word	0x636f4361
 80072ac:	3fd287a7 	.word	0x3fd287a7
 80072b0:	8b60c8b3 	.word	0x8b60c8b3
 80072b4:	3fc68a28 	.word	0x3fc68a28
 80072b8:	509f79fb 	.word	0x509f79fb
 80072bc:	3fd34413 	.word	0x3fd34413
 80072c0:	7ff00000 	.word	0x7ff00000
 80072c4:	08008831 	.word	0x08008831
 80072c8:	3ff80000 	.word	0x3ff80000
 80072cc:	080088b0 	.word	0x080088b0
 80072d0:	08008888 	.word	0x08008888
 80072d4:	08008882 	.word	0x08008882
 80072d8:	07f1      	lsls	r1, r6, #31
 80072da:	d508      	bpl.n	80072ee <_dtoa_r+0x34e>
 80072dc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80072e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80072e4:	f7f9 f990 	bl	8000608 <__aeabi_dmul>
 80072e8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80072ec:	3501      	adds	r5, #1
 80072ee:	1076      	asrs	r6, r6, #1
 80072f0:	3708      	adds	r7, #8
 80072f2:	2e00      	cmp	r6, #0
 80072f4:	d1f0      	bne.n	80072d8 <_dtoa_r+0x338>
 80072f6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80072fa:	e9dd 0100 	ldrd	r0, r1, [sp]
 80072fe:	f7f9 faad 	bl	800085c <__aeabi_ddiv>
 8007302:	e9cd 0100 	strd	r0, r1, [sp]
 8007306:	e01a      	b.n	800733e <_dtoa_r+0x39e>
 8007308:	2502      	movs	r5, #2
 800730a:	e7a3      	b.n	8007254 <_dtoa_r+0x2b4>
 800730c:	f000 80a0 	beq.w	8007450 <_dtoa_r+0x4b0>
 8007310:	f1ca 0600 	rsb	r6, sl, #0
 8007314:	4b9f      	ldr	r3, [pc, #636]	; (8007594 <_dtoa_r+0x5f4>)
 8007316:	4fa0      	ldr	r7, [pc, #640]	; (8007598 <_dtoa_r+0x5f8>)
 8007318:	f006 020f 	and.w	r2, r6, #15
 800731c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007324:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007328:	f7f9 f96e 	bl	8000608 <__aeabi_dmul>
 800732c:	e9cd 0100 	strd	r0, r1, [sp]
 8007330:	1136      	asrs	r6, r6, #4
 8007332:	2300      	movs	r3, #0
 8007334:	2502      	movs	r5, #2
 8007336:	2e00      	cmp	r6, #0
 8007338:	d17f      	bne.n	800743a <_dtoa_r+0x49a>
 800733a:	2b00      	cmp	r3, #0
 800733c:	d1e1      	bne.n	8007302 <_dtoa_r+0x362>
 800733e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007340:	2b00      	cmp	r3, #0
 8007342:	f000 8087 	beq.w	8007454 <_dtoa_r+0x4b4>
 8007346:	e9dd 6700 	ldrd	r6, r7, [sp]
 800734a:	2200      	movs	r2, #0
 800734c:	4b93      	ldr	r3, [pc, #588]	; (800759c <_dtoa_r+0x5fc>)
 800734e:	4630      	mov	r0, r6
 8007350:	4639      	mov	r1, r7
 8007352:	f7f9 fbcb 	bl	8000aec <__aeabi_dcmplt>
 8007356:	2800      	cmp	r0, #0
 8007358:	d07c      	beq.n	8007454 <_dtoa_r+0x4b4>
 800735a:	f1b9 0f00 	cmp.w	r9, #0
 800735e:	d079      	beq.n	8007454 <_dtoa_r+0x4b4>
 8007360:	9b02      	ldr	r3, [sp, #8]
 8007362:	2b00      	cmp	r3, #0
 8007364:	dd35      	ble.n	80073d2 <_dtoa_r+0x432>
 8007366:	f10a 33ff 	add.w	r3, sl, #4294967295
 800736a:	9308      	str	r3, [sp, #32]
 800736c:	4639      	mov	r1, r7
 800736e:	2200      	movs	r2, #0
 8007370:	4b8b      	ldr	r3, [pc, #556]	; (80075a0 <_dtoa_r+0x600>)
 8007372:	4630      	mov	r0, r6
 8007374:	f7f9 f948 	bl	8000608 <__aeabi_dmul>
 8007378:	e9cd 0100 	strd	r0, r1, [sp]
 800737c:	9f02      	ldr	r7, [sp, #8]
 800737e:	3501      	adds	r5, #1
 8007380:	4628      	mov	r0, r5
 8007382:	f7f9 f8d7 	bl	8000534 <__aeabi_i2d>
 8007386:	e9dd 2300 	ldrd	r2, r3, [sp]
 800738a:	f7f9 f93d 	bl	8000608 <__aeabi_dmul>
 800738e:	2200      	movs	r2, #0
 8007390:	4b84      	ldr	r3, [pc, #528]	; (80075a4 <_dtoa_r+0x604>)
 8007392:	f7f8 ff83 	bl	800029c <__adddf3>
 8007396:	4605      	mov	r5, r0
 8007398:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800739c:	2f00      	cmp	r7, #0
 800739e:	d15d      	bne.n	800745c <_dtoa_r+0x4bc>
 80073a0:	2200      	movs	r2, #0
 80073a2:	4b81      	ldr	r3, [pc, #516]	; (80075a8 <_dtoa_r+0x608>)
 80073a4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80073a8:	f7f8 ff76 	bl	8000298 <__aeabi_dsub>
 80073ac:	462a      	mov	r2, r5
 80073ae:	4633      	mov	r3, r6
 80073b0:	e9cd 0100 	strd	r0, r1, [sp]
 80073b4:	f7f9 fbb8 	bl	8000b28 <__aeabi_dcmpgt>
 80073b8:	2800      	cmp	r0, #0
 80073ba:	f040 8288 	bne.w	80078ce <_dtoa_r+0x92e>
 80073be:	462a      	mov	r2, r5
 80073c0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80073c4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80073c8:	f7f9 fb90 	bl	8000aec <__aeabi_dcmplt>
 80073cc:	2800      	cmp	r0, #0
 80073ce:	f040 827c 	bne.w	80078ca <_dtoa_r+0x92a>
 80073d2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80073d6:	e9cd 2300 	strd	r2, r3, [sp]
 80073da:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80073dc:	2b00      	cmp	r3, #0
 80073de:	f2c0 8150 	blt.w	8007682 <_dtoa_r+0x6e2>
 80073e2:	f1ba 0f0e 	cmp.w	sl, #14
 80073e6:	f300 814c 	bgt.w	8007682 <_dtoa_r+0x6e2>
 80073ea:	4b6a      	ldr	r3, [pc, #424]	; (8007594 <_dtoa_r+0x5f4>)
 80073ec:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80073f0:	ed93 7b00 	vldr	d7, [r3]
 80073f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80073fc:	f280 80d8 	bge.w	80075b0 <_dtoa_r+0x610>
 8007400:	f1b9 0f00 	cmp.w	r9, #0
 8007404:	f300 80d4 	bgt.w	80075b0 <_dtoa_r+0x610>
 8007408:	f040 825e 	bne.w	80078c8 <_dtoa_r+0x928>
 800740c:	2200      	movs	r2, #0
 800740e:	4b66      	ldr	r3, [pc, #408]	; (80075a8 <_dtoa_r+0x608>)
 8007410:	ec51 0b17 	vmov	r0, r1, d7
 8007414:	f7f9 f8f8 	bl	8000608 <__aeabi_dmul>
 8007418:	e9dd 2300 	ldrd	r2, r3, [sp]
 800741c:	f7f9 fb7a 	bl	8000b14 <__aeabi_dcmpge>
 8007420:	464f      	mov	r7, r9
 8007422:	464e      	mov	r6, r9
 8007424:	2800      	cmp	r0, #0
 8007426:	f040 8234 	bne.w	8007892 <_dtoa_r+0x8f2>
 800742a:	2331      	movs	r3, #49	; 0x31
 800742c:	f10b 0501 	add.w	r5, fp, #1
 8007430:	f88b 3000 	strb.w	r3, [fp]
 8007434:	f10a 0a01 	add.w	sl, sl, #1
 8007438:	e22f      	b.n	800789a <_dtoa_r+0x8fa>
 800743a:	07f2      	lsls	r2, r6, #31
 800743c:	d505      	bpl.n	800744a <_dtoa_r+0x4aa>
 800743e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007442:	f7f9 f8e1 	bl	8000608 <__aeabi_dmul>
 8007446:	3501      	adds	r5, #1
 8007448:	2301      	movs	r3, #1
 800744a:	1076      	asrs	r6, r6, #1
 800744c:	3708      	adds	r7, #8
 800744e:	e772      	b.n	8007336 <_dtoa_r+0x396>
 8007450:	2502      	movs	r5, #2
 8007452:	e774      	b.n	800733e <_dtoa_r+0x39e>
 8007454:	f8cd a020 	str.w	sl, [sp, #32]
 8007458:	464f      	mov	r7, r9
 800745a:	e791      	b.n	8007380 <_dtoa_r+0x3e0>
 800745c:	4b4d      	ldr	r3, [pc, #308]	; (8007594 <_dtoa_r+0x5f4>)
 800745e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007462:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8007466:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007468:	2b00      	cmp	r3, #0
 800746a:	d047      	beq.n	80074fc <_dtoa_r+0x55c>
 800746c:	4602      	mov	r2, r0
 800746e:	460b      	mov	r3, r1
 8007470:	2000      	movs	r0, #0
 8007472:	494e      	ldr	r1, [pc, #312]	; (80075ac <_dtoa_r+0x60c>)
 8007474:	f7f9 f9f2 	bl	800085c <__aeabi_ddiv>
 8007478:	462a      	mov	r2, r5
 800747a:	4633      	mov	r3, r6
 800747c:	f7f8 ff0c 	bl	8000298 <__aeabi_dsub>
 8007480:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007484:	465d      	mov	r5, fp
 8007486:	e9dd 0100 	ldrd	r0, r1, [sp]
 800748a:	f7f9 fb6d 	bl	8000b68 <__aeabi_d2iz>
 800748e:	4606      	mov	r6, r0
 8007490:	f7f9 f850 	bl	8000534 <__aeabi_i2d>
 8007494:	4602      	mov	r2, r0
 8007496:	460b      	mov	r3, r1
 8007498:	e9dd 0100 	ldrd	r0, r1, [sp]
 800749c:	f7f8 fefc 	bl	8000298 <__aeabi_dsub>
 80074a0:	3630      	adds	r6, #48	; 0x30
 80074a2:	f805 6b01 	strb.w	r6, [r5], #1
 80074a6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80074aa:	e9cd 0100 	strd	r0, r1, [sp]
 80074ae:	f7f9 fb1d 	bl	8000aec <__aeabi_dcmplt>
 80074b2:	2800      	cmp	r0, #0
 80074b4:	d163      	bne.n	800757e <_dtoa_r+0x5de>
 80074b6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80074ba:	2000      	movs	r0, #0
 80074bc:	4937      	ldr	r1, [pc, #220]	; (800759c <_dtoa_r+0x5fc>)
 80074be:	f7f8 feeb 	bl	8000298 <__aeabi_dsub>
 80074c2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80074c6:	f7f9 fb11 	bl	8000aec <__aeabi_dcmplt>
 80074ca:	2800      	cmp	r0, #0
 80074cc:	f040 80b7 	bne.w	800763e <_dtoa_r+0x69e>
 80074d0:	eba5 030b 	sub.w	r3, r5, fp
 80074d4:	429f      	cmp	r7, r3
 80074d6:	f77f af7c 	ble.w	80073d2 <_dtoa_r+0x432>
 80074da:	2200      	movs	r2, #0
 80074dc:	4b30      	ldr	r3, [pc, #192]	; (80075a0 <_dtoa_r+0x600>)
 80074de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80074e2:	f7f9 f891 	bl	8000608 <__aeabi_dmul>
 80074e6:	2200      	movs	r2, #0
 80074e8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80074ec:	4b2c      	ldr	r3, [pc, #176]	; (80075a0 <_dtoa_r+0x600>)
 80074ee:	e9dd 0100 	ldrd	r0, r1, [sp]
 80074f2:	f7f9 f889 	bl	8000608 <__aeabi_dmul>
 80074f6:	e9cd 0100 	strd	r0, r1, [sp]
 80074fa:	e7c4      	b.n	8007486 <_dtoa_r+0x4e6>
 80074fc:	462a      	mov	r2, r5
 80074fe:	4633      	mov	r3, r6
 8007500:	f7f9 f882 	bl	8000608 <__aeabi_dmul>
 8007504:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007508:	eb0b 0507 	add.w	r5, fp, r7
 800750c:	465e      	mov	r6, fp
 800750e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007512:	f7f9 fb29 	bl	8000b68 <__aeabi_d2iz>
 8007516:	4607      	mov	r7, r0
 8007518:	f7f9 f80c 	bl	8000534 <__aeabi_i2d>
 800751c:	3730      	adds	r7, #48	; 0x30
 800751e:	4602      	mov	r2, r0
 8007520:	460b      	mov	r3, r1
 8007522:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007526:	f7f8 feb7 	bl	8000298 <__aeabi_dsub>
 800752a:	f806 7b01 	strb.w	r7, [r6], #1
 800752e:	42ae      	cmp	r6, r5
 8007530:	e9cd 0100 	strd	r0, r1, [sp]
 8007534:	f04f 0200 	mov.w	r2, #0
 8007538:	d126      	bne.n	8007588 <_dtoa_r+0x5e8>
 800753a:	4b1c      	ldr	r3, [pc, #112]	; (80075ac <_dtoa_r+0x60c>)
 800753c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007540:	f7f8 feac 	bl	800029c <__adddf3>
 8007544:	4602      	mov	r2, r0
 8007546:	460b      	mov	r3, r1
 8007548:	e9dd 0100 	ldrd	r0, r1, [sp]
 800754c:	f7f9 faec 	bl	8000b28 <__aeabi_dcmpgt>
 8007550:	2800      	cmp	r0, #0
 8007552:	d174      	bne.n	800763e <_dtoa_r+0x69e>
 8007554:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007558:	2000      	movs	r0, #0
 800755a:	4914      	ldr	r1, [pc, #80]	; (80075ac <_dtoa_r+0x60c>)
 800755c:	f7f8 fe9c 	bl	8000298 <__aeabi_dsub>
 8007560:	4602      	mov	r2, r0
 8007562:	460b      	mov	r3, r1
 8007564:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007568:	f7f9 fac0 	bl	8000aec <__aeabi_dcmplt>
 800756c:	2800      	cmp	r0, #0
 800756e:	f43f af30 	beq.w	80073d2 <_dtoa_r+0x432>
 8007572:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007576:	2b30      	cmp	r3, #48	; 0x30
 8007578:	f105 32ff 	add.w	r2, r5, #4294967295
 800757c:	d002      	beq.n	8007584 <_dtoa_r+0x5e4>
 800757e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8007582:	e04a      	b.n	800761a <_dtoa_r+0x67a>
 8007584:	4615      	mov	r5, r2
 8007586:	e7f4      	b.n	8007572 <_dtoa_r+0x5d2>
 8007588:	4b05      	ldr	r3, [pc, #20]	; (80075a0 <_dtoa_r+0x600>)
 800758a:	f7f9 f83d 	bl	8000608 <__aeabi_dmul>
 800758e:	e9cd 0100 	strd	r0, r1, [sp]
 8007592:	e7bc      	b.n	800750e <_dtoa_r+0x56e>
 8007594:	080088b0 	.word	0x080088b0
 8007598:	08008888 	.word	0x08008888
 800759c:	3ff00000 	.word	0x3ff00000
 80075a0:	40240000 	.word	0x40240000
 80075a4:	401c0000 	.word	0x401c0000
 80075a8:	40140000 	.word	0x40140000
 80075ac:	3fe00000 	.word	0x3fe00000
 80075b0:	e9dd 6700 	ldrd	r6, r7, [sp]
 80075b4:	465d      	mov	r5, fp
 80075b6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80075ba:	4630      	mov	r0, r6
 80075bc:	4639      	mov	r1, r7
 80075be:	f7f9 f94d 	bl	800085c <__aeabi_ddiv>
 80075c2:	f7f9 fad1 	bl	8000b68 <__aeabi_d2iz>
 80075c6:	4680      	mov	r8, r0
 80075c8:	f7f8 ffb4 	bl	8000534 <__aeabi_i2d>
 80075cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80075d0:	f7f9 f81a 	bl	8000608 <__aeabi_dmul>
 80075d4:	4602      	mov	r2, r0
 80075d6:	460b      	mov	r3, r1
 80075d8:	4630      	mov	r0, r6
 80075da:	4639      	mov	r1, r7
 80075dc:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80075e0:	f7f8 fe5a 	bl	8000298 <__aeabi_dsub>
 80075e4:	f805 6b01 	strb.w	r6, [r5], #1
 80075e8:	eba5 060b 	sub.w	r6, r5, fp
 80075ec:	45b1      	cmp	r9, r6
 80075ee:	4602      	mov	r2, r0
 80075f0:	460b      	mov	r3, r1
 80075f2:	d139      	bne.n	8007668 <_dtoa_r+0x6c8>
 80075f4:	f7f8 fe52 	bl	800029c <__adddf3>
 80075f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80075fc:	4606      	mov	r6, r0
 80075fe:	460f      	mov	r7, r1
 8007600:	f7f9 fa92 	bl	8000b28 <__aeabi_dcmpgt>
 8007604:	b9c8      	cbnz	r0, 800763a <_dtoa_r+0x69a>
 8007606:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800760a:	4630      	mov	r0, r6
 800760c:	4639      	mov	r1, r7
 800760e:	f7f9 fa63 	bl	8000ad8 <__aeabi_dcmpeq>
 8007612:	b110      	cbz	r0, 800761a <_dtoa_r+0x67a>
 8007614:	f018 0f01 	tst.w	r8, #1
 8007618:	d10f      	bne.n	800763a <_dtoa_r+0x69a>
 800761a:	9904      	ldr	r1, [sp, #16]
 800761c:	4620      	mov	r0, r4
 800761e:	f000 fac1 	bl	8007ba4 <_Bfree>
 8007622:	2300      	movs	r3, #0
 8007624:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007626:	702b      	strb	r3, [r5, #0]
 8007628:	f10a 0301 	add.w	r3, sl, #1
 800762c:	6013      	str	r3, [r2, #0]
 800762e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007630:	2b00      	cmp	r3, #0
 8007632:	f000 8241 	beq.w	8007ab8 <_dtoa_r+0xb18>
 8007636:	601d      	str	r5, [r3, #0]
 8007638:	e23e      	b.n	8007ab8 <_dtoa_r+0xb18>
 800763a:	f8cd a020 	str.w	sl, [sp, #32]
 800763e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007642:	2a39      	cmp	r2, #57	; 0x39
 8007644:	f105 33ff 	add.w	r3, r5, #4294967295
 8007648:	d108      	bne.n	800765c <_dtoa_r+0x6bc>
 800764a:	459b      	cmp	fp, r3
 800764c:	d10a      	bne.n	8007664 <_dtoa_r+0x6c4>
 800764e:	9b08      	ldr	r3, [sp, #32]
 8007650:	3301      	adds	r3, #1
 8007652:	9308      	str	r3, [sp, #32]
 8007654:	2330      	movs	r3, #48	; 0x30
 8007656:	f88b 3000 	strb.w	r3, [fp]
 800765a:	465b      	mov	r3, fp
 800765c:	781a      	ldrb	r2, [r3, #0]
 800765e:	3201      	adds	r2, #1
 8007660:	701a      	strb	r2, [r3, #0]
 8007662:	e78c      	b.n	800757e <_dtoa_r+0x5de>
 8007664:	461d      	mov	r5, r3
 8007666:	e7ea      	b.n	800763e <_dtoa_r+0x69e>
 8007668:	2200      	movs	r2, #0
 800766a:	4b9b      	ldr	r3, [pc, #620]	; (80078d8 <_dtoa_r+0x938>)
 800766c:	f7f8 ffcc 	bl	8000608 <__aeabi_dmul>
 8007670:	2200      	movs	r2, #0
 8007672:	2300      	movs	r3, #0
 8007674:	4606      	mov	r6, r0
 8007676:	460f      	mov	r7, r1
 8007678:	f7f9 fa2e 	bl	8000ad8 <__aeabi_dcmpeq>
 800767c:	2800      	cmp	r0, #0
 800767e:	d09a      	beq.n	80075b6 <_dtoa_r+0x616>
 8007680:	e7cb      	b.n	800761a <_dtoa_r+0x67a>
 8007682:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007684:	2a00      	cmp	r2, #0
 8007686:	f000 808b 	beq.w	80077a0 <_dtoa_r+0x800>
 800768a:	9a06      	ldr	r2, [sp, #24]
 800768c:	2a01      	cmp	r2, #1
 800768e:	dc6e      	bgt.n	800776e <_dtoa_r+0x7ce>
 8007690:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007692:	2a00      	cmp	r2, #0
 8007694:	d067      	beq.n	8007766 <_dtoa_r+0x7c6>
 8007696:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800769a:	9f07      	ldr	r7, [sp, #28]
 800769c:	9d05      	ldr	r5, [sp, #20]
 800769e:	9a05      	ldr	r2, [sp, #20]
 80076a0:	2101      	movs	r1, #1
 80076a2:	441a      	add	r2, r3
 80076a4:	4620      	mov	r0, r4
 80076a6:	9205      	str	r2, [sp, #20]
 80076a8:	4498      	add	r8, r3
 80076aa:	f000 fb1b 	bl	8007ce4 <__i2b>
 80076ae:	4606      	mov	r6, r0
 80076b0:	2d00      	cmp	r5, #0
 80076b2:	dd0c      	ble.n	80076ce <_dtoa_r+0x72e>
 80076b4:	f1b8 0f00 	cmp.w	r8, #0
 80076b8:	dd09      	ble.n	80076ce <_dtoa_r+0x72e>
 80076ba:	4545      	cmp	r5, r8
 80076bc:	9a05      	ldr	r2, [sp, #20]
 80076be:	462b      	mov	r3, r5
 80076c0:	bfa8      	it	ge
 80076c2:	4643      	movge	r3, r8
 80076c4:	1ad2      	subs	r2, r2, r3
 80076c6:	9205      	str	r2, [sp, #20]
 80076c8:	1aed      	subs	r5, r5, r3
 80076ca:	eba8 0803 	sub.w	r8, r8, r3
 80076ce:	9b07      	ldr	r3, [sp, #28]
 80076d0:	b1eb      	cbz	r3, 800770e <_dtoa_r+0x76e>
 80076d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d067      	beq.n	80077a8 <_dtoa_r+0x808>
 80076d8:	b18f      	cbz	r7, 80076fe <_dtoa_r+0x75e>
 80076da:	4631      	mov	r1, r6
 80076dc:	463a      	mov	r2, r7
 80076de:	4620      	mov	r0, r4
 80076e0:	f000 fba0 	bl	8007e24 <__pow5mult>
 80076e4:	9a04      	ldr	r2, [sp, #16]
 80076e6:	4601      	mov	r1, r0
 80076e8:	4606      	mov	r6, r0
 80076ea:	4620      	mov	r0, r4
 80076ec:	f000 fb03 	bl	8007cf6 <__multiply>
 80076f0:	9904      	ldr	r1, [sp, #16]
 80076f2:	9008      	str	r0, [sp, #32]
 80076f4:	4620      	mov	r0, r4
 80076f6:	f000 fa55 	bl	8007ba4 <_Bfree>
 80076fa:	9b08      	ldr	r3, [sp, #32]
 80076fc:	9304      	str	r3, [sp, #16]
 80076fe:	9b07      	ldr	r3, [sp, #28]
 8007700:	1bda      	subs	r2, r3, r7
 8007702:	d004      	beq.n	800770e <_dtoa_r+0x76e>
 8007704:	9904      	ldr	r1, [sp, #16]
 8007706:	4620      	mov	r0, r4
 8007708:	f000 fb8c 	bl	8007e24 <__pow5mult>
 800770c:	9004      	str	r0, [sp, #16]
 800770e:	2101      	movs	r1, #1
 8007710:	4620      	mov	r0, r4
 8007712:	f000 fae7 	bl	8007ce4 <__i2b>
 8007716:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007718:	4607      	mov	r7, r0
 800771a:	2b00      	cmp	r3, #0
 800771c:	f000 81d0 	beq.w	8007ac0 <_dtoa_r+0xb20>
 8007720:	461a      	mov	r2, r3
 8007722:	4601      	mov	r1, r0
 8007724:	4620      	mov	r0, r4
 8007726:	f000 fb7d 	bl	8007e24 <__pow5mult>
 800772a:	9b06      	ldr	r3, [sp, #24]
 800772c:	2b01      	cmp	r3, #1
 800772e:	4607      	mov	r7, r0
 8007730:	dc40      	bgt.n	80077b4 <_dtoa_r+0x814>
 8007732:	9b00      	ldr	r3, [sp, #0]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d139      	bne.n	80077ac <_dtoa_r+0x80c>
 8007738:	9b01      	ldr	r3, [sp, #4]
 800773a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800773e:	2b00      	cmp	r3, #0
 8007740:	d136      	bne.n	80077b0 <_dtoa_r+0x810>
 8007742:	9b01      	ldr	r3, [sp, #4]
 8007744:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007748:	0d1b      	lsrs	r3, r3, #20
 800774a:	051b      	lsls	r3, r3, #20
 800774c:	b12b      	cbz	r3, 800775a <_dtoa_r+0x7ba>
 800774e:	9b05      	ldr	r3, [sp, #20]
 8007750:	3301      	adds	r3, #1
 8007752:	9305      	str	r3, [sp, #20]
 8007754:	f108 0801 	add.w	r8, r8, #1
 8007758:	2301      	movs	r3, #1
 800775a:	9307      	str	r3, [sp, #28]
 800775c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800775e:	2b00      	cmp	r3, #0
 8007760:	d12a      	bne.n	80077b8 <_dtoa_r+0x818>
 8007762:	2001      	movs	r0, #1
 8007764:	e030      	b.n	80077c8 <_dtoa_r+0x828>
 8007766:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007768:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800776c:	e795      	b.n	800769a <_dtoa_r+0x6fa>
 800776e:	9b07      	ldr	r3, [sp, #28]
 8007770:	f109 37ff 	add.w	r7, r9, #4294967295
 8007774:	42bb      	cmp	r3, r7
 8007776:	bfbf      	itttt	lt
 8007778:	9b07      	ldrlt	r3, [sp, #28]
 800777a:	9707      	strlt	r7, [sp, #28]
 800777c:	1afa      	sublt	r2, r7, r3
 800777e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8007780:	bfbb      	ittet	lt
 8007782:	189b      	addlt	r3, r3, r2
 8007784:	930e      	strlt	r3, [sp, #56]	; 0x38
 8007786:	1bdf      	subge	r7, r3, r7
 8007788:	2700      	movlt	r7, #0
 800778a:	f1b9 0f00 	cmp.w	r9, #0
 800778e:	bfb5      	itete	lt
 8007790:	9b05      	ldrlt	r3, [sp, #20]
 8007792:	9d05      	ldrge	r5, [sp, #20]
 8007794:	eba3 0509 	sublt.w	r5, r3, r9
 8007798:	464b      	movge	r3, r9
 800779a:	bfb8      	it	lt
 800779c:	2300      	movlt	r3, #0
 800779e:	e77e      	b.n	800769e <_dtoa_r+0x6fe>
 80077a0:	9f07      	ldr	r7, [sp, #28]
 80077a2:	9d05      	ldr	r5, [sp, #20]
 80077a4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80077a6:	e783      	b.n	80076b0 <_dtoa_r+0x710>
 80077a8:	9a07      	ldr	r2, [sp, #28]
 80077aa:	e7ab      	b.n	8007704 <_dtoa_r+0x764>
 80077ac:	2300      	movs	r3, #0
 80077ae:	e7d4      	b.n	800775a <_dtoa_r+0x7ba>
 80077b0:	9b00      	ldr	r3, [sp, #0]
 80077b2:	e7d2      	b.n	800775a <_dtoa_r+0x7ba>
 80077b4:	2300      	movs	r3, #0
 80077b6:	9307      	str	r3, [sp, #28]
 80077b8:	693b      	ldr	r3, [r7, #16]
 80077ba:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80077be:	6918      	ldr	r0, [r3, #16]
 80077c0:	f000 fa42 	bl	8007c48 <__hi0bits>
 80077c4:	f1c0 0020 	rsb	r0, r0, #32
 80077c8:	4440      	add	r0, r8
 80077ca:	f010 001f 	ands.w	r0, r0, #31
 80077ce:	d047      	beq.n	8007860 <_dtoa_r+0x8c0>
 80077d0:	f1c0 0320 	rsb	r3, r0, #32
 80077d4:	2b04      	cmp	r3, #4
 80077d6:	dd3b      	ble.n	8007850 <_dtoa_r+0x8b0>
 80077d8:	9b05      	ldr	r3, [sp, #20]
 80077da:	f1c0 001c 	rsb	r0, r0, #28
 80077de:	4403      	add	r3, r0
 80077e0:	9305      	str	r3, [sp, #20]
 80077e2:	4405      	add	r5, r0
 80077e4:	4480      	add	r8, r0
 80077e6:	9b05      	ldr	r3, [sp, #20]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	dd05      	ble.n	80077f8 <_dtoa_r+0x858>
 80077ec:	461a      	mov	r2, r3
 80077ee:	9904      	ldr	r1, [sp, #16]
 80077f0:	4620      	mov	r0, r4
 80077f2:	f000 fb65 	bl	8007ec0 <__lshift>
 80077f6:	9004      	str	r0, [sp, #16]
 80077f8:	f1b8 0f00 	cmp.w	r8, #0
 80077fc:	dd05      	ble.n	800780a <_dtoa_r+0x86a>
 80077fe:	4639      	mov	r1, r7
 8007800:	4642      	mov	r2, r8
 8007802:	4620      	mov	r0, r4
 8007804:	f000 fb5c 	bl	8007ec0 <__lshift>
 8007808:	4607      	mov	r7, r0
 800780a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800780c:	b353      	cbz	r3, 8007864 <_dtoa_r+0x8c4>
 800780e:	4639      	mov	r1, r7
 8007810:	9804      	ldr	r0, [sp, #16]
 8007812:	f000 fba9 	bl	8007f68 <__mcmp>
 8007816:	2800      	cmp	r0, #0
 8007818:	da24      	bge.n	8007864 <_dtoa_r+0x8c4>
 800781a:	2300      	movs	r3, #0
 800781c:	220a      	movs	r2, #10
 800781e:	9904      	ldr	r1, [sp, #16]
 8007820:	4620      	mov	r0, r4
 8007822:	f000 f9d6 	bl	8007bd2 <__multadd>
 8007826:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007828:	9004      	str	r0, [sp, #16]
 800782a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800782e:	2b00      	cmp	r3, #0
 8007830:	f000 814d 	beq.w	8007ace <_dtoa_r+0xb2e>
 8007834:	2300      	movs	r3, #0
 8007836:	4631      	mov	r1, r6
 8007838:	220a      	movs	r2, #10
 800783a:	4620      	mov	r0, r4
 800783c:	f000 f9c9 	bl	8007bd2 <__multadd>
 8007840:	9b02      	ldr	r3, [sp, #8]
 8007842:	2b00      	cmp	r3, #0
 8007844:	4606      	mov	r6, r0
 8007846:	dc4f      	bgt.n	80078e8 <_dtoa_r+0x948>
 8007848:	9b06      	ldr	r3, [sp, #24]
 800784a:	2b02      	cmp	r3, #2
 800784c:	dd4c      	ble.n	80078e8 <_dtoa_r+0x948>
 800784e:	e011      	b.n	8007874 <_dtoa_r+0x8d4>
 8007850:	d0c9      	beq.n	80077e6 <_dtoa_r+0x846>
 8007852:	9a05      	ldr	r2, [sp, #20]
 8007854:	331c      	adds	r3, #28
 8007856:	441a      	add	r2, r3
 8007858:	9205      	str	r2, [sp, #20]
 800785a:	441d      	add	r5, r3
 800785c:	4498      	add	r8, r3
 800785e:	e7c2      	b.n	80077e6 <_dtoa_r+0x846>
 8007860:	4603      	mov	r3, r0
 8007862:	e7f6      	b.n	8007852 <_dtoa_r+0x8b2>
 8007864:	f1b9 0f00 	cmp.w	r9, #0
 8007868:	dc38      	bgt.n	80078dc <_dtoa_r+0x93c>
 800786a:	9b06      	ldr	r3, [sp, #24]
 800786c:	2b02      	cmp	r3, #2
 800786e:	dd35      	ble.n	80078dc <_dtoa_r+0x93c>
 8007870:	f8cd 9008 	str.w	r9, [sp, #8]
 8007874:	9b02      	ldr	r3, [sp, #8]
 8007876:	b963      	cbnz	r3, 8007892 <_dtoa_r+0x8f2>
 8007878:	4639      	mov	r1, r7
 800787a:	2205      	movs	r2, #5
 800787c:	4620      	mov	r0, r4
 800787e:	f000 f9a8 	bl	8007bd2 <__multadd>
 8007882:	4601      	mov	r1, r0
 8007884:	4607      	mov	r7, r0
 8007886:	9804      	ldr	r0, [sp, #16]
 8007888:	f000 fb6e 	bl	8007f68 <__mcmp>
 800788c:	2800      	cmp	r0, #0
 800788e:	f73f adcc 	bgt.w	800742a <_dtoa_r+0x48a>
 8007892:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007894:	465d      	mov	r5, fp
 8007896:	ea6f 0a03 	mvn.w	sl, r3
 800789a:	f04f 0900 	mov.w	r9, #0
 800789e:	4639      	mov	r1, r7
 80078a0:	4620      	mov	r0, r4
 80078a2:	f000 f97f 	bl	8007ba4 <_Bfree>
 80078a6:	2e00      	cmp	r6, #0
 80078a8:	f43f aeb7 	beq.w	800761a <_dtoa_r+0x67a>
 80078ac:	f1b9 0f00 	cmp.w	r9, #0
 80078b0:	d005      	beq.n	80078be <_dtoa_r+0x91e>
 80078b2:	45b1      	cmp	r9, r6
 80078b4:	d003      	beq.n	80078be <_dtoa_r+0x91e>
 80078b6:	4649      	mov	r1, r9
 80078b8:	4620      	mov	r0, r4
 80078ba:	f000 f973 	bl	8007ba4 <_Bfree>
 80078be:	4631      	mov	r1, r6
 80078c0:	4620      	mov	r0, r4
 80078c2:	f000 f96f 	bl	8007ba4 <_Bfree>
 80078c6:	e6a8      	b.n	800761a <_dtoa_r+0x67a>
 80078c8:	2700      	movs	r7, #0
 80078ca:	463e      	mov	r6, r7
 80078cc:	e7e1      	b.n	8007892 <_dtoa_r+0x8f2>
 80078ce:	f8dd a020 	ldr.w	sl, [sp, #32]
 80078d2:	463e      	mov	r6, r7
 80078d4:	e5a9      	b.n	800742a <_dtoa_r+0x48a>
 80078d6:	bf00      	nop
 80078d8:	40240000 	.word	0x40240000
 80078dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078de:	f8cd 9008 	str.w	r9, [sp, #8]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	f000 80fa 	beq.w	8007adc <_dtoa_r+0xb3c>
 80078e8:	2d00      	cmp	r5, #0
 80078ea:	dd05      	ble.n	80078f8 <_dtoa_r+0x958>
 80078ec:	4631      	mov	r1, r6
 80078ee:	462a      	mov	r2, r5
 80078f0:	4620      	mov	r0, r4
 80078f2:	f000 fae5 	bl	8007ec0 <__lshift>
 80078f6:	4606      	mov	r6, r0
 80078f8:	9b07      	ldr	r3, [sp, #28]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d04c      	beq.n	8007998 <_dtoa_r+0x9f8>
 80078fe:	6871      	ldr	r1, [r6, #4]
 8007900:	4620      	mov	r0, r4
 8007902:	f000 f91b 	bl	8007b3c <_Balloc>
 8007906:	6932      	ldr	r2, [r6, #16]
 8007908:	3202      	adds	r2, #2
 800790a:	4605      	mov	r5, r0
 800790c:	0092      	lsls	r2, r2, #2
 800790e:	f106 010c 	add.w	r1, r6, #12
 8007912:	300c      	adds	r0, #12
 8007914:	f7fe fdb9 	bl	800648a <memcpy>
 8007918:	2201      	movs	r2, #1
 800791a:	4629      	mov	r1, r5
 800791c:	4620      	mov	r0, r4
 800791e:	f000 facf 	bl	8007ec0 <__lshift>
 8007922:	9b00      	ldr	r3, [sp, #0]
 8007924:	f8cd b014 	str.w	fp, [sp, #20]
 8007928:	f003 0301 	and.w	r3, r3, #1
 800792c:	46b1      	mov	r9, r6
 800792e:	9307      	str	r3, [sp, #28]
 8007930:	4606      	mov	r6, r0
 8007932:	4639      	mov	r1, r7
 8007934:	9804      	ldr	r0, [sp, #16]
 8007936:	f7ff faa7 	bl	8006e88 <quorem>
 800793a:	4649      	mov	r1, r9
 800793c:	4605      	mov	r5, r0
 800793e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8007942:	9804      	ldr	r0, [sp, #16]
 8007944:	f000 fb10 	bl	8007f68 <__mcmp>
 8007948:	4632      	mov	r2, r6
 800794a:	9000      	str	r0, [sp, #0]
 800794c:	4639      	mov	r1, r7
 800794e:	4620      	mov	r0, r4
 8007950:	f000 fb24 	bl	8007f9c <__mdiff>
 8007954:	68c3      	ldr	r3, [r0, #12]
 8007956:	4602      	mov	r2, r0
 8007958:	bb03      	cbnz	r3, 800799c <_dtoa_r+0x9fc>
 800795a:	4601      	mov	r1, r0
 800795c:	9008      	str	r0, [sp, #32]
 800795e:	9804      	ldr	r0, [sp, #16]
 8007960:	f000 fb02 	bl	8007f68 <__mcmp>
 8007964:	9a08      	ldr	r2, [sp, #32]
 8007966:	4603      	mov	r3, r0
 8007968:	4611      	mov	r1, r2
 800796a:	4620      	mov	r0, r4
 800796c:	9308      	str	r3, [sp, #32]
 800796e:	f000 f919 	bl	8007ba4 <_Bfree>
 8007972:	9b08      	ldr	r3, [sp, #32]
 8007974:	b9a3      	cbnz	r3, 80079a0 <_dtoa_r+0xa00>
 8007976:	9a06      	ldr	r2, [sp, #24]
 8007978:	b992      	cbnz	r2, 80079a0 <_dtoa_r+0xa00>
 800797a:	9a07      	ldr	r2, [sp, #28]
 800797c:	b982      	cbnz	r2, 80079a0 <_dtoa_r+0xa00>
 800797e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007982:	d029      	beq.n	80079d8 <_dtoa_r+0xa38>
 8007984:	9b00      	ldr	r3, [sp, #0]
 8007986:	2b00      	cmp	r3, #0
 8007988:	dd01      	ble.n	800798e <_dtoa_r+0x9ee>
 800798a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800798e:	9b05      	ldr	r3, [sp, #20]
 8007990:	1c5d      	adds	r5, r3, #1
 8007992:	f883 8000 	strb.w	r8, [r3]
 8007996:	e782      	b.n	800789e <_dtoa_r+0x8fe>
 8007998:	4630      	mov	r0, r6
 800799a:	e7c2      	b.n	8007922 <_dtoa_r+0x982>
 800799c:	2301      	movs	r3, #1
 800799e:	e7e3      	b.n	8007968 <_dtoa_r+0x9c8>
 80079a0:	9a00      	ldr	r2, [sp, #0]
 80079a2:	2a00      	cmp	r2, #0
 80079a4:	db04      	blt.n	80079b0 <_dtoa_r+0xa10>
 80079a6:	d125      	bne.n	80079f4 <_dtoa_r+0xa54>
 80079a8:	9a06      	ldr	r2, [sp, #24]
 80079aa:	bb1a      	cbnz	r2, 80079f4 <_dtoa_r+0xa54>
 80079ac:	9a07      	ldr	r2, [sp, #28]
 80079ae:	bb0a      	cbnz	r2, 80079f4 <_dtoa_r+0xa54>
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	ddec      	ble.n	800798e <_dtoa_r+0x9ee>
 80079b4:	2201      	movs	r2, #1
 80079b6:	9904      	ldr	r1, [sp, #16]
 80079b8:	4620      	mov	r0, r4
 80079ba:	f000 fa81 	bl	8007ec0 <__lshift>
 80079be:	4639      	mov	r1, r7
 80079c0:	9004      	str	r0, [sp, #16]
 80079c2:	f000 fad1 	bl	8007f68 <__mcmp>
 80079c6:	2800      	cmp	r0, #0
 80079c8:	dc03      	bgt.n	80079d2 <_dtoa_r+0xa32>
 80079ca:	d1e0      	bne.n	800798e <_dtoa_r+0x9ee>
 80079cc:	f018 0f01 	tst.w	r8, #1
 80079d0:	d0dd      	beq.n	800798e <_dtoa_r+0x9ee>
 80079d2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80079d6:	d1d8      	bne.n	800798a <_dtoa_r+0x9ea>
 80079d8:	9b05      	ldr	r3, [sp, #20]
 80079da:	9a05      	ldr	r2, [sp, #20]
 80079dc:	1c5d      	adds	r5, r3, #1
 80079de:	2339      	movs	r3, #57	; 0x39
 80079e0:	7013      	strb	r3, [r2, #0]
 80079e2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80079e6:	2b39      	cmp	r3, #57	; 0x39
 80079e8:	f105 32ff 	add.w	r2, r5, #4294967295
 80079ec:	d04f      	beq.n	8007a8e <_dtoa_r+0xaee>
 80079ee:	3301      	adds	r3, #1
 80079f0:	7013      	strb	r3, [r2, #0]
 80079f2:	e754      	b.n	800789e <_dtoa_r+0x8fe>
 80079f4:	9a05      	ldr	r2, [sp, #20]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	f102 0501 	add.w	r5, r2, #1
 80079fc:	dd06      	ble.n	8007a0c <_dtoa_r+0xa6c>
 80079fe:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007a02:	d0e9      	beq.n	80079d8 <_dtoa_r+0xa38>
 8007a04:	f108 0801 	add.w	r8, r8, #1
 8007a08:	9b05      	ldr	r3, [sp, #20]
 8007a0a:	e7c2      	b.n	8007992 <_dtoa_r+0x9f2>
 8007a0c:	9a02      	ldr	r2, [sp, #8]
 8007a0e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8007a12:	eba5 030b 	sub.w	r3, r5, fp
 8007a16:	4293      	cmp	r3, r2
 8007a18:	d021      	beq.n	8007a5e <_dtoa_r+0xabe>
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	220a      	movs	r2, #10
 8007a1e:	9904      	ldr	r1, [sp, #16]
 8007a20:	4620      	mov	r0, r4
 8007a22:	f000 f8d6 	bl	8007bd2 <__multadd>
 8007a26:	45b1      	cmp	r9, r6
 8007a28:	9004      	str	r0, [sp, #16]
 8007a2a:	f04f 0300 	mov.w	r3, #0
 8007a2e:	f04f 020a 	mov.w	r2, #10
 8007a32:	4649      	mov	r1, r9
 8007a34:	4620      	mov	r0, r4
 8007a36:	d105      	bne.n	8007a44 <_dtoa_r+0xaa4>
 8007a38:	f000 f8cb 	bl	8007bd2 <__multadd>
 8007a3c:	4681      	mov	r9, r0
 8007a3e:	4606      	mov	r6, r0
 8007a40:	9505      	str	r5, [sp, #20]
 8007a42:	e776      	b.n	8007932 <_dtoa_r+0x992>
 8007a44:	f000 f8c5 	bl	8007bd2 <__multadd>
 8007a48:	4631      	mov	r1, r6
 8007a4a:	4681      	mov	r9, r0
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	220a      	movs	r2, #10
 8007a50:	4620      	mov	r0, r4
 8007a52:	f000 f8be 	bl	8007bd2 <__multadd>
 8007a56:	4606      	mov	r6, r0
 8007a58:	e7f2      	b.n	8007a40 <_dtoa_r+0xaa0>
 8007a5a:	f04f 0900 	mov.w	r9, #0
 8007a5e:	2201      	movs	r2, #1
 8007a60:	9904      	ldr	r1, [sp, #16]
 8007a62:	4620      	mov	r0, r4
 8007a64:	f000 fa2c 	bl	8007ec0 <__lshift>
 8007a68:	4639      	mov	r1, r7
 8007a6a:	9004      	str	r0, [sp, #16]
 8007a6c:	f000 fa7c 	bl	8007f68 <__mcmp>
 8007a70:	2800      	cmp	r0, #0
 8007a72:	dcb6      	bgt.n	80079e2 <_dtoa_r+0xa42>
 8007a74:	d102      	bne.n	8007a7c <_dtoa_r+0xadc>
 8007a76:	f018 0f01 	tst.w	r8, #1
 8007a7a:	d1b2      	bne.n	80079e2 <_dtoa_r+0xa42>
 8007a7c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007a80:	2b30      	cmp	r3, #48	; 0x30
 8007a82:	f105 32ff 	add.w	r2, r5, #4294967295
 8007a86:	f47f af0a 	bne.w	800789e <_dtoa_r+0x8fe>
 8007a8a:	4615      	mov	r5, r2
 8007a8c:	e7f6      	b.n	8007a7c <_dtoa_r+0xadc>
 8007a8e:	4593      	cmp	fp, r2
 8007a90:	d105      	bne.n	8007a9e <_dtoa_r+0xafe>
 8007a92:	2331      	movs	r3, #49	; 0x31
 8007a94:	f10a 0a01 	add.w	sl, sl, #1
 8007a98:	f88b 3000 	strb.w	r3, [fp]
 8007a9c:	e6ff      	b.n	800789e <_dtoa_r+0x8fe>
 8007a9e:	4615      	mov	r5, r2
 8007aa0:	e79f      	b.n	80079e2 <_dtoa_r+0xa42>
 8007aa2:	f8df b064 	ldr.w	fp, [pc, #100]	; 8007b08 <_dtoa_r+0xb68>
 8007aa6:	e007      	b.n	8007ab8 <_dtoa_r+0xb18>
 8007aa8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007aaa:	f8df b060 	ldr.w	fp, [pc, #96]	; 8007b0c <_dtoa_r+0xb6c>
 8007aae:	b11b      	cbz	r3, 8007ab8 <_dtoa_r+0xb18>
 8007ab0:	f10b 0308 	add.w	r3, fp, #8
 8007ab4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007ab6:	6013      	str	r3, [r2, #0]
 8007ab8:	4658      	mov	r0, fp
 8007aba:	b017      	add	sp, #92	; 0x5c
 8007abc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ac0:	9b06      	ldr	r3, [sp, #24]
 8007ac2:	2b01      	cmp	r3, #1
 8007ac4:	f77f ae35 	ble.w	8007732 <_dtoa_r+0x792>
 8007ac8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007aca:	9307      	str	r3, [sp, #28]
 8007acc:	e649      	b.n	8007762 <_dtoa_r+0x7c2>
 8007ace:	9b02      	ldr	r3, [sp, #8]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	dc03      	bgt.n	8007adc <_dtoa_r+0xb3c>
 8007ad4:	9b06      	ldr	r3, [sp, #24]
 8007ad6:	2b02      	cmp	r3, #2
 8007ad8:	f73f aecc 	bgt.w	8007874 <_dtoa_r+0x8d4>
 8007adc:	465d      	mov	r5, fp
 8007ade:	4639      	mov	r1, r7
 8007ae0:	9804      	ldr	r0, [sp, #16]
 8007ae2:	f7ff f9d1 	bl	8006e88 <quorem>
 8007ae6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8007aea:	f805 8b01 	strb.w	r8, [r5], #1
 8007aee:	9a02      	ldr	r2, [sp, #8]
 8007af0:	eba5 030b 	sub.w	r3, r5, fp
 8007af4:	429a      	cmp	r2, r3
 8007af6:	ddb0      	ble.n	8007a5a <_dtoa_r+0xaba>
 8007af8:	2300      	movs	r3, #0
 8007afa:	220a      	movs	r2, #10
 8007afc:	9904      	ldr	r1, [sp, #16]
 8007afe:	4620      	mov	r0, r4
 8007b00:	f000 f867 	bl	8007bd2 <__multadd>
 8007b04:	9004      	str	r0, [sp, #16]
 8007b06:	e7ea      	b.n	8007ade <_dtoa_r+0xb3e>
 8007b08:	08008830 	.word	0x08008830
 8007b0c:	08008879 	.word	0x08008879

08007b10 <_localeconv_r>:
 8007b10:	4b04      	ldr	r3, [pc, #16]	; (8007b24 <_localeconv_r+0x14>)
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	6a18      	ldr	r0, [r3, #32]
 8007b16:	4b04      	ldr	r3, [pc, #16]	; (8007b28 <_localeconv_r+0x18>)
 8007b18:	2800      	cmp	r0, #0
 8007b1a:	bf08      	it	eq
 8007b1c:	4618      	moveq	r0, r3
 8007b1e:	30f0      	adds	r0, #240	; 0xf0
 8007b20:	4770      	bx	lr
 8007b22:	bf00      	nop
 8007b24:	200000e8 	.word	0x200000e8
 8007b28:	2000014c 	.word	0x2000014c

08007b2c <malloc>:
 8007b2c:	4b02      	ldr	r3, [pc, #8]	; (8007b38 <malloc+0xc>)
 8007b2e:	4601      	mov	r1, r0
 8007b30:	6818      	ldr	r0, [r3, #0]
 8007b32:	f000 bb3b 	b.w	80081ac <_malloc_r>
 8007b36:	bf00      	nop
 8007b38:	200000e8 	.word	0x200000e8

08007b3c <_Balloc>:
 8007b3c:	b570      	push	{r4, r5, r6, lr}
 8007b3e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007b40:	4604      	mov	r4, r0
 8007b42:	460e      	mov	r6, r1
 8007b44:	b93d      	cbnz	r5, 8007b56 <_Balloc+0x1a>
 8007b46:	2010      	movs	r0, #16
 8007b48:	f7ff fff0 	bl	8007b2c <malloc>
 8007b4c:	6260      	str	r0, [r4, #36]	; 0x24
 8007b4e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007b52:	6005      	str	r5, [r0, #0]
 8007b54:	60c5      	str	r5, [r0, #12]
 8007b56:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8007b58:	68eb      	ldr	r3, [r5, #12]
 8007b5a:	b183      	cbz	r3, 8007b7e <_Balloc+0x42>
 8007b5c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b5e:	68db      	ldr	r3, [r3, #12]
 8007b60:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8007b64:	b9b8      	cbnz	r0, 8007b96 <_Balloc+0x5a>
 8007b66:	2101      	movs	r1, #1
 8007b68:	fa01 f506 	lsl.w	r5, r1, r6
 8007b6c:	1d6a      	adds	r2, r5, #5
 8007b6e:	0092      	lsls	r2, r2, #2
 8007b70:	4620      	mov	r0, r4
 8007b72:	f000 fabf 	bl	80080f4 <_calloc_r>
 8007b76:	b160      	cbz	r0, 8007b92 <_Balloc+0x56>
 8007b78:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8007b7c:	e00e      	b.n	8007b9c <_Balloc+0x60>
 8007b7e:	2221      	movs	r2, #33	; 0x21
 8007b80:	2104      	movs	r1, #4
 8007b82:	4620      	mov	r0, r4
 8007b84:	f000 fab6 	bl	80080f4 <_calloc_r>
 8007b88:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b8a:	60e8      	str	r0, [r5, #12]
 8007b8c:	68db      	ldr	r3, [r3, #12]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d1e4      	bne.n	8007b5c <_Balloc+0x20>
 8007b92:	2000      	movs	r0, #0
 8007b94:	bd70      	pop	{r4, r5, r6, pc}
 8007b96:	6802      	ldr	r2, [r0, #0]
 8007b98:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007ba2:	e7f7      	b.n	8007b94 <_Balloc+0x58>

08007ba4 <_Bfree>:
 8007ba4:	b570      	push	{r4, r5, r6, lr}
 8007ba6:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007ba8:	4606      	mov	r6, r0
 8007baa:	460d      	mov	r5, r1
 8007bac:	b93c      	cbnz	r4, 8007bbe <_Bfree+0x1a>
 8007bae:	2010      	movs	r0, #16
 8007bb0:	f7ff ffbc 	bl	8007b2c <malloc>
 8007bb4:	6270      	str	r0, [r6, #36]	; 0x24
 8007bb6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007bba:	6004      	str	r4, [r0, #0]
 8007bbc:	60c4      	str	r4, [r0, #12]
 8007bbe:	b13d      	cbz	r5, 8007bd0 <_Bfree+0x2c>
 8007bc0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007bc2:	686a      	ldr	r2, [r5, #4]
 8007bc4:	68db      	ldr	r3, [r3, #12]
 8007bc6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007bca:	6029      	str	r1, [r5, #0]
 8007bcc:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8007bd0:	bd70      	pop	{r4, r5, r6, pc}

08007bd2 <__multadd>:
 8007bd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bd6:	690d      	ldr	r5, [r1, #16]
 8007bd8:	461f      	mov	r7, r3
 8007bda:	4606      	mov	r6, r0
 8007bdc:	460c      	mov	r4, r1
 8007bde:	f101 0c14 	add.w	ip, r1, #20
 8007be2:	2300      	movs	r3, #0
 8007be4:	f8dc 0000 	ldr.w	r0, [ip]
 8007be8:	b281      	uxth	r1, r0
 8007bea:	fb02 7101 	mla	r1, r2, r1, r7
 8007bee:	0c0f      	lsrs	r7, r1, #16
 8007bf0:	0c00      	lsrs	r0, r0, #16
 8007bf2:	fb02 7000 	mla	r0, r2, r0, r7
 8007bf6:	b289      	uxth	r1, r1
 8007bf8:	3301      	adds	r3, #1
 8007bfa:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8007bfe:	429d      	cmp	r5, r3
 8007c00:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8007c04:	f84c 1b04 	str.w	r1, [ip], #4
 8007c08:	dcec      	bgt.n	8007be4 <__multadd+0x12>
 8007c0a:	b1d7      	cbz	r7, 8007c42 <__multadd+0x70>
 8007c0c:	68a3      	ldr	r3, [r4, #8]
 8007c0e:	42ab      	cmp	r3, r5
 8007c10:	dc12      	bgt.n	8007c38 <__multadd+0x66>
 8007c12:	6861      	ldr	r1, [r4, #4]
 8007c14:	4630      	mov	r0, r6
 8007c16:	3101      	adds	r1, #1
 8007c18:	f7ff ff90 	bl	8007b3c <_Balloc>
 8007c1c:	6922      	ldr	r2, [r4, #16]
 8007c1e:	3202      	adds	r2, #2
 8007c20:	f104 010c 	add.w	r1, r4, #12
 8007c24:	4680      	mov	r8, r0
 8007c26:	0092      	lsls	r2, r2, #2
 8007c28:	300c      	adds	r0, #12
 8007c2a:	f7fe fc2e 	bl	800648a <memcpy>
 8007c2e:	4621      	mov	r1, r4
 8007c30:	4630      	mov	r0, r6
 8007c32:	f7ff ffb7 	bl	8007ba4 <_Bfree>
 8007c36:	4644      	mov	r4, r8
 8007c38:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007c3c:	3501      	adds	r5, #1
 8007c3e:	615f      	str	r7, [r3, #20]
 8007c40:	6125      	str	r5, [r4, #16]
 8007c42:	4620      	mov	r0, r4
 8007c44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007c48 <__hi0bits>:
 8007c48:	0c02      	lsrs	r2, r0, #16
 8007c4a:	0412      	lsls	r2, r2, #16
 8007c4c:	4603      	mov	r3, r0
 8007c4e:	b9b2      	cbnz	r2, 8007c7e <__hi0bits+0x36>
 8007c50:	0403      	lsls	r3, r0, #16
 8007c52:	2010      	movs	r0, #16
 8007c54:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007c58:	bf04      	itt	eq
 8007c5a:	021b      	lsleq	r3, r3, #8
 8007c5c:	3008      	addeq	r0, #8
 8007c5e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007c62:	bf04      	itt	eq
 8007c64:	011b      	lsleq	r3, r3, #4
 8007c66:	3004      	addeq	r0, #4
 8007c68:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007c6c:	bf04      	itt	eq
 8007c6e:	009b      	lsleq	r3, r3, #2
 8007c70:	3002      	addeq	r0, #2
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	db06      	blt.n	8007c84 <__hi0bits+0x3c>
 8007c76:	005b      	lsls	r3, r3, #1
 8007c78:	d503      	bpl.n	8007c82 <__hi0bits+0x3a>
 8007c7a:	3001      	adds	r0, #1
 8007c7c:	4770      	bx	lr
 8007c7e:	2000      	movs	r0, #0
 8007c80:	e7e8      	b.n	8007c54 <__hi0bits+0xc>
 8007c82:	2020      	movs	r0, #32
 8007c84:	4770      	bx	lr

08007c86 <__lo0bits>:
 8007c86:	6803      	ldr	r3, [r0, #0]
 8007c88:	f013 0207 	ands.w	r2, r3, #7
 8007c8c:	4601      	mov	r1, r0
 8007c8e:	d00b      	beq.n	8007ca8 <__lo0bits+0x22>
 8007c90:	07da      	lsls	r2, r3, #31
 8007c92:	d423      	bmi.n	8007cdc <__lo0bits+0x56>
 8007c94:	0798      	lsls	r0, r3, #30
 8007c96:	bf49      	itett	mi
 8007c98:	085b      	lsrmi	r3, r3, #1
 8007c9a:	089b      	lsrpl	r3, r3, #2
 8007c9c:	2001      	movmi	r0, #1
 8007c9e:	600b      	strmi	r3, [r1, #0]
 8007ca0:	bf5c      	itt	pl
 8007ca2:	600b      	strpl	r3, [r1, #0]
 8007ca4:	2002      	movpl	r0, #2
 8007ca6:	4770      	bx	lr
 8007ca8:	b298      	uxth	r0, r3
 8007caa:	b9a8      	cbnz	r0, 8007cd8 <__lo0bits+0x52>
 8007cac:	0c1b      	lsrs	r3, r3, #16
 8007cae:	2010      	movs	r0, #16
 8007cb0:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007cb4:	bf04      	itt	eq
 8007cb6:	0a1b      	lsreq	r3, r3, #8
 8007cb8:	3008      	addeq	r0, #8
 8007cba:	071a      	lsls	r2, r3, #28
 8007cbc:	bf04      	itt	eq
 8007cbe:	091b      	lsreq	r3, r3, #4
 8007cc0:	3004      	addeq	r0, #4
 8007cc2:	079a      	lsls	r2, r3, #30
 8007cc4:	bf04      	itt	eq
 8007cc6:	089b      	lsreq	r3, r3, #2
 8007cc8:	3002      	addeq	r0, #2
 8007cca:	07da      	lsls	r2, r3, #31
 8007ccc:	d402      	bmi.n	8007cd4 <__lo0bits+0x4e>
 8007cce:	085b      	lsrs	r3, r3, #1
 8007cd0:	d006      	beq.n	8007ce0 <__lo0bits+0x5a>
 8007cd2:	3001      	adds	r0, #1
 8007cd4:	600b      	str	r3, [r1, #0]
 8007cd6:	4770      	bx	lr
 8007cd8:	4610      	mov	r0, r2
 8007cda:	e7e9      	b.n	8007cb0 <__lo0bits+0x2a>
 8007cdc:	2000      	movs	r0, #0
 8007cde:	4770      	bx	lr
 8007ce0:	2020      	movs	r0, #32
 8007ce2:	4770      	bx	lr

08007ce4 <__i2b>:
 8007ce4:	b510      	push	{r4, lr}
 8007ce6:	460c      	mov	r4, r1
 8007ce8:	2101      	movs	r1, #1
 8007cea:	f7ff ff27 	bl	8007b3c <_Balloc>
 8007cee:	2201      	movs	r2, #1
 8007cf0:	6144      	str	r4, [r0, #20]
 8007cf2:	6102      	str	r2, [r0, #16]
 8007cf4:	bd10      	pop	{r4, pc}

08007cf6 <__multiply>:
 8007cf6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cfa:	4614      	mov	r4, r2
 8007cfc:	690a      	ldr	r2, [r1, #16]
 8007cfe:	6923      	ldr	r3, [r4, #16]
 8007d00:	429a      	cmp	r2, r3
 8007d02:	bfb8      	it	lt
 8007d04:	460b      	movlt	r3, r1
 8007d06:	4688      	mov	r8, r1
 8007d08:	bfbc      	itt	lt
 8007d0a:	46a0      	movlt	r8, r4
 8007d0c:	461c      	movlt	r4, r3
 8007d0e:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007d12:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007d16:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007d1a:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007d1e:	eb07 0609 	add.w	r6, r7, r9
 8007d22:	42b3      	cmp	r3, r6
 8007d24:	bfb8      	it	lt
 8007d26:	3101      	addlt	r1, #1
 8007d28:	f7ff ff08 	bl	8007b3c <_Balloc>
 8007d2c:	f100 0514 	add.w	r5, r0, #20
 8007d30:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8007d34:	462b      	mov	r3, r5
 8007d36:	2200      	movs	r2, #0
 8007d38:	4573      	cmp	r3, lr
 8007d3a:	d316      	bcc.n	8007d6a <__multiply+0x74>
 8007d3c:	f104 0214 	add.w	r2, r4, #20
 8007d40:	f108 0114 	add.w	r1, r8, #20
 8007d44:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8007d48:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8007d4c:	9300      	str	r3, [sp, #0]
 8007d4e:	9b00      	ldr	r3, [sp, #0]
 8007d50:	9201      	str	r2, [sp, #4]
 8007d52:	4293      	cmp	r3, r2
 8007d54:	d80c      	bhi.n	8007d70 <__multiply+0x7a>
 8007d56:	2e00      	cmp	r6, #0
 8007d58:	dd03      	ble.n	8007d62 <__multiply+0x6c>
 8007d5a:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d05d      	beq.n	8007e1e <__multiply+0x128>
 8007d62:	6106      	str	r6, [r0, #16]
 8007d64:	b003      	add	sp, #12
 8007d66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d6a:	f843 2b04 	str.w	r2, [r3], #4
 8007d6e:	e7e3      	b.n	8007d38 <__multiply+0x42>
 8007d70:	f8b2 b000 	ldrh.w	fp, [r2]
 8007d74:	f1bb 0f00 	cmp.w	fp, #0
 8007d78:	d023      	beq.n	8007dc2 <__multiply+0xcc>
 8007d7a:	4689      	mov	r9, r1
 8007d7c:	46ac      	mov	ip, r5
 8007d7e:	f04f 0800 	mov.w	r8, #0
 8007d82:	f859 4b04 	ldr.w	r4, [r9], #4
 8007d86:	f8dc a000 	ldr.w	sl, [ip]
 8007d8a:	b2a3      	uxth	r3, r4
 8007d8c:	fa1f fa8a 	uxth.w	sl, sl
 8007d90:	fb0b a303 	mla	r3, fp, r3, sl
 8007d94:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007d98:	f8dc 4000 	ldr.w	r4, [ip]
 8007d9c:	4443      	add	r3, r8
 8007d9e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8007da2:	fb0b 840a 	mla	r4, fp, sl, r8
 8007da6:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8007daa:	46e2      	mov	sl, ip
 8007dac:	b29b      	uxth	r3, r3
 8007dae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007db2:	454f      	cmp	r7, r9
 8007db4:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8007db8:	f84a 3b04 	str.w	r3, [sl], #4
 8007dbc:	d82b      	bhi.n	8007e16 <__multiply+0x120>
 8007dbe:	f8cc 8004 	str.w	r8, [ip, #4]
 8007dc2:	9b01      	ldr	r3, [sp, #4]
 8007dc4:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8007dc8:	3204      	adds	r2, #4
 8007dca:	f1ba 0f00 	cmp.w	sl, #0
 8007dce:	d020      	beq.n	8007e12 <__multiply+0x11c>
 8007dd0:	682b      	ldr	r3, [r5, #0]
 8007dd2:	4689      	mov	r9, r1
 8007dd4:	46a8      	mov	r8, r5
 8007dd6:	f04f 0b00 	mov.w	fp, #0
 8007dda:	f8b9 c000 	ldrh.w	ip, [r9]
 8007dde:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8007de2:	fb0a 440c 	mla	r4, sl, ip, r4
 8007de6:	445c      	add	r4, fp
 8007de8:	46c4      	mov	ip, r8
 8007dea:	b29b      	uxth	r3, r3
 8007dec:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007df0:	f84c 3b04 	str.w	r3, [ip], #4
 8007df4:	f859 3b04 	ldr.w	r3, [r9], #4
 8007df8:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8007dfc:	0c1b      	lsrs	r3, r3, #16
 8007dfe:	fb0a b303 	mla	r3, sl, r3, fp
 8007e02:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8007e06:	454f      	cmp	r7, r9
 8007e08:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8007e0c:	d805      	bhi.n	8007e1a <__multiply+0x124>
 8007e0e:	f8c8 3004 	str.w	r3, [r8, #4]
 8007e12:	3504      	adds	r5, #4
 8007e14:	e79b      	b.n	8007d4e <__multiply+0x58>
 8007e16:	46d4      	mov	ip, sl
 8007e18:	e7b3      	b.n	8007d82 <__multiply+0x8c>
 8007e1a:	46e0      	mov	r8, ip
 8007e1c:	e7dd      	b.n	8007dda <__multiply+0xe4>
 8007e1e:	3e01      	subs	r6, #1
 8007e20:	e799      	b.n	8007d56 <__multiply+0x60>
	...

08007e24 <__pow5mult>:
 8007e24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e28:	4615      	mov	r5, r2
 8007e2a:	f012 0203 	ands.w	r2, r2, #3
 8007e2e:	4606      	mov	r6, r0
 8007e30:	460f      	mov	r7, r1
 8007e32:	d007      	beq.n	8007e44 <__pow5mult+0x20>
 8007e34:	3a01      	subs	r2, #1
 8007e36:	4c21      	ldr	r4, [pc, #132]	; (8007ebc <__pow5mult+0x98>)
 8007e38:	2300      	movs	r3, #0
 8007e3a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007e3e:	f7ff fec8 	bl	8007bd2 <__multadd>
 8007e42:	4607      	mov	r7, r0
 8007e44:	10ad      	asrs	r5, r5, #2
 8007e46:	d035      	beq.n	8007eb4 <__pow5mult+0x90>
 8007e48:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007e4a:	b93c      	cbnz	r4, 8007e5c <__pow5mult+0x38>
 8007e4c:	2010      	movs	r0, #16
 8007e4e:	f7ff fe6d 	bl	8007b2c <malloc>
 8007e52:	6270      	str	r0, [r6, #36]	; 0x24
 8007e54:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007e58:	6004      	str	r4, [r0, #0]
 8007e5a:	60c4      	str	r4, [r0, #12]
 8007e5c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007e60:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007e64:	b94c      	cbnz	r4, 8007e7a <__pow5mult+0x56>
 8007e66:	f240 2171 	movw	r1, #625	; 0x271
 8007e6a:	4630      	mov	r0, r6
 8007e6c:	f7ff ff3a 	bl	8007ce4 <__i2b>
 8007e70:	2300      	movs	r3, #0
 8007e72:	f8c8 0008 	str.w	r0, [r8, #8]
 8007e76:	4604      	mov	r4, r0
 8007e78:	6003      	str	r3, [r0, #0]
 8007e7a:	f04f 0800 	mov.w	r8, #0
 8007e7e:	07eb      	lsls	r3, r5, #31
 8007e80:	d50a      	bpl.n	8007e98 <__pow5mult+0x74>
 8007e82:	4639      	mov	r1, r7
 8007e84:	4622      	mov	r2, r4
 8007e86:	4630      	mov	r0, r6
 8007e88:	f7ff ff35 	bl	8007cf6 <__multiply>
 8007e8c:	4639      	mov	r1, r7
 8007e8e:	4681      	mov	r9, r0
 8007e90:	4630      	mov	r0, r6
 8007e92:	f7ff fe87 	bl	8007ba4 <_Bfree>
 8007e96:	464f      	mov	r7, r9
 8007e98:	106d      	asrs	r5, r5, #1
 8007e9a:	d00b      	beq.n	8007eb4 <__pow5mult+0x90>
 8007e9c:	6820      	ldr	r0, [r4, #0]
 8007e9e:	b938      	cbnz	r0, 8007eb0 <__pow5mult+0x8c>
 8007ea0:	4622      	mov	r2, r4
 8007ea2:	4621      	mov	r1, r4
 8007ea4:	4630      	mov	r0, r6
 8007ea6:	f7ff ff26 	bl	8007cf6 <__multiply>
 8007eaa:	6020      	str	r0, [r4, #0]
 8007eac:	f8c0 8000 	str.w	r8, [r0]
 8007eb0:	4604      	mov	r4, r0
 8007eb2:	e7e4      	b.n	8007e7e <__pow5mult+0x5a>
 8007eb4:	4638      	mov	r0, r7
 8007eb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007eba:	bf00      	nop
 8007ebc:	08008978 	.word	0x08008978

08007ec0 <__lshift>:
 8007ec0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ec4:	460c      	mov	r4, r1
 8007ec6:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007eca:	6923      	ldr	r3, [r4, #16]
 8007ecc:	6849      	ldr	r1, [r1, #4]
 8007ece:	eb0a 0903 	add.w	r9, sl, r3
 8007ed2:	68a3      	ldr	r3, [r4, #8]
 8007ed4:	4607      	mov	r7, r0
 8007ed6:	4616      	mov	r6, r2
 8007ed8:	f109 0501 	add.w	r5, r9, #1
 8007edc:	42ab      	cmp	r3, r5
 8007ede:	db32      	blt.n	8007f46 <__lshift+0x86>
 8007ee0:	4638      	mov	r0, r7
 8007ee2:	f7ff fe2b 	bl	8007b3c <_Balloc>
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	4680      	mov	r8, r0
 8007eea:	f100 0114 	add.w	r1, r0, #20
 8007eee:	461a      	mov	r2, r3
 8007ef0:	4553      	cmp	r3, sl
 8007ef2:	db2b      	blt.n	8007f4c <__lshift+0x8c>
 8007ef4:	6920      	ldr	r0, [r4, #16]
 8007ef6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007efa:	f104 0314 	add.w	r3, r4, #20
 8007efe:	f016 021f 	ands.w	r2, r6, #31
 8007f02:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007f06:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007f0a:	d025      	beq.n	8007f58 <__lshift+0x98>
 8007f0c:	f1c2 0e20 	rsb	lr, r2, #32
 8007f10:	2000      	movs	r0, #0
 8007f12:	681e      	ldr	r6, [r3, #0]
 8007f14:	468a      	mov	sl, r1
 8007f16:	4096      	lsls	r6, r2
 8007f18:	4330      	orrs	r0, r6
 8007f1a:	f84a 0b04 	str.w	r0, [sl], #4
 8007f1e:	f853 0b04 	ldr.w	r0, [r3], #4
 8007f22:	459c      	cmp	ip, r3
 8007f24:	fa20 f00e 	lsr.w	r0, r0, lr
 8007f28:	d814      	bhi.n	8007f54 <__lshift+0x94>
 8007f2a:	6048      	str	r0, [r1, #4]
 8007f2c:	b108      	cbz	r0, 8007f32 <__lshift+0x72>
 8007f2e:	f109 0502 	add.w	r5, r9, #2
 8007f32:	3d01      	subs	r5, #1
 8007f34:	4638      	mov	r0, r7
 8007f36:	f8c8 5010 	str.w	r5, [r8, #16]
 8007f3a:	4621      	mov	r1, r4
 8007f3c:	f7ff fe32 	bl	8007ba4 <_Bfree>
 8007f40:	4640      	mov	r0, r8
 8007f42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f46:	3101      	adds	r1, #1
 8007f48:	005b      	lsls	r3, r3, #1
 8007f4a:	e7c7      	b.n	8007edc <__lshift+0x1c>
 8007f4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8007f50:	3301      	adds	r3, #1
 8007f52:	e7cd      	b.n	8007ef0 <__lshift+0x30>
 8007f54:	4651      	mov	r1, sl
 8007f56:	e7dc      	b.n	8007f12 <__lshift+0x52>
 8007f58:	3904      	subs	r1, #4
 8007f5a:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f5e:	f841 2f04 	str.w	r2, [r1, #4]!
 8007f62:	459c      	cmp	ip, r3
 8007f64:	d8f9      	bhi.n	8007f5a <__lshift+0x9a>
 8007f66:	e7e4      	b.n	8007f32 <__lshift+0x72>

08007f68 <__mcmp>:
 8007f68:	6903      	ldr	r3, [r0, #16]
 8007f6a:	690a      	ldr	r2, [r1, #16]
 8007f6c:	1a9b      	subs	r3, r3, r2
 8007f6e:	b530      	push	{r4, r5, lr}
 8007f70:	d10c      	bne.n	8007f8c <__mcmp+0x24>
 8007f72:	0092      	lsls	r2, r2, #2
 8007f74:	3014      	adds	r0, #20
 8007f76:	3114      	adds	r1, #20
 8007f78:	1884      	adds	r4, r0, r2
 8007f7a:	4411      	add	r1, r2
 8007f7c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007f80:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007f84:	4295      	cmp	r5, r2
 8007f86:	d003      	beq.n	8007f90 <__mcmp+0x28>
 8007f88:	d305      	bcc.n	8007f96 <__mcmp+0x2e>
 8007f8a:	2301      	movs	r3, #1
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	bd30      	pop	{r4, r5, pc}
 8007f90:	42a0      	cmp	r0, r4
 8007f92:	d3f3      	bcc.n	8007f7c <__mcmp+0x14>
 8007f94:	e7fa      	b.n	8007f8c <__mcmp+0x24>
 8007f96:	f04f 33ff 	mov.w	r3, #4294967295
 8007f9a:	e7f7      	b.n	8007f8c <__mcmp+0x24>

08007f9c <__mdiff>:
 8007f9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007fa0:	460d      	mov	r5, r1
 8007fa2:	4607      	mov	r7, r0
 8007fa4:	4611      	mov	r1, r2
 8007fa6:	4628      	mov	r0, r5
 8007fa8:	4614      	mov	r4, r2
 8007faa:	f7ff ffdd 	bl	8007f68 <__mcmp>
 8007fae:	1e06      	subs	r6, r0, #0
 8007fb0:	d108      	bne.n	8007fc4 <__mdiff+0x28>
 8007fb2:	4631      	mov	r1, r6
 8007fb4:	4638      	mov	r0, r7
 8007fb6:	f7ff fdc1 	bl	8007b3c <_Balloc>
 8007fba:	2301      	movs	r3, #1
 8007fbc:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007fc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fc4:	bfa4      	itt	ge
 8007fc6:	4623      	movge	r3, r4
 8007fc8:	462c      	movge	r4, r5
 8007fca:	4638      	mov	r0, r7
 8007fcc:	6861      	ldr	r1, [r4, #4]
 8007fce:	bfa6      	itte	ge
 8007fd0:	461d      	movge	r5, r3
 8007fd2:	2600      	movge	r6, #0
 8007fd4:	2601      	movlt	r6, #1
 8007fd6:	f7ff fdb1 	bl	8007b3c <_Balloc>
 8007fda:	692b      	ldr	r3, [r5, #16]
 8007fdc:	60c6      	str	r6, [r0, #12]
 8007fde:	6926      	ldr	r6, [r4, #16]
 8007fe0:	f105 0914 	add.w	r9, r5, #20
 8007fe4:	f104 0214 	add.w	r2, r4, #20
 8007fe8:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8007fec:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8007ff0:	f100 0514 	add.w	r5, r0, #20
 8007ff4:	f04f 0e00 	mov.w	lr, #0
 8007ff8:	f852 ab04 	ldr.w	sl, [r2], #4
 8007ffc:	f859 4b04 	ldr.w	r4, [r9], #4
 8008000:	fa1e f18a 	uxtah	r1, lr, sl
 8008004:	b2a3      	uxth	r3, r4
 8008006:	1ac9      	subs	r1, r1, r3
 8008008:	0c23      	lsrs	r3, r4, #16
 800800a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800800e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8008012:	b289      	uxth	r1, r1
 8008014:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8008018:	45c8      	cmp	r8, r9
 800801a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800801e:	4694      	mov	ip, r2
 8008020:	f845 3b04 	str.w	r3, [r5], #4
 8008024:	d8e8      	bhi.n	8007ff8 <__mdiff+0x5c>
 8008026:	45bc      	cmp	ip, r7
 8008028:	d304      	bcc.n	8008034 <__mdiff+0x98>
 800802a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800802e:	b183      	cbz	r3, 8008052 <__mdiff+0xb6>
 8008030:	6106      	str	r6, [r0, #16]
 8008032:	e7c5      	b.n	8007fc0 <__mdiff+0x24>
 8008034:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008038:	fa1e f381 	uxtah	r3, lr, r1
 800803c:	141a      	asrs	r2, r3, #16
 800803e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008042:	b29b      	uxth	r3, r3
 8008044:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008048:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800804c:	f845 3b04 	str.w	r3, [r5], #4
 8008050:	e7e9      	b.n	8008026 <__mdiff+0x8a>
 8008052:	3e01      	subs	r6, #1
 8008054:	e7e9      	b.n	800802a <__mdiff+0x8e>

08008056 <__d2b>:
 8008056:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800805a:	460e      	mov	r6, r1
 800805c:	2101      	movs	r1, #1
 800805e:	ec59 8b10 	vmov	r8, r9, d0
 8008062:	4615      	mov	r5, r2
 8008064:	f7ff fd6a 	bl	8007b3c <_Balloc>
 8008068:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800806c:	4607      	mov	r7, r0
 800806e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008072:	bb34      	cbnz	r4, 80080c2 <__d2b+0x6c>
 8008074:	9301      	str	r3, [sp, #4]
 8008076:	f1b8 0300 	subs.w	r3, r8, #0
 800807a:	d027      	beq.n	80080cc <__d2b+0x76>
 800807c:	a802      	add	r0, sp, #8
 800807e:	f840 3d08 	str.w	r3, [r0, #-8]!
 8008082:	f7ff fe00 	bl	8007c86 <__lo0bits>
 8008086:	9900      	ldr	r1, [sp, #0]
 8008088:	b1f0      	cbz	r0, 80080c8 <__d2b+0x72>
 800808a:	9a01      	ldr	r2, [sp, #4]
 800808c:	f1c0 0320 	rsb	r3, r0, #32
 8008090:	fa02 f303 	lsl.w	r3, r2, r3
 8008094:	430b      	orrs	r3, r1
 8008096:	40c2      	lsrs	r2, r0
 8008098:	617b      	str	r3, [r7, #20]
 800809a:	9201      	str	r2, [sp, #4]
 800809c:	9b01      	ldr	r3, [sp, #4]
 800809e:	61bb      	str	r3, [r7, #24]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	bf14      	ite	ne
 80080a4:	2102      	movne	r1, #2
 80080a6:	2101      	moveq	r1, #1
 80080a8:	6139      	str	r1, [r7, #16]
 80080aa:	b1c4      	cbz	r4, 80080de <__d2b+0x88>
 80080ac:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80080b0:	4404      	add	r4, r0
 80080b2:	6034      	str	r4, [r6, #0]
 80080b4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80080b8:	6028      	str	r0, [r5, #0]
 80080ba:	4638      	mov	r0, r7
 80080bc:	b003      	add	sp, #12
 80080be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80080c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80080c6:	e7d5      	b.n	8008074 <__d2b+0x1e>
 80080c8:	6179      	str	r1, [r7, #20]
 80080ca:	e7e7      	b.n	800809c <__d2b+0x46>
 80080cc:	a801      	add	r0, sp, #4
 80080ce:	f7ff fdda 	bl	8007c86 <__lo0bits>
 80080d2:	9b01      	ldr	r3, [sp, #4]
 80080d4:	617b      	str	r3, [r7, #20]
 80080d6:	2101      	movs	r1, #1
 80080d8:	6139      	str	r1, [r7, #16]
 80080da:	3020      	adds	r0, #32
 80080dc:	e7e5      	b.n	80080aa <__d2b+0x54>
 80080de:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80080e2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80080e6:	6030      	str	r0, [r6, #0]
 80080e8:	6918      	ldr	r0, [r3, #16]
 80080ea:	f7ff fdad 	bl	8007c48 <__hi0bits>
 80080ee:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80080f2:	e7e1      	b.n	80080b8 <__d2b+0x62>

080080f4 <_calloc_r>:
 80080f4:	b538      	push	{r3, r4, r5, lr}
 80080f6:	fb02 f401 	mul.w	r4, r2, r1
 80080fa:	4621      	mov	r1, r4
 80080fc:	f000 f856 	bl	80081ac <_malloc_r>
 8008100:	4605      	mov	r5, r0
 8008102:	b118      	cbz	r0, 800810c <_calloc_r+0x18>
 8008104:	4622      	mov	r2, r4
 8008106:	2100      	movs	r1, #0
 8008108:	f7fe f9ca 	bl	80064a0 <memset>
 800810c:	4628      	mov	r0, r5
 800810e:	bd38      	pop	{r3, r4, r5, pc}

08008110 <_free_r>:
 8008110:	b538      	push	{r3, r4, r5, lr}
 8008112:	4605      	mov	r5, r0
 8008114:	2900      	cmp	r1, #0
 8008116:	d045      	beq.n	80081a4 <_free_r+0x94>
 8008118:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800811c:	1f0c      	subs	r4, r1, #4
 800811e:	2b00      	cmp	r3, #0
 8008120:	bfb8      	it	lt
 8008122:	18e4      	addlt	r4, r4, r3
 8008124:	f000 fa29 	bl	800857a <__malloc_lock>
 8008128:	4a1f      	ldr	r2, [pc, #124]	; (80081a8 <_free_r+0x98>)
 800812a:	6813      	ldr	r3, [r2, #0]
 800812c:	4610      	mov	r0, r2
 800812e:	b933      	cbnz	r3, 800813e <_free_r+0x2e>
 8008130:	6063      	str	r3, [r4, #4]
 8008132:	6014      	str	r4, [r2, #0]
 8008134:	4628      	mov	r0, r5
 8008136:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800813a:	f000 ba1f 	b.w	800857c <__malloc_unlock>
 800813e:	42a3      	cmp	r3, r4
 8008140:	d90c      	bls.n	800815c <_free_r+0x4c>
 8008142:	6821      	ldr	r1, [r4, #0]
 8008144:	1862      	adds	r2, r4, r1
 8008146:	4293      	cmp	r3, r2
 8008148:	bf04      	itt	eq
 800814a:	681a      	ldreq	r2, [r3, #0]
 800814c:	685b      	ldreq	r3, [r3, #4]
 800814e:	6063      	str	r3, [r4, #4]
 8008150:	bf04      	itt	eq
 8008152:	1852      	addeq	r2, r2, r1
 8008154:	6022      	streq	r2, [r4, #0]
 8008156:	6004      	str	r4, [r0, #0]
 8008158:	e7ec      	b.n	8008134 <_free_r+0x24>
 800815a:	4613      	mov	r3, r2
 800815c:	685a      	ldr	r2, [r3, #4]
 800815e:	b10a      	cbz	r2, 8008164 <_free_r+0x54>
 8008160:	42a2      	cmp	r2, r4
 8008162:	d9fa      	bls.n	800815a <_free_r+0x4a>
 8008164:	6819      	ldr	r1, [r3, #0]
 8008166:	1858      	adds	r0, r3, r1
 8008168:	42a0      	cmp	r0, r4
 800816a:	d10b      	bne.n	8008184 <_free_r+0x74>
 800816c:	6820      	ldr	r0, [r4, #0]
 800816e:	4401      	add	r1, r0
 8008170:	1858      	adds	r0, r3, r1
 8008172:	4282      	cmp	r2, r0
 8008174:	6019      	str	r1, [r3, #0]
 8008176:	d1dd      	bne.n	8008134 <_free_r+0x24>
 8008178:	6810      	ldr	r0, [r2, #0]
 800817a:	6852      	ldr	r2, [r2, #4]
 800817c:	605a      	str	r2, [r3, #4]
 800817e:	4401      	add	r1, r0
 8008180:	6019      	str	r1, [r3, #0]
 8008182:	e7d7      	b.n	8008134 <_free_r+0x24>
 8008184:	d902      	bls.n	800818c <_free_r+0x7c>
 8008186:	230c      	movs	r3, #12
 8008188:	602b      	str	r3, [r5, #0]
 800818a:	e7d3      	b.n	8008134 <_free_r+0x24>
 800818c:	6820      	ldr	r0, [r4, #0]
 800818e:	1821      	adds	r1, r4, r0
 8008190:	428a      	cmp	r2, r1
 8008192:	bf04      	itt	eq
 8008194:	6811      	ldreq	r1, [r2, #0]
 8008196:	6852      	ldreq	r2, [r2, #4]
 8008198:	6062      	str	r2, [r4, #4]
 800819a:	bf04      	itt	eq
 800819c:	1809      	addeq	r1, r1, r0
 800819e:	6021      	streq	r1, [r4, #0]
 80081a0:	605c      	str	r4, [r3, #4]
 80081a2:	e7c7      	b.n	8008134 <_free_r+0x24>
 80081a4:	bd38      	pop	{r3, r4, r5, pc}
 80081a6:	bf00      	nop
 80081a8:	200004f4 	.word	0x200004f4

080081ac <_malloc_r>:
 80081ac:	b570      	push	{r4, r5, r6, lr}
 80081ae:	1ccd      	adds	r5, r1, #3
 80081b0:	f025 0503 	bic.w	r5, r5, #3
 80081b4:	3508      	adds	r5, #8
 80081b6:	2d0c      	cmp	r5, #12
 80081b8:	bf38      	it	cc
 80081ba:	250c      	movcc	r5, #12
 80081bc:	2d00      	cmp	r5, #0
 80081be:	4606      	mov	r6, r0
 80081c0:	db01      	blt.n	80081c6 <_malloc_r+0x1a>
 80081c2:	42a9      	cmp	r1, r5
 80081c4:	d903      	bls.n	80081ce <_malloc_r+0x22>
 80081c6:	230c      	movs	r3, #12
 80081c8:	6033      	str	r3, [r6, #0]
 80081ca:	2000      	movs	r0, #0
 80081cc:	bd70      	pop	{r4, r5, r6, pc}
 80081ce:	f000 f9d4 	bl	800857a <__malloc_lock>
 80081d2:	4a21      	ldr	r2, [pc, #132]	; (8008258 <_malloc_r+0xac>)
 80081d4:	6814      	ldr	r4, [r2, #0]
 80081d6:	4621      	mov	r1, r4
 80081d8:	b991      	cbnz	r1, 8008200 <_malloc_r+0x54>
 80081da:	4c20      	ldr	r4, [pc, #128]	; (800825c <_malloc_r+0xb0>)
 80081dc:	6823      	ldr	r3, [r4, #0]
 80081de:	b91b      	cbnz	r3, 80081e8 <_malloc_r+0x3c>
 80081e0:	4630      	mov	r0, r6
 80081e2:	f000 f98f 	bl	8008504 <_sbrk_r>
 80081e6:	6020      	str	r0, [r4, #0]
 80081e8:	4629      	mov	r1, r5
 80081ea:	4630      	mov	r0, r6
 80081ec:	f000 f98a 	bl	8008504 <_sbrk_r>
 80081f0:	1c43      	adds	r3, r0, #1
 80081f2:	d124      	bne.n	800823e <_malloc_r+0x92>
 80081f4:	230c      	movs	r3, #12
 80081f6:	6033      	str	r3, [r6, #0]
 80081f8:	4630      	mov	r0, r6
 80081fa:	f000 f9bf 	bl	800857c <__malloc_unlock>
 80081fe:	e7e4      	b.n	80081ca <_malloc_r+0x1e>
 8008200:	680b      	ldr	r3, [r1, #0]
 8008202:	1b5b      	subs	r3, r3, r5
 8008204:	d418      	bmi.n	8008238 <_malloc_r+0x8c>
 8008206:	2b0b      	cmp	r3, #11
 8008208:	d90f      	bls.n	800822a <_malloc_r+0x7e>
 800820a:	600b      	str	r3, [r1, #0]
 800820c:	50cd      	str	r5, [r1, r3]
 800820e:	18cc      	adds	r4, r1, r3
 8008210:	4630      	mov	r0, r6
 8008212:	f000 f9b3 	bl	800857c <__malloc_unlock>
 8008216:	f104 000b 	add.w	r0, r4, #11
 800821a:	1d23      	adds	r3, r4, #4
 800821c:	f020 0007 	bic.w	r0, r0, #7
 8008220:	1ac3      	subs	r3, r0, r3
 8008222:	d0d3      	beq.n	80081cc <_malloc_r+0x20>
 8008224:	425a      	negs	r2, r3
 8008226:	50e2      	str	r2, [r4, r3]
 8008228:	e7d0      	b.n	80081cc <_malloc_r+0x20>
 800822a:	428c      	cmp	r4, r1
 800822c:	684b      	ldr	r3, [r1, #4]
 800822e:	bf16      	itet	ne
 8008230:	6063      	strne	r3, [r4, #4]
 8008232:	6013      	streq	r3, [r2, #0]
 8008234:	460c      	movne	r4, r1
 8008236:	e7eb      	b.n	8008210 <_malloc_r+0x64>
 8008238:	460c      	mov	r4, r1
 800823a:	6849      	ldr	r1, [r1, #4]
 800823c:	e7cc      	b.n	80081d8 <_malloc_r+0x2c>
 800823e:	1cc4      	adds	r4, r0, #3
 8008240:	f024 0403 	bic.w	r4, r4, #3
 8008244:	42a0      	cmp	r0, r4
 8008246:	d005      	beq.n	8008254 <_malloc_r+0xa8>
 8008248:	1a21      	subs	r1, r4, r0
 800824a:	4630      	mov	r0, r6
 800824c:	f000 f95a 	bl	8008504 <_sbrk_r>
 8008250:	3001      	adds	r0, #1
 8008252:	d0cf      	beq.n	80081f4 <_malloc_r+0x48>
 8008254:	6025      	str	r5, [r4, #0]
 8008256:	e7db      	b.n	8008210 <_malloc_r+0x64>
 8008258:	200004f4 	.word	0x200004f4
 800825c:	200004f8 	.word	0x200004f8

08008260 <__ssputs_r>:
 8008260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008264:	688e      	ldr	r6, [r1, #8]
 8008266:	429e      	cmp	r6, r3
 8008268:	4682      	mov	sl, r0
 800826a:	460c      	mov	r4, r1
 800826c:	4690      	mov	r8, r2
 800826e:	4699      	mov	r9, r3
 8008270:	d837      	bhi.n	80082e2 <__ssputs_r+0x82>
 8008272:	898a      	ldrh	r2, [r1, #12]
 8008274:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008278:	d031      	beq.n	80082de <__ssputs_r+0x7e>
 800827a:	6825      	ldr	r5, [r4, #0]
 800827c:	6909      	ldr	r1, [r1, #16]
 800827e:	1a6f      	subs	r7, r5, r1
 8008280:	6965      	ldr	r5, [r4, #20]
 8008282:	2302      	movs	r3, #2
 8008284:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008288:	fb95 f5f3 	sdiv	r5, r5, r3
 800828c:	f109 0301 	add.w	r3, r9, #1
 8008290:	443b      	add	r3, r7
 8008292:	429d      	cmp	r5, r3
 8008294:	bf38      	it	cc
 8008296:	461d      	movcc	r5, r3
 8008298:	0553      	lsls	r3, r2, #21
 800829a:	d530      	bpl.n	80082fe <__ssputs_r+0x9e>
 800829c:	4629      	mov	r1, r5
 800829e:	f7ff ff85 	bl	80081ac <_malloc_r>
 80082a2:	4606      	mov	r6, r0
 80082a4:	b950      	cbnz	r0, 80082bc <__ssputs_r+0x5c>
 80082a6:	230c      	movs	r3, #12
 80082a8:	f8ca 3000 	str.w	r3, [sl]
 80082ac:	89a3      	ldrh	r3, [r4, #12]
 80082ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80082b2:	81a3      	strh	r3, [r4, #12]
 80082b4:	f04f 30ff 	mov.w	r0, #4294967295
 80082b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082bc:	463a      	mov	r2, r7
 80082be:	6921      	ldr	r1, [r4, #16]
 80082c0:	f7fe f8e3 	bl	800648a <memcpy>
 80082c4:	89a3      	ldrh	r3, [r4, #12]
 80082c6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80082ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082ce:	81a3      	strh	r3, [r4, #12]
 80082d0:	6126      	str	r6, [r4, #16]
 80082d2:	6165      	str	r5, [r4, #20]
 80082d4:	443e      	add	r6, r7
 80082d6:	1bed      	subs	r5, r5, r7
 80082d8:	6026      	str	r6, [r4, #0]
 80082da:	60a5      	str	r5, [r4, #8]
 80082dc:	464e      	mov	r6, r9
 80082de:	454e      	cmp	r6, r9
 80082e0:	d900      	bls.n	80082e4 <__ssputs_r+0x84>
 80082e2:	464e      	mov	r6, r9
 80082e4:	4632      	mov	r2, r6
 80082e6:	4641      	mov	r1, r8
 80082e8:	6820      	ldr	r0, [r4, #0]
 80082ea:	f000 f92d 	bl	8008548 <memmove>
 80082ee:	68a3      	ldr	r3, [r4, #8]
 80082f0:	1b9b      	subs	r3, r3, r6
 80082f2:	60a3      	str	r3, [r4, #8]
 80082f4:	6823      	ldr	r3, [r4, #0]
 80082f6:	441e      	add	r6, r3
 80082f8:	6026      	str	r6, [r4, #0]
 80082fa:	2000      	movs	r0, #0
 80082fc:	e7dc      	b.n	80082b8 <__ssputs_r+0x58>
 80082fe:	462a      	mov	r2, r5
 8008300:	f000 f93d 	bl	800857e <_realloc_r>
 8008304:	4606      	mov	r6, r0
 8008306:	2800      	cmp	r0, #0
 8008308:	d1e2      	bne.n	80082d0 <__ssputs_r+0x70>
 800830a:	6921      	ldr	r1, [r4, #16]
 800830c:	4650      	mov	r0, sl
 800830e:	f7ff feff 	bl	8008110 <_free_r>
 8008312:	e7c8      	b.n	80082a6 <__ssputs_r+0x46>

08008314 <_svfiprintf_r>:
 8008314:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008318:	461d      	mov	r5, r3
 800831a:	898b      	ldrh	r3, [r1, #12]
 800831c:	061f      	lsls	r7, r3, #24
 800831e:	b09d      	sub	sp, #116	; 0x74
 8008320:	4680      	mov	r8, r0
 8008322:	460c      	mov	r4, r1
 8008324:	4616      	mov	r6, r2
 8008326:	d50f      	bpl.n	8008348 <_svfiprintf_r+0x34>
 8008328:	690b      	ldr	r3, [r1, #16]
 800832a:	b96b      	cbnz	r3, 8008348 <_svfiprintf_r+0x34>
 800832c:	2140      	movs	r1, #64	; 0x40
 800832e:	f7ff ff3d 	bl	80081ac <_malloc_r>
 8008332:	6020      	str	r0, [r4, #0]
 8008334:	6120      	str	r0, [r4, #16]
 8008336:	b928      	cbnz	r0, 8008344 <_svfiprintf_r+0x30>
 8008338:	230c      	movs	r3, #12
 800833a:	f8c8 3000 	str.w	r3, [r8]
 800833e:	f04f 30ff 	mov.w	r0, #4294967295
 8008342:	e0c8      	b.n	80084d6 <_svfiprintf_r+0x1c2>
 8008344:	2340      	movs	r3, #64	; 0x40
 8008346:	6163      	str	r3, [r4, #20]
 8008348:	2300      	movs	r3, #0
 800834a:	9309      	str	r3, [sp, #36]	; 0x24
 800834c:	2320      	movs	r3, #32
 800834e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008352:	2330      	movs	r3, #48	; 0x30
 8008354:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008358:	9503      	str	r5, [sp, #12]
 800835a:	f04f 0b01 	mov.w	fp, #1
 800835e:	4637      	mov	r7, r6
 8008360:	463d      	mov	r5, r7
 8008362:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008366:	b10b      	cbz	r3, 800836c <_svfiprintf_r+0x58>
 8008368:	2b25      	cmp	r3, #37	; 0x25
 800836a:	d13e      	bne.n	80083ea <_svfiprintf_r+0xd6>
 800836c:	ebb7 0a06 	subs.w	sl, r7, r6
 8008370:	d00b      	beq.n	800838a <_svfiprintf_r+0x76>
 8008372:	4653      	mov	r3, sl
 8008374:	4632      	mov	r2, r6
 8008376:	4621      	mov	r1, r4
 8008378:	4640      	mov	r0, r8
 800837a:	f7ff ff71 	bl	8008260 <__ssputs_r>
 800837e:	3001      	adds	r0, #1
 8008380:	f000 80a4 	beq.w	80084cc <_svfiprintf_r+0x1b8>
 8008384:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008386:	4453      	add	r3, sl
 8008388:	9309      	str	r3, [sp, #36]	; 0x24
 800838a:	783b      	ldrb	r3, [r7, #0]
 800838c:	2b00      	cmp	r3, #0
 800838e:	f000 809d 	beq.w	80084cc <_svfiprintf_r+0x1b8>
 8008392:	2300      	movs	r3, #0
 8008394:	f04f 32ff 	mov.w	r2, #4294967295
 8008398:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800839c:	9304      	str	r3, [sp, #16]
 800839e:	9307      	str	r3, [sp, #28]
 80083a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80083a4:	931a      	str	r3, [sp, #104]	; 0x68
 80083a6:	462f      	mov	r7, r5
 80083a8:	2205      	movs	r2, #5
 80083aa:	f817 1b01 	ldrb.w	r1, [r7], #1
 80083ae:	4850      	ldr	r0, [pc, #320]	; (80084f0 <_svfiprintf_r+0x1dc>)
 80083b0:	f7f7 ff1e 	bl	80001f0 <memchr>
 80083b4:	9b04      	ldr	r3, [sp, #16]
 80083b6:	b9d0      	cbnz	r0, 80083ee <_svfiprintf_r+0xda>
 80083b8:	06d9      	lsls	r1, r3, #27
 80083ba:	bf44      	itt	mi
 80083bc:	2220      	movmi	r2, #32
 80083be:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80083c2:	071a      	lsls	r2, r3, #28
 80083c4:	bf44      	itt	mi
 80083c6:	222b      	movmi	r2, #43	; 0x2b
 80083c8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80083cc:	782a      	ldrb	r2, [r5, #0]
 80083ce:	2a2a      	cmp	r2, #42	; 0x2a
 80083d0:	d015      	beq.n	80083fe <_svfiprintf_r+0xea>
 80083d2:	9a07      	ldr	r2, [sp, #28]
 80083d4:	462f      	mov	r7, r5
 80083d6:	2000      	movs	r0, #0
 80083d8:	250a      	movs	r5, #10
 80083da:	4639      	mov	r1, r7
 80083dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80083e0:	3b30      	subs	r3, #48	; 0x30
 80083e2:	2b09      	cmp	r3, #9
 80083e4:	d94d      	bls.n	8008482 <_svfiprintf_r+0x16e>
 80083e6:	b1b8      	cbz	r0, 8008418 <_svfiprintf_r+0x104>
 80083e8:	e00f      	b.n	800840a <_svfiprintf_r+0xf6>
 80083ea:	462f      	mov	r7, r5
 80083ec:	e7b8      	b.n	8008360 <_svfiprintf_r+0x4c>
 80083ee:	4a40      	ldr	r2, [pc, #256]	; (80084f0 <_svfiprintf_r+0x1dc>)
 80083f0:	1a80      	subs	r0, r0, r2
 80083f2:	fa0b f000 	lsl.w	r0, fp, r0
 80083f6:	4318      	orrs	r0, r3
 80083f8:	9004      	str	r0, [sp, #16]
 80083fa:	463d      	mov	r5, r7
 80083fc:	e7d3      	b.n	80083a6 <_svfiprintf_r+0x92>
 80083fe:	9a03      	ldr	r2, [sp, #12]
 8008400:	1d11      	adds	r1, r2, #4
 8008402:	6812      	ldr	r2, [r2, #0]
 8008404:	9103      	str	r1, [sp, #12]
 8008406:	2a00      	cmp	r2, #0
 8008408:	db01      	blt.n	800840e <_svfiprintf_r+0xfa>
 800840a:	9207      	str	r2, [sp, #28]
 800840c:	e004      	b.n	8008418 <_svfiprintf_r+0x104>
 800840e:	4252      	negs	r2, r2
 8008410:	f043 0302 	orr.w	r3, r3, #2
 8008414:	9207      	str	r2, [sp, #28]
 8008416:	9304      	str	r3, [sp, #16]
 8008418:	783b      	ldrb	r3, [r7, #0]
 800841a:	2b2e      	cmp	r3, #46	; 0x2e
 800841c:	d10c      	bne.n	8008438 <_svfiprintf_r+0x124>
 800841e:	787b      	ldrb	r3, [r7, #1]
 8008420:	2b2a      	cmp	r3, #42	; 0x2a
 8008422:	d133      	bne.n	800848c <_svfiprintf_r+0x178>
 8008424:	9b03      	ldr	r3, [sp, #12]
 8008426:	1d1a      	adds	r2, r3, #4
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	9203      	str	r2, [sp, #12]
 800842c:	2b00      	cmp	r3, #0
 800842e:	bfb8      	it	lt
 8008430:	f04f 33ff 	movlt.w	r3, #4294967295
 8008434:	3702      	adds	r7, #2
 8008436:	9305      	str	r3, [sp, #20]
 8008438:	4d2e      	ldr	r5, [pc, #184]	; (80084f4 <_svfiprintf_r+0x1e0>)
 800843a:	7839      	ldrb	r1, [r7, #0]
 800843c:	2203      	movs	r2, #3
 800843e:	4628      	mov	r0, r5
 8008440:	f7f7 fed6 	bl	80001f0 <memchr>
 8008444:	b138      	cbz	r0, 8008456 <_svfiprintf_r+0x142>
 8008446:	2340      	movs	r3, #64	; 0x40
 8008448:	1b40      	subs	r0, r0, r5
 800844a:	fa03 f000 	lsl.w	r0, r3, r0
 800844e:	9b04      	ldr	r3, [sp, #16]
 8008450:	4303      	orrs	r3, r0
 8008452:	3701      	adds	r7, #1
 8008454:	9304      	str	r3, [sp, #16]
 8008456:	7839      	ldrb	r1, [r7, #0]
 8008458:	4827      	ldr	r0, [pc, #156]	; (80084f8 <_svfiprintf_r+0x1e4>)
 800845a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800845e:	2206      	movs	r2, #6
 8008460:	1c7e      	adds	r6, r7, #1
 8008462:	f7f7 fec5 	bl	80001f0 <memchr>
 8008466:	2800      	cmp	r0, #0
 8008468:	d038      	beq.n	80084dc <_svfiprintf_r+0x1c8>
 800846a:	4b24      	ldr	r3, [pc, #144]	; (80084fc <_svfiprintf_r+0x1e8>)
 800846c:	bb13      	cbnz	r3, 80084b4 <_svfiprintf_r+0x1a0>
 800846e:	9b03      	ldr	r3, [sp, #12]
 8008470:	3307      	adds	r3, #7
 8008472:	f023 0307 	bic.w	r3, r3, #7
 8008476:	3308      	adds	r3, #8
 8008478:	9303      	str	r3, [sp, #12]
 800847a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800847c:	444b      	add	r3, r9
 800847e:	9309      	str	r3, [sp, #36]	; 0x24
 8008480:	e76d      	b.n	800835e <_svfiprintf_r+0x4a>
 8008482:	fb05 3202 	mla	r2, r5, r2, r3
 8008486:	2001      	movs	r0, #1
 8008488:	460f      	mov	r7, r1
 800848a:	e7a6      	b.n	80083da <_svfiprintf_r+0xc6>
 800848c:	2300      	movs	r3, #0
 800848e:	3701      	adds	r7, #1
 8008490:	9305      	str	r3, [sp, #20]
 8008492:	4619      	mov	r1, r3
 8008494:	250a      	movs	r5, #10
 8008496:	4638      	mov	r0, r7
 8008498:	f810 2b01 	ldrb.w	r2, [r0], #1
 800849c:	3a30      	subs	r2, #48	; 0x30
 800849e:	2a09      	cmp	r2, #9
 80084a0:	d903      	bls.n	80084aa <_svfiprintf_r+0x196>
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d0c8      	beq.n	8008438 <_svfiprintf_r+0x124>
 80084a6:	9105      	str	r1, [sp, #20]
 80084a8:	e7c6      	b.n	8008438 <_svfiprintf_r+0x124>
 80084aa:	fb05 2101 	mla	r1, r5, r1, r2
 80084ae:	2301      	movs	r3, #1
 80084b0:	4607      	mov	r7, r0
 80084b2:	e7f0      	b.n	8008496 <_svfiprintf_r+0x182>
 80084b4:	ab03      	add	r3, sp, #12
 80084b6:	9300      	str	r3, [sp, #0]
 80084b8:	4622      	mov	r2, r4
 80084ba:	4b11      	ldr	r3, [pc, #68]	; (8008500 <_svfiprintf_r+0x1ec>)
 80084bc:	a904      	add	r1, sp, #16
 80084be:	4640      	mov	r0, r8
 80084c0:	f7fe f88a 	bl	80065d8 <_printf_float>
 80084c4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80084c8:	4681      	mov	r9, r0
 80084ca:	d1d6      	bne.n	800847a <_svfiprintf_r+0x166>
 80084cc:	89a3      	ldrh	r3, [r4, #12]
 80084ce:	065b      	lsls	r3, r3, #25
 80084d0:	f53f af35 	bmi.w	800833e <_svfiprintf_r+0x2a>
 80084d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80084d6:	b01d      	add	sp, #116	; 0x74
 80084d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084dc:	ab03      	add	r3, sp, #12
 80084de:	9300      	str	r3, [sp, #0]
 80084e0:	4622      	mov	r2, r4
 80084e2:	4b07      	ldr	r3, [pc, #28]	; (8008500 <_svfiprintf_r+0x1ec>)
 80084e4:	a904      	add	r1, sp, #16
 80084e6:	4640      	mov	r0, r8
 80084e8:	f7fe fb2c 	bl	8006b44 <_printf_i>
 80084ec:	e7ea      	b.n	80084c4 <_svfiprintf_r+0x1b0>
 80084ee:	bf00      	nop
 80084f0:	08008984 	.word	0x08008984
 80084f4:	0800898a 	.word	0x0800898a
 80084f8:	0800898e 	.word	0x0800898e
 80084fc:	080065d9 	.word	0x080065d9
 8008500:	08008261 	.word	0x08008261

08008504 <_sbrk_r>:
 8008504:	b538      	push	{r3, r4, r5, lr}
 8008506:	4c06      	ldr	r4, [pc, #24]	; (8008520 <_sbrk_r+0x1c>)
 8008508:	2300      	movs	r3, #0
 800850a:	4605      	mov	r5, r0
 800850c:	4608      	mov	r0, r1
 800850e:	6023      	str	r3, [r4, #0]
 8008510:	f7f9 ff9c 	bl	800244c <_sbrk>
 8008514:	1c43      	adds	r3, r0, #1
 8008516:	d102      	bne.n	800851e <_sbrk_r+0x1a>
 8008518:	6823      	ldr	r3, [r4, #0]
 800851a:	b103      	cbz	r3, 800851e <_sbrk_r+0x1a>
 800851c:	602b      	str	r3, [r5, #0]
 800851e:	bd38      	pop	{r3, r4, r5, pc}
 8008520:	20000bf0 	.word	0x20000bf0

08008524 <__ascii_mbtowc>:
 8008524:	b082      	sub	sp, #8
 8008526:	b901      	cbnz	r1, 800852a <__ascii_mbtowc+0x6>
 8008528:	a901      	add	r1, sp, #4
 800852a:	b142      	cbz	r2, 800853e <__ascii_mbtowc+0x1a>
 800852c:	b14b      	cbz	r3, 8008542 <__ascii_mbtowc+0x1e>
 800852e:	7813      	ldrb	r3, [r2, #0]
 8008530:	600b      	str	r3, [r1, #0]
 8008532:	7812      	ldrb	r2, [r2, #0]
 8008534:	1c10      	adds	r0, r2, #0
 8008536:	bf18      	it	ne
 8008538:	2001      	movne	r0, #1
 800853a:	b002      	add	sp, #8
 800853c:	4770      	bx	lr
 800853e:	4610      	mov	r0, r2
 8008540:	e7fb      	b.n	800853a <__ascii_mbtowc+0x16>
 8008542:	f06f 0001 	mvn.w	r0, #1
 8008546:	e7f8      	b.n	800853a <__ascii_mbtowc+0x16>

08008548 <memmove>:
 8008548:	4288      	cmp	r0, r1
 800854a:	b510      	push	{r4, lr}
 800854c:	eb01 0302 	add.w	r3, r1, r2
 8008550:	d807      	bhi.n	8008562 <memmove+0x1a>
 8008552:	1e42      	subs	r2, r0, #1
 8008554:	4299      	cmp	r1, r3
 8008556:	d00a      	beq.n	800856e <memmove+0x26>
 8008558:	f811 4b01 	ldrb.w	r4, [r1], #1
 800855c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8008560:	e7f8      	b.n	8008554 <memmove+0xc>
 8008562:	4283      	cmp	r3, r0
 8008564:	d9f5      	bls.n	8008552 <memmove+0xa>
 8008566:	1881      	adds	r1, r0, r2
 8008568:	1ad2      	subs	r2, r2, r3
 800856a:	42d3      	cmn	r3, r2
 800856c:	d100      	bne.n	8008570 <memmove+0x28>
 800856e:	bd10      	pop	{r4, pc}
 8008570:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008574:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8008578:	e7f7      	b.n	800856a <memmove+0x22>

0800857a <__malloc_lock>:
 800857a:	4770      	bx	lr

0800857c <__malloc_unlock>:
 800857c:	4770      	bx	lr

0800857e <_realloc_r>:
 800857e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008580:	4607      	mov	r7, r0
 8008582:	4614      	mov	r4, r2
 8008584:	460e      	mov	r6, r1
 8008586:	b921      	cbnz	r1, 8008592 <_realloc_r+0x14>
 8008588:	4611      	mov	r1, r2
 800858a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800858e:	f7ff be0d 	b.w	80081ac <_malloc_r>
 8008592:	b922      	cbnz	r2, 800859e <_realloc_r+0x20>
 8008594:	f7ff fdbc 	bl	8008110 <_free_r>
 8008598:	4625      	mov	r5, r4
 800859a:	4628      	mov	r0, r5
 800859c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800859e:	f000 f821 	bl	80085e4 <_malloc_usable_size_r>
 80085a2:	42a0      	cmp	r0, r4
 80085a4:	d20f      	bcs.n	80085c6 <_realloc_r+0x48>
 80085a6:	4621      	mov	r1, r4
 80085a8:	4638      	mov	r0, r7
 80085aa:	f7ff fdff 	bl	80081ac <_malloc_r>
 80085ae:	4605      	mov	r5, r0
 80085b0:	2800      	cmp	r0, #0
 80085b2:	d0f2      	beq.n	800859a <_realloc_r+0x1c>
 80085b4:	4631      	mov	r1, r6
 80085b6:	4622      	mov	r2, r4
 80085b8:	f7fd ff67 	bl	800648a <memcpy>
 80085bc:	4631      	mov	r1, r6
 80085be:	4638      	mov	r0, r7
 80085c0:	f7ff fda6 	bl	8008110 <_free_r>
 80085c4:	e7e9      	b.n	800859a <_realloc_r+0x1c>
 80085c6:	4635      	mov	r5, r6
 80085c8:	e7e7      	b.n	800859a <_realloc_r+0x1c>

080085ca <__ascii_wctomb>:
 80085ca:	b149      	cbz	r1, 80085e0 <__ascii_wctomb+0x16>
 80085cc:	2aff      	cmp	r2, #255	; 0xff
 80085ce:	bf85      	ittet	hi
 80085d0:	238a      	movhi	r3, #138	; 0x8a
 80085d2:	6003      	strhi	r3, [r0, #0]
 80085d4:	700a      	strbls	r2, [r1, #0]
 80085d6:	f04f 30ff 	movhi.w	r0, #4294967295
 80085da:	bf98      	it	ls
 80085dc:	2001      	movls	r0, #1
 80085de:	4770      	bx	lr
 80085e0:	4608      	mov	r0, r1
 80085e2:	4770      	bx	lr

080085e4 <_malloc_usable_size_r>:
 80085e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80085e8:	1f18      	subs	r0, r3, #4
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	bfbc      	itt	lt
 80085ee:	580b      	ldrlt	r3, [r1, r0]
 80085f0:	18c0      	addlt	r0, r0, r3
 80085f2:	4770      	bx	lr

080085f4 <_init>:
 80085f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085f6:	bf00      	nop
 80085f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085fa:	bc08      	pop	{r3}
 80085fc:	469e      	mov	lr, r3
 80085fe:	4770      	bx	lr

08008600 <_fini>:
 8008600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008602:	bf00      	nop
 8008604:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008606:	bc08      	pop	{r3}
 8008608:	469e      	mov	lr, r3
 800860a:	4770      	bx	lr
